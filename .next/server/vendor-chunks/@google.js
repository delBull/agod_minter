"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@google";
exports.ids = ["vendor-chunks/@google"];
exports.modules = {

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/assets/close-material-svg.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/assets/close-material-svg.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" fill=\"#000000\">\n    <!-- NOTE(cdata): This SVG filter is a stop-gap until we can implement\n         support for dynamic re-coloring of UI components -->\n    <defs>\n      <filter id=\"drop-shadow\" x=\"-100%\" y=\"-100%\" width=\"300%\" height=\"300%\">\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"1\"/>\n        <feOffset dx=\"0\" dy=\"0\" result=\"offsetblur\"/>\n        <feFlood flood-color=\"#000000\"/>\n        <feComposite in2=\"offsetblur\" operator=\"in\"/>\n        <feMerge>\n          <feMergeNode/>\n          <feMergeNode in=\"SourceGraphic\"/>\n        </feMerge>\n      </filter>\n    </defs>\n    <path filter=\"url(#drop-shadow)\" d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n</svg>`);\n//# sourceMappingURL=close-material-svg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2Fzc2V0cy9jbG9zZS1tYXRlcmlhbC1zdmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJCO0FBQzNCLGlFQUFlLHlDQUFJO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLEVBQUM7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL25mdC1taW50aW5nLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi9hc3NldHMvY2xvc2UtbWF0ZXJpYWwtc3ZnLmpzPzE4MzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5leHBvcnQgZGVmYXVsdCBodG1sIGBcbjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRweFwiIGhlaWdodD1cIjI0cHhcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIiMwMDAwMDBcIj5cbiAgICA8IS0tIE5PVEUoY2RhdGEpOiBUaGlzIFNWRyBmaWx0ZXIgaXMgYSBzdG9wLWdhcCB1bnRpbCB3ZSBjYW4gaW1wbGVtZW50XG4gICAgICAgICBzdXBwb3J0IGZvciBkeW5hbWljIHJlLWNvbG9yaW5nIG9mIFVJIGNvbXBvbmVudHMgLS0+XG4gICAgPGRlZnM+XG4gICAgICA8ZmlsdGVyIGlkPVwiZHJvcC1zaGFkb3dcIiB4PVwiLTEwMCVcIiB5PVwiLTEwMCVcIiB3aWR0aD1cIjMwMCVcIiBoZWlnaHQ9XCIzMDAlXCI+XG4gICAgICAgIDxmZUdhdXNzaWFuQmx1ciBpbj1cIlNvdXJjZUFscGhhXCIgc3RkRGV2aWF0aW9uPVwiMVwiLz5cbiAgICAgICAgPGZlT2Zmc2V0IGR4PVwiMFwiIGR5PVwiMFwiIHJlc3VsdD1cIm9mZnNldGJsdXJcIi8+XG4gICAgICAgIDxmZUZsb29kIGZsb29kLWNvbG9yPVwiIzAwMDAwMFwiLz5cbiAgICAgICAgPGZlQ29tcG9zaXRlIGluMj1cIm9mZnNldGJsdXJcIiBvcGVyYXRvcj1cImluXCIvPlxuICAgICAgICA8ZmVNZXJnZT5cbiAgICAgICAgICA8ZmVNZXJnZU5vZGUvPlxuICAgICAgICAgIDxmZU1lcmdlTm9kZSBpbj1cIlNvdXJjZUdyYXBoaWNcIi8+XG4gICAgICAgIDwvZmVNZXJnZT5cbiAgICAgIDwvZmlsdGVyPlxuICAgIDwvZGVmcz5cbiAgICA8cGF0aCBmaWx0ZXI9XCJ1cmwoI2Ryb3Atc2hhZG93KVwiIGQ9XCJNMTkgNi40MUwxNy41OSA1IDEyIDEwLjU5IDYuNDEgNSA1IDYuNDEgMTAuNTkgMTIgNSAxNy41OSA2LjQxIDE5IDEyIDEzLjQxIDE3LjU5IDE5IDE5IDE3LjU5IDEzLjQxIDEyelwiLz5cbiAgICA8cGF0aCBkPVwiTTAgMGgyNHYyNEgwelwiIGZpbGw9XCJub25lXCIvPlxuPC9zdmc+YDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsb3NlLW1hdGVyaWFsLXN2Zy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/assets/close-material-svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/assets/controls-svg.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/assets/controls-svg.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"36\">\n    <defs>\n        <path id=\"A\" d=\"M.001.232h24.997V36H.001z\" />\n    </defs>\n    <g transform=\"translate(-11 -4)\" fill=\"none\" fill-rule=\"evenodd\">\n        <path fill-opacity=\"0\" fill=\"#fff\" d=\"M0 0h44v44H0z\" />\n        <g transform=\"translate(11 3)\">\n            <path d=\"M8.733 11.165c.04-1.108.766-2.027 1.743-2.307a2.54 2.54 0 0 1 .628-.089c.16 0 .314.017.463.044 1.088.2 1.9 1.092 1.9 2.16v8.88h1.26c2.943-1.39 5-4.45 5-8.025a9.01 9.01 0 0 0-1.9-5.56l-.43-.5c-.765-.838-1.683-1.522-2.712-2-1.057-.49-2.226-.77-3.46-.77s-2.4.278-3.46.77c-1.03.478-1.947 1.162-2.71 2l-.43.5a9.01 9.01 0 0 0-1.9 5.56 9.04 9.04 0 0 0 .094 1.305c.03.21.088.41.13.617l.136.624c.083.286.196.56.305.832l.124.333a8.78 8.78 0 0 0 .509.953l.065.122a8.69 8.69 0 0 0 3.521 3.191l1.11.537v-9.178z\" fill-opacity=\".5\" fill=\"#e4e4e4\" />\n            <path d=\"M22.94 26.218l-2.76 7.74c-.172.485-.676.8-1.253.8H12.24c-1.606 0-3.092-.68-3.98-1.82-1.592-2.048-3.647-3.822-6.11-5.27-.095-.055-.15-.137-.152-.23-.004-.1.046-.196.193-.297.56-.393 1.234-.6 1.926-.6a3.43 3.43 0 0 1 .691.069l4.922.994V10.972c0-.663.615-1.203 1.37-1.203s1.373.54 1.373 1.203v9.882h2.953c.273 0 .533.073.757.21l6.257 3.874c.027.017.045.042.07.06.41.296.586.77.426 1.22M4.1 16.614c-.024-.04-.042-.083-.065-.122a8.69 8.69 0 0 1-.509-.953c-.048-.107-.08-.223-.124-.333l-.305-.832c-.058-.202-.09-.416-.136-.624l-.13-.617a9.03 9.03 0 0 1-.094-1.305c0-2.107.714-4.04 1.9-5.56l.43-.5c.764-.84 1.682-1.523 2.71-2 1.058-.49 2.226-.77 3.46-.77s2.402.28 3.46.77c1.03.477 1.947 1.16 2.712 2l.428.5a9 9 0 0 1 1.901 5.559c0 3.577-2.056 6.636-5 8.026h-1.26v-8.882c0-1.067-.822-1.96-1.9-2.16-.15-.028-.304-.044-.463-.044-.22 0-.427.037-.628.09-.977.28-1.703 1.198-1.743 2.306v9.178l-1.11-.537C6.18 19.098 4.96 18 4.1 16.614M22.97 24.09l-6.256-3.874c-.102-.063-.218-.098-.33-.144 2.683-1.8 4.354-4.855 4.354-8.243 0-.486-.037-.964-.104-1.43a9.97 9.97 0 0 0-1.57-4.128l-.295-.408-.066-.092a10.05 10.05 0 0 0-.949-1.078c-.342-.334-.708-.643-1.094-.922-1.155-.834-2.492-1.412-3.94-1.65l-.732-.088-.748-.03a9.29 9.29 0 0 0-1.482.119c-1.447.238-2.786.816-3.94 1.65a9.33 9.33 0 0 0-.813.686 9.59 9.59 0 0 0-.845.877l-.385.437-.36.5-.288.468-.418.778-.04.09c-.593 1.28-.93 2.71-.93 4.222 0 3.832 2.182 7.342 5.56 8.938l1.437.68v4.946L5 25.64a4.44 4.44 0 0 0-.888-.086c-.017 0-.034.003-.05.003-.252.004-.503.033-.75.08a5.08 5.08 0 0 0-.237.056c-.193.046-.382.107-.568.18-.075.03-.15.057-.225.1-.25.114-.494.244-.723.405a1.31 1.31 0 0 0-.566 1.122 1.28 1.28 0 0 0 .645 1.051C4 29.925 5.96 31.614 7.473 33.563a5.06 5.06 0 0 0 .434.491c1.086 1.082 2.656 1.713 4.326 1.715h6.697c.748-.001 1.43-.333 1.858-.872.142-.18.256-.38.336-.602l2.757-7.74c.094-.26.13-.53.112-.794s-.088-.52-.203-.76a2.19 2.19 0 0 0-.821-.91\" fill-opacity=\".6\" fill=\"#000\" />\n            <path d=\"M22.444 24.94l-6.257-3.874a1.45 1.45 0 0 0-.757-.211h-2.953v-9.88c0-.663-.616-1.203-1.373-1.203s-1.37.54-1.37 1.203v16.643l-4.922-.994a3.44 3.44 0 0 0-.692-.069 3.35 3.35 0 0 0-1.925.598c-.147.102-.198.198-.194.298.004.094.058.176.153.23 2.462 1.448 4.517 3.22 6.11 5.27.887 1.14 2.373 1.82 3.98 1.82h6.686c.577 0 1.08-.326 1.253-.8l2.76-7.74c.16-.448-.017-.923-.426-1.22-.025-.02-.043-.043-.07-.06z\" fill=\"#fff\" />\n            <g transform=\"translate(0 .769)\">\n                <mask id=\"B\" fill=\"#fff\">\n                    <use xlink:href=\"#A\" />\n                </mask>\n                <path d=\"M23.993 24.992a1.96 1.96 0 0 1-.111.794l-2.758 7.74c-.08.22-.194.423-.336.602-.427.54-1.11.87-1.857.872h-6.698c-1.67-.002-3.24-.633-4.326-1.715-.154-.154-.3-.318-.434-.49C5.96 30.846 4 29.157 1.646 27.773c-.385-.225-.626-.618-.645-1.05a1.31 1.31 0 0 1 .566-1.122 4.56 4.56 0 0 1 .723-.405l.225-.1a4.3 4.3 0 0 1 .568-.18l.237-.056c.248-.046.5-.075.75-.08.018 0 .034-.003.05-.003.303-.001.597.027.89.086l3.722.752V20.68l-1.436-.68c-3.377-1.596-5.56-5.106-5.56-8.938 0-1.51.336-2.94.93-4.222.015-.03.025-.06.04-.09.127-.267.268-.525.418-.778.093-.16.186-.316.288-.468.063-.095.133-.186.2-.277L3.773 5c.118-.155.26-.29.385-.437.266-.3.544-.604.845-.877a9.33 9.33 0 0 1 .813-.686C6.97 2.167 8.31 1.59 9.757 1.35a9.27 9.27 0 0 1 1.481-.119 8.82 8.82 0 0 1 .748.031c.247.02.49.05.733.088 1.448.238 2.786.816 3.94 1.65.387.28.752.588 1.094.922a9.94 9.94 0 0 1 .949 1.078l.066.092c.102.133.203.268.295.408a9.97 9.97 0 0 1 1.571 4.128c.066.467.103.945.103 1.43 0 3.388-1.67 6.453-4.353 8.243.11.046.227.08.33.144l6.256 3.874c.37.23.645.55.82.9.115.24.185.498.203.76m.697-1.195c-.265-.55-.677-1.007-1.194-1.326l-5.323-3.297c2.255-2.037 3.564-4.97 3.564-8.114 0-2.19-.637-4.304-1.84-6.114-.126-.188-.26-.37-.4-.552-.645-.848-1.402-1.6-2.252-2.204C15.472.91 13.393.232 11.238.232A10.21 10.21 0 0 0 5.23 2.19c-.848.614-1.606 1.356-2.253 2.205-.136.18-.272.363-.398.55C1.374 6.756.737 8.87.737 11.06c0 4.218 2.407 8.08 6.133 9.842l.863.41v3.092l-2.525-.51c-.356-.07-.717-.106-1.076-.106a5.45 5.45 0 0 0-3.14.996c-.653.46-1.022 1.202-.99 1.983a2.28 2.28 0 0 0 1.138 1.872c2.24 1.318 4.106 2.923 5.543 4.772 1.26 1.62 3.333 2.59 5.55 2.592h6.698c1.42-.001 2.68-.86 3.134-2.138l2.76-7.74c.272-.757.224-1.584-.134-2.325\" fill-opacity=\".05\" fill=\"#000\" mask=\"url(#B)\" />\n            </g>\n        </g>\n    </g>\n</svg>`);\n//# sourceMappingURL=controls-svg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/assets/controls-svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/assets/view-in-ar-material-svg.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/assets/view-in-ar-material-svg.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `\n<svg version=\"1.1\" id=\"view_x5F_in_x5F_AR_x5F_icon\"\n\t xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"24px\" height=\"24px\"\n\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<rect id=\"Bounding_Box\" x=\"0\" y=\"0\" fill=\"none\" width=\"24\" height=\"24\"/>\n<g id=\"Art_layer\">\n\t<path d=\"M3,4c0-0.55,0.45-1,1-1h2V1H4C2.35,1,1,2.35,1,4v2h2V4z\"/>\n\t<path d=\"M20,3c0.55,0,1,0.45,1,1v2h2V4c0-1.65-1.35-3-3-3h-2v2H20z\"/>\n\t<path d=\"M4,21c-0.55,0-1-0.45-1-1v-2H1v2c0,1.65,1.35,3,3,3h2v-2H4z\"/>\n\t<path d=\"M20,21c0.55,0,1-0.45,1-1v-2h2v2c0,1.65-1.35,3-3,3h-2v-2H20z\"/>\n\t<g>\n\t\t<path d=\"M18.25,7.6l-5.5-3.18c-0.46-0.27-1.04-0.27-1.5,0L5.75,7.6C5.29,7.87,5,8.36,5,8.9v6.35c0,0.54,0.29,1.03,0.75,1.3\n\t\t\tl5.5,3.18c0.46,0.27,1.04,0.27,1.5,0l5.5-3.18c0.46-0.27,0.75-0.76,0.75-1.3V8.9C19,8.36,18.71,7.87,18.25,7.6z M7,14.96v-4.62\n\t\t\tl4,2.32v4.61L7,14.96z M12,10.93L8,8.61l4-2.31l4,2.31L12,10.93z M13,17.27v-4.61l4-2.32v4.62L13,17.27z\"/>\n\t</g>\n</g>\n</svg>`);\n//# sourceMappingURL=view-in-ar-material-svg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2Fzc2V0cy92aWV3LWluLWFyLW1hdGVyaWFsLXN2Zy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMkI7QUFDM0IsaUVBQWUseUNBQUk7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxFQUFDO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZnQtbWludGluZy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvYXNzZXRzL3ZpZXctaW4tYXItbWF0ZXJpYWwtc3ZnLmpzPzhlM2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5leHBvcnQgZGVmYXVsdCBodG1sIGBcbjxzdmcgdmVyc2lvbj1cIjEuMVwiIGlkPVwidmlld194NUZfaW5feDVGX0FSX3g1Rl9pY29uXCJcblx0IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHdpZHRoPVwiMjRweFwiIGhlaWdodD1cIjI0cHhcIlxuXHQgdmlld0JveD1cIjAgMCAyNCAyNFwiIGVuYWJsZS1iYWNrZ3JvdW5kPVwibmV3IDAgMCAyNCAyNFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XG48cmVjdCBpZD1cIkJvdW5kaW5nX0JveFwiIHg9XCIwXCIgeT1cIjBcIiBmaWxsPVwibm9uZVwiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiLz5cbjxnIGlkPVwiQXJ0X2xheWVyXCI+XG5cdDxwYXRoIGQ9XCJNMyw0YzAtMC41NSwwLjQ1LTEsMS0xaDJWMUg0QzIuMzUsMSwxLDIuMzUsMSw0djJoMlY0elwiLz5cblx0PHBhdGggZD1cIk0yMCwzYzAuNTUsMCwxLDAuNDUsMSwxdjJoMlY0YzAtMS42NS0xLjM1LTMtMy0zaC0ydjJIMjB6XCIvPlxuXHQ8cGF0aCBkPVwiTTQsMjFjLTAuNTUsMC0xLTAuNDUtMS0xdi0ySDF2MmMwLDEuNjUsMS4zNSwzLDMsM2gydi0ySDR6XCIvPlxuXHQ8cGF0aCBkPVwiTTIwLDIxYzAuNTUsMCwxLTAuNDUsMS0xdi0yaDJ2MmMwLDEuNjUtMS4zNSwzLTMsM2gtMnYtMkgyMHpcIi8+XG5cdDxnPlxuXHRcdDxwYXRoIGQ9XCJNMTguMjUsNy42bC01LjUtMy4xOGMtMC40Ni0wLjI3LTEuMDQtMC4yNy0xLjUsMEw1Ljc1LDcuNkM1LjI5LDcuODcsNSw4LjM2LDUsOC45djYuMzVjMCwwLjU0LDAuMjksMS4wMywwLjc1LDEuM1xuXHRcdFx0bDUuNSwzLjE4YzAuNDYsMC4yNywxLjA0LDAuMjcsMS41LDBsNS41LTMuMThjMC40Ni0wLjI3LDAuNzUtMC43NiwwLjc1LTEuM1Y4LjlDMTksOC4zNiwxOC43MSw3Ljg3LDE4LjI1LDcuNnogTTcsMTQuOTZ2LTQuNjJcblx0XHRcdGw0LDIuMzJ2NC42MUw3LDE0Ljk2eiBNMTIsMTAuOTNMOCw4LjYxbDQtMi4zMWw0LDIuMzFMMTIsMTAuOTN6IE0xMywxNy4yN3YtNC42MWw0LTIuMzJ2NC42MkwxMywxNy4yN3pcIi8+XG5cdDwvZz5cbjwvZz5cbjwvc3ZnPmA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3LWluLWFyLW1hdGVyaWFsLXN2Zy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/assets/view-in-ar-material-svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HAS_INTERSECTION_OBSERVER: () => (/* binding */ HAS_INTERSECTION_OBSERVER),\n/* harmony export */   HAS_RESIZE_OBSERVER: () => (/* binding */ HAS_RESIZE_OBSERVER),\n/* harmony export */   HAS_WEBXR_DEVICE_API: () => (/* binding */ HAS_WEBXR_DEVICE_API),\n/* harmony export */   HAS_WEBXR_HIT_TEST_API: () => (/* binding */ HAS_WEBXR_HIT_TEST_API),\n/* harmony export */   IS_ANDROID: () => (/* binding */ IS_ANDROID),\n/* harmony export */   IS_AR_QUICKLOOK_CANDIDATE: () => (/* binding */ IS_AR_QUICKLOOK_CANDIDATE),\n/* harmony export */   IS_CHROMEOS: () => (/* binding */ IS_CHROMEOS),\n/* harmony export */   IS_FIREFOX: () => (/* binding */ IS_FIREFOX),\n/* harmony export */   IS_IOS: () => (/* binding */ IS_IOS),\n/* harmony export */   IS_IOS_CHROME: () => (/* binding */ IS_IOS_CHROME),\n/* harmony export */   IS_IOS_SAFARI: () => (/* binding */ IS_IOS_SAFARI),\n/* harmony export */   IS_MOBILE: () => (/* binding */ IS_MOBILE),\n/* harmony export */   IS_OCULUS: () => (/* binding */ IS_OCULUS),\n/* harmony export */   IS_SAFARI: () => (/* binding */ IS_SAFARI),\n/* harmony export */   IS_SCENEVIEWER_CANDIDATE: () => (/* binding */ IS_SCENEVIEWER_CANDIDATE),\n/* harmony export */   IS_WEBXR_AR_CANDIDATE: () => (/* binding */ IS_WEBXR_AR_CANDIDATE),\n/* harmony export */   IS_WKWEBVIEW: () => (/* binding */ IS_WKWEBVIEW)\n/* harmony export */ });\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// NOTE(cdata): The HAS_WEBXR_* constants can be enabled in Chrome by turning on\n// the appropriate flags. However, just because we have the API does not\n// guarantee that AR will work.\nconst HAS_WEBXR_DEVICE_API = navigator.xr != null &&\n    self.XRSession != null && navigator.xr.isSessionSupported != null;\nconst HAS_WEBXR_HIT_TEST_API = HAS_WEBXR_DEVICE_API &&\n    self.XRSession.prototype.requestHitTestSource != null;\nconst HAS_RESIZE_OBSERVER = self.ResizeObserver != null;\nconst HAS_INTERSECTION_OBSERVER = self.IntersectionObserver != null;\nconst IS_WEBXR_AR_CANDIDATE = HAS_WEBXR_HIT_TEST_API;\nconst IS_MOBILE = (() => {\n    const userAgent = navigator.userAgent || navigator.vendor || self.opera;\n    let check = false;\n    // eslint-disable-next-line\n    if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n        .test(userAgent) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n            .test(userAgent.substr(0, 4))) {\n        check = true;\n    }\n    return check;\n})();\nconst IS_CHROMEOS = /\\bCrOS\\b/.test(navigator.userAgent);\nconst IS_ANDROID = /android/i.test(navigator.userAgent);\n// Prior to iOS 13, detecting iOS Safari was relatively straight-forward.\n// As of iOS 13, Safari on iPad (in its default configuration) reports the same\n// user-agent string as Safari on desktop MacOS. Strictly speaking, we only care\n// about iOS for the purposes if selecting for cases where Quick Look is known\n// to be supported. However, for API correctness purposes, we must rely on\n// known, detectable signals to distinguish iOS Safari from MacOS Safari. At the\n// time of this writing, there are no non-iOS/iPadOS Apple devices with\n// multi-touch displays.\n// @see https://stackoverflow.com/questions/57765958/how-to-detect-ipad-and-ipad-os-version-in-ios-13-and-up\n// @see https://forums.developer.apple.com/thread/119186\n// @see https://github.com/google/model-viewer/issues/758\nconst IS_IOS = (/iPad|iPhone|iPod/.test(navigator.userAgent) && !self.MSStream) ||\n    (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n// @see https://developer.chrome.com/multidevice/user-agent\nconst IS_SAFARI = /Safari\\//.test(navigator.userAgent);\nconst IS_FIREFOX = /firefox/i.test(navigator.userAgent);\nconst IS_OCULUS = /OculusBrowser/.test(navigator.userAgent);\nconst IS_IOS_CHROME = IS_IOS && /CriOS\\//.test(navigator.userAgent);\nconst IS_IOS_SAFARI = IS_IOS && IS_SAFARI;\nconst IS_SCENEVIEWER_CANDIDATE = IS_ANDROID && !IS_FIREFOX && !IS_OCULUS;\nconst IS_WKWEBVIEW = Boolean(window.webkit && window.webkit.messageHandlers);\n// If running in iOS Safari proper, and not within a WKWebView component instance, check for ARQL feature support.\n// Otherwise, if running in a WKWebView instance, check for known ARQL compatible iOS browsers, including:\n// Chrome (CriOS), Edge (EdgiOS), Firefox (FxiOS), Google App (GSA), DuckDuckGo (DuckDuckGo).\n// All other iOS browsers / apps will fail by default.\nconst IS_AR_QUICKLOOK_CANDIDATE = (() => {\n    if (IS_IOS) {\n        if (!IS_WKWEBVIEW) {\n            const tempAnchor = document.createElement('a');\n            return Boolean(tempAnchor.relList && tempAnchor.relList.supports && tempAnchor.relList.supports('ar'));\n        }\n        else {\n            return Boolean(/CriOS\\/|EdgiOS\\/|FxiOS\\/|GSA\\/|DuckDuckGo\\//.test(navigator.userAgent));\n        }\n    }\n    else {\n        return false;\n    }\n})();\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/decorators.js":
/*!*************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/decorators.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   style: () => (/* binding */ style)\n/* harmony export */ });\n/* harmony import */ var _styles_evaluators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/evaluators */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/evaluators.js\");\n/* harmony import */ var _styles_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./styles/parsers */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* harmony import */ var _styles_style_effector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./styles/style-effector */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/style-effector.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * The @style decorator is responsible for coordinating the conversion of a\n * CSS-like string property value into numbers that can be applied to\n * lower-level constructs. It also can optionally manage the lifecycle of a\n * StyleEffector which allows automatic updates for styles that use env() or\n * var() functions.\n *\n * The decorator is configured with Intrinsics and the property key for a\n * method that handles updates. The named update handler is invoked with the\n * result of parsing and evaluating the raw property string value. The format of\n * the evaluated result is derived from the basis of the configured Intrinsics,\n * and is always an array of numbers of fixed length.\n *\n * NOTE: This decorator depends on the property updating mechanism defined by\n * UpdatingElement as exported by the lit-element module. That means it *must*\n * be used in conjunction with the @property decorator, or equivalent\n * JavaScript.\n *\n * Supported configurations are:\n *\n *  - `intrinsics`: An Intrinsics struct that describes how to interpret a\n * serialized style attribute. For more detail on intrinsics see\n * ./styles/evaluators.ts\n *  - `updateHandler`: A string or Symbol that is the key of a method to be\n * invoked with the result of parsing and evaluating a serialized style string.\n *  - `observeEffects`: Optional, if set to true then styles that use env() will\n * cause their update handlers to be invoked every time the corresponding\n * environment variable changes (even if the style attribute itself remains\n * static).\n */\nconst style = (config) => {\n    const observeEffects = config.observeEffects || false;\n    const getIntrinsics = config.intrinsics instanceof Function ?\n        config.intrinsics :\n        (() => config.intrinsics);\n    return (proto, propertyName) => {\n        const originalUpdated = proto.updated;\n        const originalConnectedCallback = proto.connectedCallback;\n        const originalDisconnectedCallback = proto.disconnectedCallback;\n        const $styleEffector = Symbol(`${propertyName}StyleEffector`);\n        const $styleEvaluator = Symbol(`${propertyName}StyleEvaluator`);\n        const $updateEvaluator = Symbol(`${propertyName}UpdateEvaluator`);\n        const $evaluateAndSync = Symbol(`${propertyName}EvaluateAndSync`);\n        Object.defineProperties(proto, {\n            [$styleEffector]: { value: null, writable: true },\n            [$styleEvaluator]: { value: null, writable: true },\n            [$updateEvaluator]: {\n                value: function () {\n                    const ast = (0,_styles_parsers__WEBPACK_IMPORTED_MODULE_1__.parseExpressions)(this[propertyName]);\n                    this[$styleEvaluator] =\n                        new _styles_evaluators__WEBPACK_IMPORTED_MODULE_0__.StyleEvaluator(ast, getIntrinsics(this));\n                    if (this[$styleEffector] == null && observeEffects) {\n                        this[$styleEffector] =\n                            new _styles_style_effector__WEBPACK_IMPORTED_MODULE_2__.StyleEffector(() => this[$evaluateAndSync]());\n                    }\n                    if (this[$styleEffector] != null) {\n                        this[$styleEffector].observeEffectsFor(ast);\n                    }\n                }\n            },\n            [$evaluateAndSync]: {\n                value: function () {\n                    if (this[$styleEvaluator] == null) {\n                        return;\n                    }\n                    const result = this[$styleEvaluator].evaluate();\n                    // @see https://github.com/microsoft/TypeScript/pull/30769\n                    // @see https://github.com/Microsoft/TypeScript/issues/1863\n                    this[config.updateHandler](result);\n                }\n            },\n            updated: {\n                value: function (changedProperties) {\n                    // Always invoke updates to styles first. This gives a class that\n                    // uses this decorator the opportunity to override the effect, or\n                    // respond to it, in its own implementation of `updated`.\n                    if (changedProperties.has(propertyName)) {\n                        this[$updateEvaluator]();\n                        this[$evaluateAndSync]();\n                    }\n                    originalUpdated.call(this, changedProperties);\n                }\n            },\n            connectedCallback: {\n                value: function () {\n                    originalConnectedCallback.call(this);\n                    this.requestUpdate(propertyName, this[propertyName]);\n                }\n            },\n            disconnectedCallback: {\n                value: function () {\n                    originalDisconnectedCallback.call(this);\n                    if (this[$styleEffector] != null) {\n                        this[$styleEffector].dispose();\n                        this[$styleEffector] = null;\n                    }\n                }\n            }\n        });\n    };\n};\n//# sourceMappingURL=decorators.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/decorators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/animation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/animation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimationMixin: () => (/* binding */ AnimationMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\nconst MILLISECONDS_PER_SECOND = 1000.0;\nconst $changeAnimation = Symbol('changeAnimation');\nconst $paused = Symbol('paused');\nconst DEFAULT_PLAY_OPTIONS = {\n    repetitions: Infinity,\n    pingpong: false\n};\nconst AnimationMixin = (ModelViewerElement) => {\n    var _a;\n    class AnimationModelViewerElement extends ModelViewerElement {\n        constructor(...args) {\n            super(args);\n            this.autoplay = false;\n            this.animationName = undefined;\n            this.animationCrossfadeDuration = 300;\n            this[_a] = true;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].subscribeMixerEvent('loop', (e) => {\n                const count = e.action._loopCount;\n                this.dispatchEvent(new CustomEvent('loop', { detail: { count } }));\n            });\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].subscribeMixerEvent('finished', () => {\n                this[$paused] = true;\n                this.dispatchEvent(new CustomEvent('finished'));\n            });\n        }\n        /**\n         * Returns an array\n         */\n        get availableAnimations() {\n            if (this.loaded) {\n                return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationNames;\n            }\n            return [];\n        }\n        get duration() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].duration;\n        }\n        get paused() {\n            return this[$paused];\n        }\n        get currentTime() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationTime;\n        }\n        set currentTime(value) {\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationTime = value;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n        }\n        get timeScale() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationTimeScale;\n        }\n        set timeScale(value) {\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationTimeScale = value;\n        }\n        pause() {\n            if (this[$paused]) {\n                return;\n            }\n            this[$paused] = true;\n            this.dispatchEvent(new CustomEvent('pause'));\n        }\n        play(options) {\n            if (this.availableAnimations.length > 0) {\n                this[$paused] = false;\n                this[$changeAnimation](options);\n                this.dispatchEvent(new CustomEvent('play'));\n            }\n        }\n        [(_a = $paused, _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onModelLoad)]() {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onModelLoad]();\n            this[$paused] = true;\n            if (this.autoplay) {\n                this.play();\n            }\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$tick](_time, delta) {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$tick](_time, delta);\n            if (this[$paused] ||\n                (!this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$getModelIsVisible]() && !this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer].isPresenting)) {\n                return;\n            }\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].updateAnimation(delta / MILLISECONDS_PER_SECOND);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n        }\n        updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('autoplay') && this.autoplay) {\n                this.play();\n            }\n            if (changedProperties.has('animationName')) {\n                this[$changeAnimation]();\n            }\n        }\n        [$changeAnimation](options = DEFAULT_PLAY_OPTIONS) {\n            var _b;\n            const repetitions = (_b = options.repetitions) !== null && _b !== void 0 ? _b : Infinity;\n            const mode = options.pingpong ?\n                three__WEBPACK_IMPORTED_MODULE_2__.LoopPingPong :\n                (repetitions === 1 ? three__WEBPACK_IMPORTED_MODULE_2__.LoopOnce : three__WEBPACK_IMPORTED_MODULE_2__.LoopRepeat);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].playAnimation(this.animationName, this.animationCrossfadeDuration / MILLISECONDS_PER_SECOND, mode, repetitions);\n            // If we are currently paused, we need to force a render so that\n            // the scene updates to the first frame of the new animation\n            if (this[$paused]) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].updateAnimation(0);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean })\n    ], AnimationModelViewerElement.prototype, \"autoplay\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'animation-name' })\n    ], AnimationModelViewerElement.prototype, \"animationName\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'animation-crossfade-duration' })\n    ], AnimationModelViewerElement.prototype, \"animationCrossfadeDuration\", void 0);\n    return AnimationModelViewerElement;\n};\n//# sourceMappingURL=animation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/animation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/annotation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/annotation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnnotationMixin: () => (/* binding */ AnnotationMixin)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _three_components_Hotspot_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../three-components/Hotspot.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Hotspot.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nconst $hotspotMap = Symbol('hotspotMap');\nconst $mutationCallback = Symbol('mutationCallback');\nconst $observer = Symbol('observer');\nconst $addHotspot = Symbol('addHotspot');\nconst $removeHotspot = Symbol('removeHotspot');\nconst worldToModel = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\nconst worldToModelNormal = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix3();\n/**\n * AnnotationMixin implements a declarative API to add hotspots and annotations.\n * Child elements of the <model-viewer> element that have a slot name that\n * begins with \"hotspot\" and data-position and data-normal attributes in\n * the format of the camera-target attribute will be added to the scene and\n * track the specified model coordinates.\n */\nconst AnnotationMixin = (ModelViewerElement) => {\n    var _a, _b, _c;\n    class AnnotationModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this[_a] = new Map();\n            this[_b] = (mutations) => {\n                mutations.forEach((mutation) => {\n                    // NOTE: Be wary that in ShadyDOM cases, the MutationRecord\n                    // only has addedNodes and removedNodes (and no other details).\n                    if (!(mutation instanceof MutationRecord) ||\n                        mutation.type === 'childList') {\n                        mutation.addedNodes.forEach((node) => {\n                            this[$addHotspot](node);\n                        });\n                        mutation.removedNodes.forEach((node) => {\n                            this[$removeHotspot](node);\n                        });\n                        this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$needsRender]();\n                    }\n                });\n            };\n            this[_c] = new MutationObserver(this[$mutationCallback]);\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            for (let i = 0; i < this.children.length; ++i) {\n                this[$addHotspot](this.children[i]);\n            }\n            const { ShadyDOM } = self;\n            if (ShadyDOM == null) {\n                this[$observer].observe(this, { childList: true });\n            }\n            else {\n                this[$observer] =\n                    ShadyDOM.observeChildren(this, this[$mutationCallback]);\n            }\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            const { ShadyDOM } = self;\n            if (ShadyDOM == null) {\n                this[$observer].disconnect();\n            }\n            else {\n                ShadyDOM.unobserveChildren(this[$observer]);\n            }\n        }\n        [(_a = $hotspotMap, _b = $mutationCallback, _c = $observer, _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$tick)](time, delta) {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$tick](time, delta);\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene];\n            const { annotationRenderer } = scene;\n            const camera = scene.getCamera();\n            if (scene.shouldRender()) {\n                scene.updateHotspots(camera.position);\n                annotationRenderer.domElement.style.display = '';\n                annotationRenderer.render(scene, camera);\n            }\n        }\n        /**\n         * Since the data-position and data-normal attributes are not observed, use\n         * this method to move a hotspot. Keep in mind that all hotspots with the\n         * same slot name use a single location and the first definition takes\n         * precedence, until updated with this method.\n         */\n        updateHotspot(config) {\n            const hotspot = this[$hotspotMap].get(config.name);\n            if (hotspot == null) {\n                return;\n            }\n            hotspot.updatePosition(config.position);\n            hotspot.updateNormal(config.normal);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$needsRender]();\n        }\n        /**\n         * This method returns in-scene data about a requested hotspot including\n         * its position in screen (canvas) space and its current visibility.\n         */\n        queryHotspot(name) {\n            const hotspot = this[$hotspotMap].get(name);\n            if (hotspot == null) {\n                return null;\n            }\n            const position = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(hotspot.position);\n            const normal = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(hotspot.normal);\n            const facingCamera = hotspot.facingCamera;\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene];\n            const camera = scene.getCamera();\n            const vector = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n            vector.setFromMatrixPosition(hotspot.matrixWorld);\n            vector.project(camera);\n            const widthHalf = scene.width / 2;\n            const heightHalf = scene.height / 2;\n            vector.x = (vector.x * widthHalf) + widthHalf;\n            vector.y = -(vector.y * heightHalf) + heightHalf;\n            const canvasPosition = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(vector.x, vector.y, vector.z));\n            if (!Number.isFinite(canvasPosition.x) ||\n                !Number.isFinite(canvasPosition.y)) {\n                return null;\n            }\n            return { position, normal, canvasPosition, facingCamera };\n        }\n        /**\n         * This method returns the model position, normal and texture coordinate\n         * of the point on the mesh corresponding to the input pixel coordinates\n         * given relative to the model-viewer element. The position and normal\n         * are returned as strings in the format suitable for putting in a\n         * hotspot's data-position and data-normal attributes. If the mesh is\n         * not hit, the result is null.\n         */\n        positionAndNormalFromPoint(pixelX, pixelY) {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene];\n            const ndcPosition = scene.getNDC(pixelX, pixelY);\n            const hit = scene.positionAndNormalFromPoint(ndcPosition);\n            if (hit == null) {\n                return null;\n            }\n            worldToModel.copy(scene.target.matrixWorld).invert();\n            const position = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(hit.position.applyMatrix4(worldToModel));\n            worldToModelNormal.getNormalMatrix(worldToModel);\n            const normal = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(hit.normal.applyNormalMatrix(worldToModelNormal));\n            let uv = null;\n            if (hit.uv != null) {\n                uv = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector2D)(hit.uv);\n            }\n            return { position: position, normal: normal, uv: uv };\n        }\n        [$addHotspot](node) {\n            if (!(node instanceof HTMLElement &&\n                node.slot.indexOf('hotspot') === 0)) {\n                return;\n            }\n            let hotspot = this[$hotspotMap].get(node.slot);\n            if (hotspot != null) {\n                hotspot.increment();\n            }\n            else {\n                hotspot = new _three_components_Hotspot_js__WEBPACK_IMPORTED_MODULE_1__.Hotspot({\n                    name: node.slot,\n                    position: node.dataset.position,\n                    normal: node.dataset.normal,\n                });\n                this[$hotspotMap].set(node.slot, hotspot);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene].addHotspot(hotspot);\n            }\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene].queueRender();\n        }\n        [$removeHotspot](node) {\n            if (!(node instanceof HTMLElement)) {\n                return;\n            }\n            const hotspot = this[$hotspotMap].get(node.slot);\n            if (!hotspot) {\n                return;\n            }\n            if (hotspot.decrement()) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene].removeHotspot(hotspot);\n                this[$hotspotMap].delete(node.slot);\n            }\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene].queueRender();\n        }\n    }\n    return AnnotationModelViewerElement;\n};\n//# sourceMappingURL=annotation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/annotation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/ar.js":
/*!**************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/ar.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $openIOSARQuickLook: () => (/* binding */ $openIOSARQuickLook),\n/* harmony export */   $openSceneViewer: () => (/* binding */ $openSceneViewer),\n/* harmony export */   ARMixin: () => (/* binding */ ARMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three_examples_jsm_exporters_USDZExporter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/exporters/USDZExporter.js */ \"(ssr)/./node_modules/three/examples/jsm/exporters/USDZExporter.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/constants.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _styles_deserializers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/deserializers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/deserializers.js\");\n/* harmony import */ var _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../three-components/ARRenderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\nlet isWebXRBlocked = false;\nlet isSceneViewerBlocked = false;\nconst noArViewerSigil = '#model-viewer-no-ar-fallback';\nconst deserializeARModes = (0,_styles_deserializers_js__WEBPACK_IMPORTED_MODULE_3__.enumerationDeserializer)(['quick-look', 'scene-viewer', 'webxr', 'none']);\nconst DEFAULT_AR_MODES = 'webxr scene-viewer quick-look';\nconst ARMode = {\n    QUICK_LOOK: 'quick-look',\n    SCENE_VIEWER: 'scene-viewer',\n    WEBXR: 'webxr',\n    NONE: 'none'\n};\nconst $arButtonContainer = Symbol('arButtonContainer');\nconst $enterARWithWebXR = Symbol('enterARWithWebXR');\nconst $openSceneViewer = Symbol('openSceneViewer');\nconst $openIOSARQuickLook = Symbol('openIOSARQuickLook');\nconst $canActivateAR = Symbol('canActivateAR');\nconst $arMode = Symbol('arMode');\nconst $arModes = Symbol('arModes');\nconst $arAnchor = Symbol('arAnchor');\nconst $preload = Symbol('preload');\nconst $onARButtonContainerClick = Symbol('onARButtonContainerClick');\nconst $onARStatus = Symbol('onARStatus');\nconst $onARTracking = Symbol('onARTracking');\nconst $onARTap = Symbol('onARTap');\nconst $selectARMode = Symbol('selectARMode');\nconst $triggerLoad = Symbol('triggerLoad');\nconst ARMixin = (ModelViewerElement) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    class ARModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this.ar = false;\n            this.arScale = 'auto';\n            this.arPlacement = 'floor';\n            this.arModes = DEFAULT_AR_MODES;\n            this.iosSrc = null;\n            this.xrEnvironment = false;\n            this[_a] = false;\n            // TODO: Add this to the shadow root as part of this mixin's\n            // implementation:\n            this[_b] = this.shadowRoot.querySelector('.ar-button');\n            this[_c] = document.createElement('a');\n            this[_d] = new Set();\n            this[_e] = ARMode.NONE;\n            this[_f] = false;\n            this[_g] = (event) => {\n                event.preventDefault();\n                this.activateAR();\n            };\n            this[_h] = ({ status }) => {\n                if (status === _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.NOT_PRESENTING ||\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.presentedScene === this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene]) {\n                    this.setAttribute('ar-status', status);\n                    this.dispatchEvent(new CustomEvent('ar-status', { detail: { status } }));\n                    if (status === _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.NOT_PRESENTING) {\n                        this.removeAttribute('ar-tracking');\n                    }\n                    else if (status === _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.SESSION_STARTED) {\n                        this.setAttribute('ar-tracking', _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARTracking.TRACKING);\n                    }\n                }\n            };\n            this[_j] = ({ status }) => {\n                this.setAttribute('ar-tracking', status);\n                this.dispatchEvent(new CustomEvent('ar-tracking', { detail: { status } }));\n            };\n            this[_k] = (event) => {\n                if (event.data == '_apple_ar_quicklook_button_tapped') {\n                    this.dispatchEvent(new CustomEvent('quick-look-button-tapped'));\n                }\n            };\n        }\n        get canActivateAR() {\n            return this[$arMode] !== ARMode.NONE;\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.addEventListener('status', this[$onARStatus]);\n            this.setAttribute('ar-status', _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.NOT_PRESENTING);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.addEventListener('tracking', this[$onARTracking]);\n            this[$arAnchor].addEventListener('message', this[$onARTap]);\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.removeEventListener('status', this[$onARStatus]);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.removeEventListener('tracking', this[$onARTracking]);\n            this[$arAnchor].removeEventListener('message', this[$onARTap]);\n        }\n        update(changedProperties) {\n            super.update(changedProperties);\n            if (changedProperties.has('arScale')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].canScale = this.arScale !== 'fixed';\n            }\n            if (changedProperties.has('arPlacement')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].updateShadow();\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$needsRender]();\n            }\n            if (changedProperties.has('arModes')) {\n                this[$arModes] = deserializeARModes(this.arModes);\n            }\n            if (changedProperties.has('ar') || changedProperties.has('arModes') ||\n                changedProperties.has('src') || changedProperties.has('iosSrc')) {\n                this[$selectARMode]();\n            }\n        }\n        /**\n         * Activates AR. Note that for any mode that is not WebXR-based, this\n         * method most likely has to be called synchronous from a user\n         * interaction handler. Otherwise, attempts to activate modes that\n         * require user interaction will most likely be ignored.\n         */\n        async activateAR() {\n            switch (this[$arMode]) {\n                case ARMode.QUICK_LOOK:\n                    this[$openIOSARQuickLook]();\n                    break;\n                case ARMode.WEBXR:\n                    await this[$enterARWithWebXR]();\n                    break;\n                case ARMode.SCENE_VIEWER:\n                    this[$openSceneViewer]();\n                    break;\n                default:\n                    console.warn('No AR Mode can be activated. This is probably due to missing \\\nconfiguration or device capabilities');\n                    break;\n            }\n        }\n        async [(_a = $canActivateAR, _b = $arButtonContainer, _c = $arAnchor, _d = $arModes, _e = $arMode, _f = $preload, _g = $onARButtonContainerClick, _h = $onARStatus, _j = $onARTracking, _k = $onARTap, $selectARMode)]() {\n            let arMode = ARMode.NONE;\n            if (this.ar) {\n                if (this.src != null) {\n                    for (const value of this[$arModes]) {\n                        if (value === 'webxr' && _constants_js__WEBPACK_IMPORTED_MODULE_1__.IS_WEBXR_AR_CANDIDATE && !isWebXRBlocked &&\n                            await this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.supportsPresentation()) {\n                            arMode = ARMode.WEBXR;\n                            break;\n                        }\n                        if (value === 'scene-viewer' && _constants_js__WEBPACK_IMPORTED_MODULE_1__.IS_SCENEVIEWER_CANDIDATE &&\n                            !isSceneViewerBlocked) {\n                            arMode = ARMode.SCENE_VIEWER;\n                            break;\n                        }\n                        if (value === 'quick-look' && _constants_js__WEBPACK_IMPORTED_MODULE_1__.IS_AR_QUICKLOOK_CANDIDATE) {\n                            arMode = ARMode.QUICK_LOOK;\n                            break;\n                        }\n                    }\n                }\n                // The presence of ios-src overrides the absence of quick-look\n                // ar-mode.\n                if (arMode === ARMode.NONE && this.iosSrc != null &&\n                    _constants_js__WEBPACK_IMPORTED_MODULE_1__.IS_AR_QUICKLOOK_CANDIDATE) {\n                    arMode = ARMode.QUICK_LOOK;\n                }\n            }\n            if (arMode !== ARMode.NONE) {\n                this[$arButtonContainer].classList.add('enabled');\n                this[$arButtonContainer].addEventListener('click', this[$onARButtonContainerClick]);\n            }\n            else if (this[$arButtonContainer].classList.contains('enabled')) {\n                this[$arButtonContainer].removeEventListener('click', this[$onARButtonContainerClick]);\n                this[$arButtonContainer].classList.remove('enabled');\n                // If AR went from working to not, notify the element.\n                const status = _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.FAILED;\n                this.setAttribute('ar-status', status);\n                this.dispatchEvent(new CustomEvent('ar-status', { detail: { status } }));\n            }\n            this[$arMode] = arMode;\n        }\n        async [$enterARWithWebXR]() {\n            console.log('Attempting to present in AR with WebXR...');\n            await this[$triggerLoad]();\n            try {\n                this[$arButtonContainer].removeEventListener('click', this[$onARButtonContainerClick]);\n                const { arRenderer } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer];\n                arRenderer.placeOnWall = this.arPlacement === 'wall';\n                await arRenderer.present(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene], this.xrEnvironment);\n            }\n            catch (error) {\n                console.warn('Error while trying to present in AR with WebXR');\n                console.error(error);\n                await this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.stopPresenting();\n                isWebXRBlocked = true;\n                console.warn('Falling back to next ar-mode');\n                await this[$selectARMode]();\n                this.activateAR();\n            }\n            finally {\n                this[$selectARMode]();\n            }\n        }\n        async [$triggerLoad]() {\n            if (!this.loaded) {\n                this[$preload] = true;\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$updateSource]();\n                await (0,_utilities_js__WEBPACK_IMPORTED_MODULE_5__.waitForEvent)(this, 'load');\n                this[$preload] = false;\n            }\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$shouldAttemptPreload]() {\n            return super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$shouldAttemptPreload]() || this[$preload];\n        }\n        /**\n         * Takes a URL and a title string, and attempts to launch Scene Viewer on\n         * the current device.\n         */\n        [$openSceneViewer]() {\n            const location = self.location.toString();\n            const locationUrl = new URL(location);\n            const modelUrl = new URL(this.src, location);\n            const params = new URLSearchParams(modelUrl.search);\n            locationUrl.hash = noArViewerSigil;\n            // modelUrl can contain title/link/sound etc.\n            params.set('mode', 'ar_preferred');\n            if (!params.has('disable_occlusion')) {\n                params.set('disable_occlusion', 'true');\n            }\n            if (this.arScale === 'fixed') {\n                params.set('resizable', 'false');\n            }\n            if (this.arPlacement === 'wall') {\n                params.set('enable_vertical_placement', 'true');\n            }\n            if (params.has('sound')) {\n                const soundUrl = new URL(params.get('sound'), location);\n                params.set('sound', soundUrl.toString());\n            }\n            if (params.has('link')) {\n                const linkUrl = new URL(params.get('link'), location);\n                params.set('link', linkUrl.toString());\n            }\n            const intent = `intent://arvr.google.com/scene-viewer/1.0?${params.toString() + '&file=' +\n                encodeURIComponent(modelUrl\n                    .toString())}#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=${encodeURIComponent(locationUrl.toString())};end;`;\n            const undoHashChange = () => {\n                if (self.location.hash === noArViewerSigil) {\n                    isSceneViewerBlocked = true;\n                    // The new history will be the current URL with a new hash.\n                    // Go back one step so that we reset to the expected URL.\n                    // NOTE(cdata): this should not invoke any browser-level navigation\n                    // because hash-only changes modify the URL in-place without\n                    // navigating:\n                    self.history.back();\n                    console.warn('Error while trying to present in AR with Scene Viewer');\n                    console.warn('Falling back to next ar-mode');\n                    this[$selectARMode]();\n                    // Would be nice to activateAR() here, but webXR fails due to not\n                    // seeing a user activation.\n                }\n            };\n            self.addEventListener('hashchange', undoHashChange, { once: true });\n            this[$arAnchor].setAttribute('href', intent);\n            console.log('Attempting to present in AR with Scene Viewer...');\n            this[$arAnchor].click();\n        }\n        /**\n         * Takes a URL to a USDZ file and sets the appropriate fields so that\n         * Safari iOS can intent to their AR Quick Look.\n         */\n        async [$openIOSARQuickLook]() {\n            const generateUsdz = !this.iosSrc;\n            this[$arButtonContainer].classList.remove('enabled');\n            const objectURL = generateUsdz ? await this.prepareUSDZ() : this.iosSrc;\n            const modelUrl = new URL(objectURL, self.location.toString());\n            if (generateUsdz) {\n                const location = self.location.toString();\n                const locationUrl = new URL(location);\n                const srcUrl = new URL(this.src, locationUrl);\n                if (srcUrl.hash) {\n                    modelUrl.hash = srcUrl.hash;\n                }\n            }\n            if (this.arScale === 'fixed') {\n                if (modelUrl.hash) {\n                    modelUrl.hash += '&';\n                }\n                modelUrl.hash += 'allowsContentScaling=0';\n            }\n            const anchor = this[$arAnchor];\n            anchor.setAttribute('rel', 'ar');\n            const img = document.createElement('img');\n            anchor.appendChild(img);\n            anchor.setAttribute('href', modelUrl.toString());\n            if (generateUsdz) {\n                anchor.setAttribute('download', 'model.usdz');\n            }\n            // attach anchor to shadow DOM to ensure iOS16 ARQL banner click message event propagation \n            anchor.style.display = 'none';\n            if (!anchor.isConnected)\n                this.shadowRoot.appendChild(anchor);\n            console.log('Attempting to present in AR with Quick Look...');\n            anchor.click();\n            anchor.removeChild(img);\n            if (generateUsdz) {\n                URL.revokeObjectURL(objectURL);\n            }\n            this[$arButtonContainer].classList.add('enabled');\n        }\n        async prepareUSDZ() {\n            const updateSourceProgress = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$progressTracker].beginActivity();\n            await this[$triggerLoad]();\n            const { model, shadow } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            if (model == null) {\n                return '';\n            }\n            let visible = false;\n            // Remove shadow from export\n            if (shadow != null) {\n                visible = shadow.visible;\n                shadow.visible = false;\n            }\n            updateSourceProgress(0.2);\n            const exporter = new three_examples_jsm_exporters_USDZExporter_js__WEBPACK_IMPORTED_MODULE_6__.USDZExporter();\n            const arraybuffer = await exporter.parse(model);\n            const blob = new Blob([arraybuffer], {\n                type: 'model/vnd.usdz+zip',\n            });\n            const url = URL.createObjectURL(blob);\n            updateSourceProgress(1);\n            if (shadow != null) {\n                shadow.visible = visible;\n            }\n            return url;\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'ar' })\n    ], ARModelViewerElement.prototype, \"ar\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'ar-scale' })\n    ], ARModelViewerElement.prototype, \"arScale\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'ar-placement' })\n    ], ARModelViewerElement.prototype, \"arPlacement\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'ar-modes' })\n    ], ARModelViewerElement.prototype, \"arModes\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'ios-src' })\n    ], ARModelViewerElement.prototype, \"iosSrc\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'xr-environment' })\n    ], ARModelViewerElement.prototype, \"xrEnvironment\", void 0);\n    return ARModelViewerElement;\n};\n//# sourceMappingURL=ar.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/ar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/controls.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/controls.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $controls: () => (/* binding */ $controls),\n/* harmony export */   $fingerAnimatedContainers: () => (/* binding */ $fingerAnimatedContainers),\n/* harmony export */   $panElement: () => (/* binding */ $panElement),\n/* harmony export */   $promptAnimatedContainer: () => (/* binding */ $promptAnimatedContainer),\n/* harmony export */   $promptElement: () => (/* binding */ $promptElement),\n/* harmony export */   ControlsMixin: () => (/* binding */ ControlsMixin),\n/* harmony export */   DEFAULT_CAMERA_ORBIT: () => (/* binding */ DEFAULT_CAMERA_ORBIT),\n/* harmony export */   DEFAULT_FOV_DEG: () => (/* binding */ DEFAULT_FOV_DEG),\n/* harmony export */   DEFAULT_INTERACTION_PROMPT_THRESHOLD: () => (/* binding */ DEFAULT_INTERACTION_PROMPT_THRESHOLD),\n/* harmony export */   DEFAULT_MIN_FOV_DEG: () => (/* binding */ DEFAULT_MIN_FOV_DEG),\n/* harmony export */   INTERACTION_PROMPT: () => (/* binding */ INTERACTION_PROMPT),\n/* harmony export */   InteractionPromptStrategy: () => (/* binding */ InteractionPromptStrategy),\n/* harmony export */   InteractionPromptStyle: () => (/* binding */ InteractionPromptStyle),\n/* harmony export */   TouchAction: () => (/* binding */ TouchAction),\n/* harmony export */   cameraOrbitIntrinsics: () => (/* binding */ cameraOrbitIntrinsics),\n/* harmony export */   cameraTargetIntrinsics: () => (/* binding */ cameraTargetIntrinsics),\n/* harmony export */   fieldOfViewIntrinsics: () => (/* binding */ fieldOfViewIntrinsics)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _decorators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../decorators.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/decorators.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/conversions.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _styles_evaluators_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../styles/evaluators.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/evaluators.js\");\n/* harmony import */ var _styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../styles/parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* harmony import */ var _three_components_Damper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../three-components/Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* harmony import */ var _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../three-components/SmoothControls.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/SmoothControls.js\");\n/* harmony import */ var _utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/animation.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/animation.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n// NOTE(cdata): The following \"animation\" timing functions are deliberately\n// being used in favor of CSS animations. In Safari 12.1 and 13, CSS animations\n// would cause the interaction prompt to glitch unexpectedly\n// @see https://github.com/google/model-viewer/issues/839\nconst PROMPT_ANIMATION_TIME = 5000;\n// For timing purposes, a \"frame\" is a timing agnostic relative unit of time\n// and a \"value\" is a target value for the Frame.\nconst wiggle = (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)({\n    initialValue: 0,\n    keyframes: [\n        { frames: 5, value: -1 },\n        { frames: 1, value: -1 },\n        { frames: 8, value: 1 },\n        { frames: 1, value: 1 },\n        { frames: 5, value: 0 },\n        { frames: 18, value: 0 }\n    ]\n});\nconst fade = (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)({\n    initialValue: 0,\n    keyframes: [\n        { frames: 1, value: 1 },\n        { frames: 5, value: 1 },\n        { frames: 1, value: 0 },\n        { frames: 6, value: 0 }\n    ]\n});\nconst DEFAULT_FOV_DEG = 30;\nconst DEFAULT_MIN_FOV_DEG = 12;\nconst DEFAULT_CAMERA_ORBIT = '0deg 75deg 105%';\nconst DEFAULT_CAMERA_TARGET = 'auto auto auto';\nconst DEFAULT_FIELD_OF_VIEW = 'auto';\nconst MINIMUM_RADIUS_RATIO = 2.2;\nconst AZIMUTHAL_QUADRANT_LABELS = ['front', 'right', 'back', 'left'];\nconst POLAR_TRIENT_LABELS = ['upper-', '', 'lower-'];\nconst DEFAULT_INTERACTION_PROMPT_THRESHOLD = 3000;\nconst INTERACTION_PROMPT = '. Use mouse, touch or arrow keys to move.';\nconst InteractionPromptStrategy = {\n    AUTO: 'auto',\n    NONE: 'none'\n};\nconst InteractionPromptStyle = {\n    BASIC: 'basic',\n    WIGGLE: 'wiggle'\n};\nconst TouchAction = {\n    PAN_Y: 'pan-y',\n    PAN_X: 'pan-x',\n    NONE: 'none'\n};\nconst fieldOfViewIntrinsics = () => {\n    return {\n        basis: [(0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.degreesToRadians)((0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(DEFAULT_FOV_DEG, 'deg'))],\n        keywords: { auto: [null] }\n    };\n};\nconst minFieldOfViewIntrinsics = () => {\n    return {\n        basis: [(0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.degreesToRadians)((0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(DEFAULT_MIN_FOV_DEG, 'deg'))],\n        keywords: { auto: [null] }\n    };\n};\nconst cameraOrbitIntrinsics = (() => {\n    const defaultTerms = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.parseExpressions)(DEFAULT_CAMERA_ORBIT)[0]\n        .terms;\n    const theta = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.normalizeUnit)(defaultTerms[0]);\n    const phi = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.normalizeUnit)(defaultTerms[1]);\n    return (element) => {\n        const radius = element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].idealCameraDistance();\n        return {\n            basis: [theta, phi, (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(radius, 'm')],\n            keywords: { auto: [null, null, (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(105, '%')] }\n        };\n    };\n})();\nconst minCameraOrbitIntrinsics = (element) => {\n    const radius = MINIMUM_RADIUS_RATIO * element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].boundingSphere.radius;\n    return {\n        basis: [\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(-Infinity, 'rad'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(Math.PI / 8, 'rad'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(radius, 'm')\n        ],\n        keywords: { auto: [null, null, null] }\n    };\n};\nconst maxCameraOrbitIntrinsics = (element) => {\n    const orbitIntrinsics = cameraOrbitIntrinsics(element);\n    const evaluator = new _styles_evaluators_js__WEBPACK_IMPORTED_MODULE_4__.StyleEvaluator([], orbitIntrinsics);\n    const defaultRadius = evaluator.evaluate()[2];\n    return {\n        basis: [\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(Infinity, 'rad'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(Math.PI - Math.PI / 8, 'rad'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(defaultRadius, 'm')\n        ],\n        keywords: { auto: [null, null, null] }\n    };\n};\nconst cameraTargetIntrinsics = (element) => {\n    const center = element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].boundingBox.getCenter(new three__WEBPACK_IMPORTED_MODULE_9__.Vector3());\n    return {\n        basis: [\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(center.x, 'm'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(center.y, 'm'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(center.z, 'm')\n        ],\n        keywords: { auto: [null, null, null] }\n    };\n};\nconst HALF_PI = Math.PI / 2.0;\nconst THIRD_PI = Math.PI / 3.0;\nconst QUARTER_PI = HALF_PI / 2.0;\nconst TAU = 2.0 * Math.PI;\nconst $controls = Symbol('controls');\nconst $panElement = Symbol('panElement');\nconst $promptElement = Symbol('promptElement');\nconst $promptAnimatedContainer = Symbol('promptAnimatedContainer');\nconst $fingerAnimatedContainers = Symbol('fingerAnimatedContainers');\nconst $deferInteractionPrompt = Symbol('deferInteractionPrompt');\nconst $updateAria = Symbol('updateAria');\nconst $updateCameraForRadius = Symbol('updateCameraForRadius');\nconst $onChange = Symbol('onChange');\nconst $onPointerChange = Symbol('onPointerChange');\nconst $waitingToPromptUser = Symbol('waitingToPromptUser');\nconst $userHasInteracted = Symbol('userHasInteracted');\nconst $promptElementVisibleTime = Symbol('promptElementVisibleTime');\nconst $lastPromptOffset = Symbol('lastPromptOffset');\nconst $lastSpherical = Symbol('lastSpherical');\nconst $jumpCamera = Symbol('jumpCamera');\nconst $initialized = Symbol('initialized');\nconst $maintainThetaPhi = Symbol('maintainThetaPhi');\nconst $syncCameraOrbit = Symbol('syncCameraOrbit');\nconst $syncFieldOfView = Symbol('syncFieldOfView');\nconst $syncCameraTarget = Symbol('syncCameraTarget');\nconst $syncMinCameraOrbit = Symbol('syncMinCameraOrbit');\nconst $syncMaxCameraOrbit = Symbol('syncMaxCameraOrbit');\nconst $syncMinFieldOfView = Symbol('syncMinFieldOfView');\nconst $syncMaxFieldOfView = Symbol('syncMaxFieldOfView');\nconst ControlsMixin = (ModelViewerElement) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n    class ControlsModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this.cameraControls = false;\n            this.cameraOrbit = DEFAULT_CAMERA_ORBIT;\n            this.cameraTarget = DEFAULT_CAMERA_TARGET;\n            this.fieldOfView = DEFAULT_FIELD_OF_VIEW;\n            this.minCameraOrbit = 'auto';\n            this.maxCameraOrbit = 'auto';\n            this.minFieldOfView = 'auto';\n            this.maxFieldOfView = 'auto';\n            this.interactionPromptThreshold = DEFAULT_INTERACTION_PROMPT_THRESHOLD;\n            this.interactionPrompt = InteractionPromptStrategy.AUTO;\n            this.interactionPromptStyle = InteractionPromptStyle.WIGGLE;\n            this.orbitSensitivity = 1;\n            this.touchAction = TouchAction.NONE;\n            this.disableZoom = false;\n            this.disablePan = false;\n            this.disableTap = false;\n            this.interpolationDecay = _three_components_Damper_js__WEBPACK_IMPORTED_MODULE_6__.DECAY_MILLISECONDS;\n            this[_a] = this.shadowRoot.querySelector('.interaction-prompt');\n            this[_b] = this.shadowRoot.querySelector('#prompt');\n            this[_c] = [\n                this.shadowRoot.querySelector('#finger0'),\n                this.shadowRoot.querySelector('#finger1')\n            ];\n            this[_d] = this.shadowRoot.querySelector('.pan-target');\n            this[_e] = 0;\n            this[_f] = Infinity;\n            this[_g] = false;\n            this[_h] = false;\n            this[_j] = new _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.SmoothControls(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].camera, this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$userInputElement], this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene]);\n            this[_k] = new three__WEBPACK_IMPORTED_MODULE_9__.Spherical();\n            this[_l] = false;\n            this[_m] = false;\n            this[_o] = false;\n            this[_p] = ({ source }) => {\n                this[$updateAria]();\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$needsRender]();\n                if (source === _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.USER_INTERACTION) {\n                    this[$userHasInteracted] = true;\n                    this[$deferInteractionPrompt]();\n                }\n                this.dispatchEvent(new CustomEvent('camera-change', { detail: { source } }));\n            };\n            this[_q] = (event) => {\n                if (event.type === 'pointer-change-start') {\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$container].classList.add('pointer-tumbling');\n                }\n                else {\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$container].classList.remove('pointer-tumbling');\n                }\n            };\n        }\n        get inputSensitivity() {\n            return this[$controls].inputSensitivity;\n        }\n        set inputSensitivity(value) {\n            this[$controls].inputSensitivity = value;\n        }\n        getCameraOrbit() {\n            const { theta, phi, radius } = this[$lastSpherical];\n            return {\n                theta,\n                phi,\n                radius,\n                toString() {\n                    return `${this.theta}rad ${this.phi}rad ${this.radius}m`;\n                }\n            };\n        }\n        getCameraTarget() {\n            return (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.toVector3D)(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].isPresenting ? this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.target :\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].getTarget());\n        }\n        getFieldOfView() {\n            return this[$controls].getFieldOfView();\n        }\n        // Provided so user code does not have to parse these from attributes.\n        getMinimumFieldOfView() {\n            return this[$controls].options.minimumFieldOfView;\n        }\n        getMaximumFieldOfView() {\n            return this[$controls].options.maximumFieldOfView;\n        }\n        getIdealAspect() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].idealAspect;\n        }\n        jumpCameraToGoal() {\n            this[$jumpCamera] = true;\n            this.requestUpdate($jumpCamera, false);\n        }\n        resetInteractionPrompt() {\n            this[$lastPromptOffset] = 0;\n            this[$promptElementVisibleTime] = Infinity;\n            this[$userHasInteracted] = false;\n            this[$waitingToPromptUser] =\n                this.interactionPrompt === InteractionPromptStrategy.AUTO &&\n                    this.cameraControls;\n        }\n        zoom(keyPresses) {\n            const event = new WheelEvent('wheel', { deltaY: -30 * keyPresses });\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$userInputElement].dispatchEvent(event);\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this[$controls].addEventListener('change', this[$onChange]);\n            this[$controls].addEventListener('pointer-change-start', this[$onPointerChange]);\n            this[$controls].addEventListener('pointer-change-end', this[$onPointerChange]);\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            this[$controls].removeEventListener('change', this[$onChange]);\n            this[$controls].removeEventListener('pointer-change-start', this[$onPointerChange]);\n            this[$controls].removeEventListener('pointer-change-end', this[$onPointerChange]);\n        }\n        updated(changedProperties) {\n            super.updated(changedProperties);\n            const controls = this[$controls];\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            if (changedProperties.has('cameraControls')) {\n                if (this.cameraControls) {\n                    controls.enableInteraction();\n                    if (this.interactionPrompt === InteractionPromptStrategy.AUTO) {\n                        this[$waitingToPromptUser] = true;\n                    }\n                }\n                else {\n                    controls.disableInteraction();\n                    this[$deferInteractionPrompt]();\n                }\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$userInputElement].setAttribute('aria-label', this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$ariaLabel]);\n            }\n            if (changedProperties.has('disableZoom')) {\n                controls.disableZoom = this.disableZoom;\n            }\n            if (changedProperties.has('disablePan')) {\n                controls.enablePan = !this.disablePan;\n            }\n            if (changedProperties.has('disableTap')) {\n                controls.enableTap = !this.disableTap;\n            }\n            if (changedProperties.has('interactionPrompt') ||\n                changedProperties.has('cameraControls') ||\n                changedProperties.has('src')) {\n                if (this.interactionPrompt === InteractionPromptStrategy.AUTO &&\n                    this.cameraControls && !this[$userHasInteracted]) {\n                    this[$waitingToPromptUser] = true;\n                }\n                else {\n                    this[$deferInteractionPrompt]();\n                }\n            }\n            if (changedProperties.has('interactionPromptStyle')) {\n                this[$promptAnimatedContainer].style.opacity =\n                    this.interactionPromptStyle == InteractionPromptStyle.BASIC ? '1' :\n                        '0';\n            }\n            if (changedProperties.has('touchAction')) {\n                const touchAction = this.touchAction;\n                controls.applyOptions({ touchAction });\n                controls.updateTouchActionStyle();\n            }\n            if (changedProperties.has('orbitSensitivity')) {\n                controls.orbitSensitivity = this.orbitSensitivity;\n            }\n            if (changedProperties.has('interpolationDecay')) {\n                controls.setDamperDecayTime(this.interpolationDecay);\n                scene.setTargetDamperDecayTime(this.interpolationDecay);\n            }\n            if (this[$jumpCamera] === true) {\n                Promise.resolve().then(() => {\n                    controls.jumpToGoal();\n                    scene.jumpToGoal();\n                    this[$jumpCamera] = false;\n                });\n            }\n        }\n        async updateFraming() {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            const oldFramedFoV = scene.adjustedFoV(scene.framedFoVDeg);\n            await scene.updateFraming();\n            const newFramedFoV = scene.adjustedFoV(scene.framedFoVDeg);\n            const zoom = this[$controls].getFieldOfView() / oldFramedFoV;\n            this[$controls].setFieldOfView(newFramedFoV * zoom);\n            this[$maintainThetaPhi] = true;\n            this.requestUpdate('maxFieldOfView');\n            this.requestUpdate('fieldOfView');\n            this.requestUpdate('minCameraOrbit');\n            this.requestUpdate('maxCameraOrbit');\n            this.requestUpdate('cameraOrbit');\n            await this.updateComplete;\n        }\n        interact(duration, finger0, finger1) {\n            const inputElement = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$userInputElement];\n            const fingerElements = this[$fingerAnimatedContainers];\n            if (fingerElements[0].style.opacity === '1') {\n                console.warn('interact() failed because an existing interaction is running.');\n                return;\n            }\n            const xy = new Array();\n            xy.push({ x: (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)(finger0.x), y: (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)(finger0.y) });\n            const positions = [{ x: xy[0].x(0), y: xy[0].y(0) }];\n            if (finger1 != null) {\n                xy.push({ x: (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)(finger1.x), y: (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)(finger1.y) });\n                positions.push({ x: xy[1].x(0), y: xy[1].y(0) });\n            }\n            let startTime = performance.now();\n            const { width, height } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            const dispatchTouches = (type) => {\n                for (const [i, position] of positions.entries()) {\n                    const { style } = fingerElements[i];\n                    style.transform = `translateX(${width * position.x}px) translateY(${height * position.y}px)`;\n                    if (type === 'pointerdown') {\n                        style.opacity = '1';\n                    }\n                    else if (type === 'pointerup') {\n                        style.opacity = '0';\n                    }\n                    const init = {\n                        pointerId: i - 5678,\n                        pointerType: 'touch',\n                        target: inputElement,\n                        clientX: width * position.x,\n                        clientY: height * position.y,\n                        altKey: true // flag that this is not a user interaction\n                    };\n                    inputElement.dispatchEvent(new PointerEvent(type, init));\n                }\n            };\n            const moveTouches = () => {\n                // Cancel interaction if something else moves the camera or input is\n                // removed from the DOM.\n                const { changeSource } = this[$controls];\n                if (changeSource !== _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.AUTOMATIC ||\n                    !inputElement.isConnected) {\n                    for (const fingerElement of this[$fingerAnimatedContainers]) {\n                        fingerElement.style.opacity = '0';\n                    }\n                    dispatchTouches('pointercancel');\n                    this.dispatchEvent(new CustomEvent('interact-stopped', { detail: { source: changeSource } }));\n                    document.removeEventListener('visibilitychange', onVisibilityChange);\n                    return;\n                }\n                const time = Math.min(1, (performance.now() - startTime) / duration);\n                for (const [i, position] of positions.entries()) {\n                    position.x = xy[i].x(time);\n                    position.y = xy[i].y(time);\n                }\n                dispatchTouches('pointermove');\n                if (time < 1) {\n                    requestAnimationFrame(moveTouches);\n                }\n                else {\n                    dispatchTouches('pointerup');\n                    this.dispatchEvent(new CustomEvent('interact-stopped', { detail: { source: changeSource } }));\n                    document.removeEventListener('visibilitychange', onVisibilityChange);\n                }\n            };\n            const onVisibilityChange = () => {\n                let elapsed = 0;\n                if (document.visibilityState === 'hidden') {\n                    elapsed = performance.now() - startTime;\n                }\n                else {\n                    startTime = performance.now() - elapsed;\n                }\n            };\n            document.addEventListener('visibilitychange', onVisibilityChange);\n            dispatchTouches('pointerdown');\n            requestAnimationFrame(moveTouches);\n        }\n        [(_a = $promptElement, _b = $promptAnimatedContainer, _c = $fingerAnimatedContainers, _d = $panElement, _e = $lastPromptOffset, _f = $promptElementVisibleTime, _g = $userHasInteracted, _h = $waitingToPromptUser, _j = $controls, _k = $lastSpherical, _l = $jumpCamera, _m = $initialized, _o = $maintainThetaPhi, $syncFieldOfView)](style) {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            scene.framedFoVDeg = style[0] * 180 / Math.PI;\n            this[$controls].setFieldOfView(scene.adjustedFoV(scene.framedFoVDeg));\n        }\n        [$syncCameraOrbit](style) {\n            const controls = this[$controls];\n            if (this[$maintainThetaPhi]) {\n                const { theta, phi } = this.getCameraOrbit();\n                style[0] = theta;\n                style[1] = phi;\n                this[$maintainThetaPhi] = false;\n            }\n            controls.changeSource = _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.NONE;\n            controls.setOrbit(style[0], style[1], style[2]);\n        }\n        [$syncMinCameraOrbit](style) {\n            this[$controls].applyOptions({\n                minimumAzimuthalAngle: style[0],\n                minimumPolarAngle: style[1],\n                minimumRadius: style[2]\n            });\n            this.jumpCameraToGoal();\n        }\n        [$syncMaxCameraOrbit](style) {\n            this[$controls].applyOptions({\n                maximumAzimuthalAngle: style[0],\n                maximumPolarAngle: style[1],\n                maximumRadius: style[2]\n            });\n            this[$updateCameraForRadius](style[2]);\n            this.jumpCameraToGoal();\n        }\n        [$syncMinFieldOfView](style) {\n            this[$controls].applyOptions({ minimumFieldOfView: style[0] * 180 / Math.PI });\n            this.jumpCameraToGoal();\n        }\n        [$syncMaxFieldOfView](style) {\n            const fov = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].adjustedFoV(style[0] * 180 / Math.PI);\n            this[$controls].applyOptions({ maximumFieldOfView: fov });\n            this.jumpCameraToGoal();\n        }\n        [$syncCameraTarget](style) {\n            const [x, y, z] = style;\n            if (!this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.isPresenting) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].setTarget(x, y, z);\n            }\n            this[$controls].changeSource = _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.NONE;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.updateTarget();\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$tick](time, delta) {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$tick](time, delta);\n            if (this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].isPresenting || !this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$getModelIsVisible]()) {\n                return;\n            }\n            const controls = this[$controls];\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            const now = performance.now();\n            if (this[$waitingToPromptUser]) {\n                if (this.loaded &&\n                    now > this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$loadedTime] + this.interactionPromptThreshold) {\n                    this[$waitingToPromptUser] = false;\n                    this[$promptElementVisibleTime] = now;\n                    this[$promptElement].classList.add('visible');\n                }\n            }\n            if (isFinite(this[$promptElementVisibleTime]) &&\n                this.interactionPromptStyle === InteractionPromptStyle.WIGGLE) {\n                const animationTime = ((now - this[$promptElementVisibleTime]) / PROMPT_ANIMATION_TIME) %\n                    1;\n                const offset = wiggle(animationTime);\n                const opacity = fade(animationTime);\n                this[$promptAnimatedContainer].style.opacity = `${opacity}`;\n                if (offset !== this[$lastPromptOffset]) {\n                    const xOffset = offset * scene.width * 0.05;\n                    const deltaTheta = (offset - this[$lastPromptOffset]) * Math.PI / 16;\n                    this[$promptAnimatedContainer].style.transform =\n                        `translateX(${xOffset}px)`;\n                    controls.changeSource = _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.AUTOMATIC;\n                    controls.adjustOrbit(deltaTheta, 0, 0);\n                    this[$lastPromptOffset] = offset;\n                }\n            }\n            controls.update(time, delta);\n            if (scene.updateTarget(delta)) {\n                this[$onChange]({ type: 'change', source: controls.changeSource });\n            }\n        }\n        [$deferInteractionPrompt]() {\n            // Effectively cancel the timer waiting for user interaction:\n            this[$waitingToPromptUser] = false;\n            this[$promptElement].classList.remove('visible');\n            this[$promptElementVisibleTime] = Infinity;\n        }\n        /**\n         * Updates the camera's near and far planes to enclose the scene when\n         * orbiting at the supplied radius.\n         */\n        [$updateCameraForRadius](radius) {\n            const maximumRadius = Math.max(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].boundingSphere.radius, radius);\n            const near = 0;\n            const far = 2 * maximumRadius;\n            this[$controls].updateNearFar(near, far);\n        }\n        [$updateAria]() {\n            const { theta, phi } = this[$controls].getCameraSpherical(this[$lastSpherical]);\n            const azimuthalQuadrant = (4 + Math.floor(((theta % TAU) + QUARTER_PI) / HALF_PI)) % 4;\n            const polarTrient = Math.floor(phi / THIRD_PI);\n            const azimuthalQuadrantLabel = AZIMUTHAL_QUADRANT_LABELS[azimuthalQuadrant];\n            const polarTrientLabel = POLAR_TRIENT_LABELS[polarTrient];\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$updateStatus](`View from stage ${polarTrientLabel}${azimuthalQuadrantLabel}`);\n        }\n        get [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$ariaLabel]() {\n            return super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$ariaLabel] +\n                (this.cameraControls ? INTERACTION_PROMPT : '');\n        }\n        async [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$onResize](event) {\n            const controls = this[$controls];\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            const oldFramedFoV = scene.adjustedFoV(scene.framedFoVDeg);\n            // The super of $onResize may update the scene's adjustedFoV, so we\n            // compare the before and after to calculate the proper zoom.\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$onResize](event);\n            const fovRatio = scene.adjustedFoV(scene.framedFoVDeg) / oldFramedFoV;\n            const fov = controls.getFieldOfView() * (isFinite(fovRatio) ? fovRatio : 1);\n            controls.updateAspect(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].aspect);\n            this.requestUpdate('maxFieldOfView', this.maxFieldOfView);\n            await this.updateComplete;\n            this[$controls].setFieldOfView(fov);\n            this.jumpCameraToGoal();\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$onModelLoad]() {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$onModelLoad]();\n            if (this[$initialized]) {\n                this[$maintainThetaPhi] = true;\n            }\n            else {\n                this[$initialized] = true;\n            }\n            this.requestUpdate('maxFieldOfView', this.maxFieldOfView);\n            this.requestUpdate('fieldOfView', this.fieldOfView);\n            this.requestUpdate('minCameraOrbit', this.minCameraOrbit);\n            this.requestUpdate('maxCameraOrbit', this.maxCameraOrbit);\n            this.requestUpdate('cameraOrbit', this.cameraOrbit);\n            this.requestUpdate('cameraTarget', this.cameraTarget);\n            this.jumpCameraToGoal();\n        }\n    }\n    _p = $onChange, _q = $onPointerChange;\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'camera-controls' })\n    ], ControlsModelViewerElement.prototype, \"cameraControls\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: cameraOrbitIntrinsics,\n            observeEffects: true,\n            updateHandler: $syncCameraOrbit\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'camera-orbit', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"cameraOrbit\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: cameraTargetIntrinsics,\n            observeEffects: true,\n            updateHandler: $syncCameraTarget\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'camera-target', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"cameraTarget\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: fieldOfViewIntrinsics,\n            observeEffects: true,\n            updateHandler: $syncFieldOfView\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'field-of-view', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"fieldOfView\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: minCameraOrbitIntrinsics,\n            updateHandler: $syncMinCameraOrbit\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'min-camera-orbit', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"minCameraOrbit\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: maxCameraOrbitIntrinsics,\n            updateHandler: $syncMaxCameraOrbit\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'max-camera-orbit', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"maxCameraOrbit\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: minFieldOfViewIntrinsics,\n            updateHandler: $syncMinFieldOfView\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'min-field-of-view', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"minFieldOfView\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({ intrinsics: fieldOfViewIntrinsics, updateHandler: $syncMaxFieldOfView }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'max-field-of-view', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"maxFieldOfView\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'interaction-prompt-threshold' })\n    ], ControlsModelViewerElement.prototype, \"interactionPromptThreshold\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'interaction-prompt' })\n    ], ControlsModelViewerElement.prototype, \"interactionPrompt\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'interaction-prompt-style' })\n    ], ControlsModelViewerElement.prototype, \"interactionPromptStyle\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'orbit-sensitivity' })\n    ], ControlsModelViewerElement.prototype, \"orbitSensitivity\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'touch-action' })\n    ], ControlsModelViewerElement.prototype, \"touchAction\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'disable-zoom' })\n    ], ControlsModelViewerElement.prototype, \"disableZoom\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'disable-pan' })\n    ], ControlsModelViewerElement.prototype, \"disablePan\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'disable-tap' })\n    ], ControlsModelViewerElement.prototype, \"disableTap\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'interpolation-decay' })\n    ], ControlsModelViewerElement.prototype, \"interpolationDecay\", void 0);\n    return ControlsModelViewerElement;\n};\n//# sourceMappingURL=controls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL2NvbnRyb2xzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBSSxJQUFJLFNBQUk7QUFDOUI7QUFDQTtBQUNBLDZDQUE2QyxRQUFRO0FBQ3JEO0FBQ0E7QUFDNkM7QUFDRjtBQUNGO0FBQ3dLO0FBQ3RJO0FBQ2xCO0FBQ1c7QUFDRDtBQUNrQjtBQUNoQztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUVBQVE7QUFDdkI7QUFDQTtBQUNBLFVBQVUsc0JBQXNCO0FBQ2hDLFVBQVUsc0JBQXNCO0FBQ2hDLFVBQVUscUJBQXFCO0FBQy9CLFVBQVUscUJBQXFCO0FBQy9CLFVBQVUscUJBQXFCO0FBQy9CLFVBQVU7QUFDVjtBQUNBLENBQUM7QUFDRCxhQUFhLGlFQUFRO0FBQ3JCO0FBQ0E7QUFDQSxVQUFVLHFCQUFxQjtBQUMvQixVQUFVLHFCQUFxQjtBQUMvQixVQUFVLHFCQUFxQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQSxDQUFDO0FBQ007QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxnQkFBZ0Isd0VBQWdCLENBQUMsOERBQVU7QUFDM0Msb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdFQUFnQixDQUFDLDhEQUFVO0FBQzNDLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ087QUFDUCx5QkFBeUIsb0VBQWdCO0FBQ3pDO0FBQ0Esa0JBQWtCLHFFQUFhO0FBQy9CLGdCQUFnQixxRUFBYTtBQUM3QjtBQUNBLCtCQUErQix5REFBTTtBQUNyQztBQUNBLGdDQUFnQyw4REFBVTtBQUMxQyx3QkFBd0IsbUJBQW1CLDhEQUFVO0FBQ3JEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrREFBa0QseURBQU07QUFDeEQ7QUFDQTtBQUNBLFlBQVksOERBQVU7QUFDdEIsWUFBWSw4REFBVTtBQUN0QixZQUFZLDhEQUFVO0FBQ3RCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGlFQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLFlBQVksOERBQVU7QUFDdEIsWUFBWSw4REFBVTtBQUN0QixZQUFZLDhEQUFVO0FBQ3RCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDTztBQUNQLDJCQUEyQix5REFBTSw0QkFBNEIsMENBQU87QUFDcEU7QUFDQTtBQUNBLFlBQVksOERBQVU7QUFDdEIsWUFBWSw4REFBVTtBQUN0QixZQUFZLDhEQUFVO0FBQ3RCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDJFQUFrQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLCtFQUFjLE1BQU0seURBQU0sZUFBZSxvRUFBaUIsUUFBUSx5REFBTTtBQUNuRywyQkFBMkIsNENBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFFBQVE7QUFDbEM7QUFDQSxxQkFBcUIsK0RBQVk7QUFDakMsK0JBQStCLDZFQUFZO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxVQUFVLFVBQVU7QUFDMUY7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDZEQUFVO0FBQ25DO0FBQ0E7QUFDQSx5QkFBeUIsNkRBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsV0FBVyxNQUFNLFNBQVMsTUFBTSxZQUFZO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlFQUFVLE1BQU0sNERBQVMsc0JBQXNCLDREQUFTO0FBQzNFLHFCQUFxQix5REFBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseURBQU07QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCwwQkFBMEI7QUFDOUUsaUJBQWlCLG9FQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix5REFBTTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9FQUFpQixrQ0FBa0MsNkRBQVU7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsYUFBYTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix5REFBTTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG9FQUFpQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsR0FBRyxpRUFBUSxnQkFBZ0IsaUVBQVEsYUFBYTtBQUN0RSxpQ0FBaUMsOEJBQThCO0FBQy9EO0FBQ0EsMEJBQTBCLEdBQUcsaUVBQVEsZ0JBQWdCLGlFQUFRLGFBQWE7QUFDMUUsaUNBQWlDLDhCQUE4QjtBQUMvRDtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQixPQUFPLHlEQUFNO0FBQ2pEO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQyxvREFBb0QsbUJBQW1CLGlCQUFpQixvQkFBb0I7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixlQUFlO0FBQ3ZDLHFDQUFxQyw2RUFBWTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLFVBQVUsd0JBQXdCO0FBQy9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsVUFBVSx3QkFBd0I7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix5REFBTTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsYUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyw2RUFBWTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyw4Q0FBOEM7QUFDekY7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHlEQUFNO0FBQ25DLDJDQUEyQyx5QkFBeUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNERBQVM7QUFDL0IscUJBQXFCLHlEQUFNO0FBQzNCO0FBQ0EsMkNBQTJDLDZFQUFZO0FBQ3ZELGlCQUFpQiw0REFBUztBQUMxQjtBQUNBLFNBQVMsd0RBQUs7QUFDZCxrQkFBa0Isd0RBQUs7QUFDdkIscUJBQXFCLDREQUFTLHdCQUF3QixxRUFBa0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHlEQUFNO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw4REFBVztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLFFBQVE7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5Qyw0Q0FBNEMsNkVBQVk7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLCtDQUErQztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCx5REFBTTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0VBQWEscUJBQXFCLGlCQUFpQixFQUFFLHVCQUF1QjtBQUM3RjtBQUNBLGFBQWEsNkRBQVU7QUFDdkIseUJBQXlCLDZEQUFVO0FBQ25DO0FBQ0E7QUFDQSxlQUFlLDREQUFTO0FBQ3hCO0FBQ0EsK0JBQStCLHlEQUFNO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw0REFBUztBQUMzQjtBQUNBO0FBQ0EsdUNBQXVDLHlEQUFNO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtEQUFZO0FBQ3JCLGtCQUFrQiwrREFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwyREFBUSxHQUFHLDZDQUE2QztBQUNoRTtBQUNBO0FBQ0EsUUFBUSxxREFBSztBQUNiO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRLDJEQUFRLEdBQUcsaUVBQWlFO0FBQ3BGO0FBQ0E7QUFDQSxRQUFRLHFEQUFLO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVEsMkRBQVEsR0FBRyxrRUFBa0U7QUFDckY7QUFDQTtBQUNBLFFBQVEscURBQUs7QUFDYjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUSwyREFBUSxHQUFHLGtFQUFrRTtBQUNyRjtBQUNBO0FBQ0EsUUFBUSxxREFBSztBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUSwyREFBUSxHQUFHLHFFQUFxRTtBQUN4RjtBQUNBO0FBQ0EsUUFBUSxxREFBSztBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUSwyREFBUSxHQUFHLHFFQUFxRTtBQUN4RjtBQUNBO0FBQ0EsUUFBUSxxREFBSztBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUSwyREFBUSxHQUFHLHNFQUFzRTtBQUN6RjtBQUNBO0FBQ0EsUUFBUSxxREFBSyxHQUFHLHVFQUF1RTtBQUN2RixRQUFRLDJEQUFRLEdBQUcsc0VBQXNFO0FBQ3pGO0FBQ0E7QUFDQSxRQUFRLDJEQUFRLEdBQUcseURBQXlEO0FBQzVFO0FBQ0E7QUFDQSxRQUFRLDJEQUFRLEdBQUcsK0NBQStDO0FBQ2xFO0FBQ0E7QUFDQSxRQUFRLDJEQUFRLEdBQUcscURBQXFEO0FBQ3hFO0FBQ0E7QUFDQSxRQUFRLDJEQUFRLEdBQUcsOENBQThDO0FBQ2pFO0FBQ0E7QUFDQSxRQUFRLDJEQUFRLEdBQUcseUNBQXlDO0FBQzVEO0FBQ0E7QUFDQSxRQUFRLDJEQUFRLEdBQUcsMENBQTBDO0FBQzdEO0FBQ0E7QUFDQSxRQUFRLDJEQUFRLEdBQUcseUNBQXlDO0FBQzVEO0FBQ0E7QUFDQSxRQUFRLDJEQUFRLEdBQUcseUNBQXlDO0FBQzVEO0FBQ0E7QUFDQSxRQUFRLDJEQUFRLEdBQUcsZ0RBQWdEO0FBQ25FO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL2NvbnRyb2xzLmpzP2JjNzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBTcGhlcmljYWwsIFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBzdHlsZSB9IGZyb20gJy4uL2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgJGFyaWFMYWJlbCwgJGNvbnRhaW5lciwgJGdldE1vZGVsSXNWaXNpYmxlLCAkbG9hZGVkVGltZSwgJG5lZWRzUmVuZGVyLCAkb25Nb2RlbExvYWQsICRvblJlc2l6ZSwgJHJlbmRlcmVyLCAkc2NlbmUsICR0aWNrLCAkdXBkYXRlU3RhdHVzLCAkdXNlcklucHV0RWxlbWVudCwgdG9WZWN0b3IzRCB9IGZyb20gJy4uL21vZGVsLXZpZXdlci1iYXNlLmpzJztcbmltcG9ydCB7IGRlZ3JlZXNUb1JhZGlhbnMsIG5vcm1hbGl6ZVVuaXQgfSBmcm9tICcuLi9zdHlsZXMvY29udmVyc2lvbnMuanMnO1xuaW1wb3J0IHsgU3R5bGVFdmFsdWF0b3IgfSBmcm9tICcuLi9zdHlsZXMvZXZhbHVhdG9ycy5qcyc7XG5pbXBvcnQgeyBudW1iZXJOb2RlLCBwYXJzZUV4cHJlc3Npb25zIH0gZnJvbSAnLi4vc3R5bGVzL3BhcnNlcnMuanMnO1xuaW1wb3J0IHsgREVDQVlfTUlMTElTRUNPTkRTIH0gZnJvbSAnLi4vdGhyZWUtY29tcG9uZW50cy9EYW1wZXIuanMnO1xuaW1wb3J0IHsgQ2hhbmdlU291cmNlLCBTbW9vdGhDb250cm9scyB9IGZyb20gJy4uL3RocmVlLWNvbXBvbmVudHMvU21vb3RoQ29udHJvbHMuanMnO1xuaW1wb3J0IHsgdGltZWxpbmUgfSBmcm9tICcuLi91dGlsaXRpZXMvYW5pbWF0aW9uLmpzJztcbi8vIE5PVEUoY2RhdGEpOiBUaGUgZm9sbG93aW5nIFwiYW5pbWF0aW9uXCIgdGltaW5nIGZ1bmN0aW9ucyBhcmUgZGVsaWJlcmF0ZWx5XG4vLyBiZWluZyB1c2VkIGluIGZhdm9yIG9mIENTUyBhbmltYXRpb25zLiBJbiBTYWZhcmkgMTIuMSBhbmQgMTMsIENTUyBhbmltYXRpb25zXG4vLyB3b3VsZCBjYXVzZSB0aGUgaW50ZXJhY3Rpb24gcHJvbXB0IHRvIGdsaXRjaCB1bmV4cGVjdGVkbHlcbi8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9tb2RlbC12aWV3ZXIvaXNzdWVzLzgzOVxuY29uc3QgUFJPTVBUX0FOSU1BVElPTl9USU1FID0gNTAwMDtcbi8vIEZvciB0aW1pbmcgcHVycG9zZXMsIGEgXCJmcmFtZVwiIGlzIGEgdGltaW5nIGFnbm9zdGljIHJlbGF0aXZlIHVuaXQgb2YgdGltZVxuLy8gYW5kIGEgXCJ2YWx1ZVwiIGlzIGEgdGFyZ2V0IHZhbHVlIGZvciB0aGUgRnJhbWUuXG5jb25zdCB3aWdnbGUgPSB0aW1lbGluZSh7XG4gICAgaW5pdGlhbFZhbHVlOiAwLFxuICAgIGtleWZyYW1lczogW1xuICAgICAgICB7IGZyYW1lczogNSwgdmFsdWU6IC0xIH0sXG4gICAgICAgIHsgZnJhbWVzOiAxLCB2YWx1ZTogLTEgfSxcbiAgICAgICAgeyBmcmFtZXM6IDgsIHZhbHVlOiAxIH0sXG4gICAgICAgIHsgZnJhbWVzOiAxLCB2YWx1ZTogMSB9LFxuICAgICAgICB7IGZyYW1lczogNSwgdmFsdWU6IDAgfSxcbiAgICAgICAgeyBmcmFtZXM6IDE4LCB2YWx1ZTogMCB9XG4gICAgXVxufSk7XG5jb25zdCBmYWRlID0gdGltZWxpbmUoe1xuICAgIGluaXRpYWxWYWx1ZTogMCxcbiAgICBrZXlmcmFtZXM6IFtcbiAgICAgICAgeyBmcmFtZXM6IDEsIHZhbHVlOiAxIH0sXG4gICAgICAgIHsgZnJhbWVzOiA1LCB2YWx1ZTogMSB9LFxuICAgICAgICB7IGZyYW1lczogMSwgdmFsdWU6IDAgfSxcbiAgICAgICAgeyBmcmFtZXM6IDYsIHZhbHVlOiAwIH1cbiAgICBdXG59KTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZPVl9ERUcgPSAzMDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX01JTl9GT1ZfREVHID0gMTI7XG5leHBvcnQgY29uc3QgREVGQVVMVF9DQU1FUkFfT1JCSVQgPSAnMGRlZyA3NWRlZyAxMDUlJztcbmNvbnN0IERFRkFVTFRfQ0FNRVJBX1RBUkdFVCA9ICdhdXRvIGF1dG8gYXV0byc7XG5jb25zdCBERUZBVUxUX0ZJRUxEX09GX1ZJRVcgPSAnYXV0byc7XG5jb25zdCBNSU5JTVVNX1JBRElVU19SQVRJTyA9IDIuMjtcbmNvbnN0IEFaSU1VVEhBTF9RVUFEUkFOVF9MQUJFTFMgPSBbJ2Zyb250JywgJ3JpZ2h0JywgJ2JhY2snLCAnbGVmdCddO1xuY29uc3QgUE9MQVJfVFJJRU5UX0xBQkVMUyA9IFsndXBwZXItJywgJycsICdsb3dlci0nXTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOVEVSQUNUSU9OX1BST01QVF9USFJFU0hPTEQgPSAzMDAwO1xuZXhwb3J0IGNvbnN0IElOVEVSQUNUSU9OX1BST01QVCA9ICcuIFVzZSBtb3VzZSwgdG91Y2ggb3IgYXJyb3cga2V5cyB0byBtb3ZlLic7XG5leHBvcnQgY29uc3QgSW50ZXJhY3Rpb25Qcm9tcHRTdHJhdGVneSA9IHtcbiAgICBBVVRPOiAnYXV0bycsXG4gICAgTk9ORTogJ25vbmUnXG59O1xuZXhwb3J0IGNvbnN0IEludGVyYWN0aW9uUHJvbXB0U3R5bGUgPSB7XG4gICAgQkFTSUM6ICdiYXNpYycsXG4gICAgV0lHR0xFOiAnd2lnZ2xlJ1xufTtcbmV4cG9ydCBjb25zdCBUb3VjaEFjdGlvbiA9IHtcbiAgICBQQU5fWTogJ3Bhbi15JyxcbiAgICBQQU5fWDogJ3Bhbi14JyxcbiAgICBOT05FOiAnbm9uZSdcbn07XG5leHBvcnQgY29uc3QgZmllbGRPZlZpZXdJbnRyaW5zaWNzID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2lzOiBbZGVncmVlc1RvUmFkaWFucyhudW1iZXJOb2RlKERFRkFVTFRfRk9WX0RFRywgJ2RlZycpKV0sXG4gICAgICAgIGtleXdvcmRzOiB7IGF1dG86IFtudWxsXSB9XG4gICAgfTtcbn07XG5jb25zdCBtaW5GaWVsZE9mVmlld0ludHJpbnNpY3MgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzaXM6IFtkZWdyZWVzVG9SYWRpYW5zKG51bWJlck5vZGUoREVGQVVMVF9NSU5fRk9WX0RFRywgJ2RlZycpKV0sXG4gICAgICAgIGtleXdvcmRzOiB7IGF1dG86IFtudWxsXSB9XG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgY2FtZXJhT3JiaXRJbnRyaW5zaWNzID0gKCgpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0VGVybXMgPSBwYXJzZUV4cHJlc3Npb25zKERFRkFVTFRfQ0FNRVJBX09SQklUKVswXVxuICAgICAgICAudGVybXM7XG4gICAgY29uc3QgdGhldGEgPSBub3JtYWxpemVVbml0KGRlZmF1bHRUZXJtc1swXSk7XG4gICAgY29uc3QgcGhpID0gbm9ybWFsaXplVW5pdChkZWZhdWx0VGVybXNbMV0pO1xuICAgIHJldHVybiAoZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCByYWRpdXMgPSBlbGVtZW50WyRzY2VuZV0uaWRlYWxDYW1lcmFEaXN0YW5jZSgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmFzaXM6IFt0aGV0YSwgcGhpLCBudW1iZXJOb2RlKHJhZGl1cywgJ20nKV0sXG4gICAgICAgICAgICBrZXl3b3JkczogeyBhdXRvOiBbbnVsbCwgbnVsbCwgbnVtYmVyTm9kZSgxMDUsICclJyldIH1cbiAgICAgICAgfTtcbiAgICB9O1xufSkoKTtcbmNvbnN0IG1pbkNhbWVyYU9yYml0SW50cmluc2ljcyA9IChlbGVtZW50KSA9PiB7XG4gICAgY29uc3QgcmFkaXVzID0gTUlOSU1VTV9SQURJVVNfUkFUSU8gKiBlbGVtZW50WyRzY2VuZV0uYm91bmRpbmdTcGhlcmUucmFkaXVzO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2lzOiBbXG4gICAgICAgICAgICBudW1iZXJOb2RlKC1JbmZpbml0eSwgJ3JhZCcpLFxuICAgICAgICAgICAgbnVtYmVyTm9kZShNYXRoLlBJIC8gOCwgJ3JhZCcpLFxuICAgICAgICAgICAgbnVtYmVyTm9kZShyYWRpdXMsICdtJylcbiAgICAgICAgXSxcbiAgICAgICAga2V5d29yZHM6IHsgYXV0bzogW251bGwsIG51bGwsIG51bGxdIH1cbiAgICB9O1xufTtcbmNvbnN0IG1heENhbWVyYU9yYml0SW50cmluc2ljcyA9IChlbGVtZW50KSA9PiB7XG4gICAgY29uc3Qgb3JiaXRJbnRyaW5zaWNzID0gY2FtZXJhT3JiaXRJbnRyaW5zaWNzKGVsZW1lbnQpO1xuICAgIGNvbnN0IGV2YWx1YXRvciA9IG5ldyBTdHlsZUV2YWx1YXRvcihbXSwgb3JiaXRJbnRyaW5zaWNzKTtcbiAgICBjb25zdCBkZWZhdWx0UmFkaXVzID0gZXZhbHVhdG9yLmV2YWx1YXRlKClbMl07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzaXM6IFtcbiAgICAgICAgICAgIG51bWJlck5vZGUoSW5maW5pdHksICdyYWQnKSxcbiAgICAgICAgICAgIG51bWJlck5vZGUoTWF0aC5QSSAtIE1hdGguUEkgLyA4LCAncmFkJyksXG4gICAgICAgICAgICBudW1iZXJOb2RlKGRlZmF1bHRSYWRpdXMsICdtJylcbiAgICAgICAgXSxcbiAgICAgICAga2V5d29yZHM6IHsgYXV0bzogW251bGwsIG51bGwsIG51bGxdIH1cbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBjYW1lcmFUYXJnZXRJbnRyaW5zaWNzID0gKGVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBjZW50ZXIgPSBlbGVtZW50WyRzY2VuZV0uYm91bmRpbmdCb3guZ2V0Q2VudGVyKG5ldyBWZWN0b3IzKCkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2lzOiBbXG4gICAgICAgICAgICBudW1iZXJOb2RlKGNlbnRlci54LCAnbScpLFxuICAgICAgICAgICAgbnVtYmVyTm9kZShjZW50ZXIueSwgJ20nKSxcbiAgICAgICAgICAgIG51bWJlck5vZGUoY2VudGVyLnosICdtJylcbiAgICAgICAgXSxcbiAgICAgICAga2V5d29yZHM6IHsgYXV0bzogW251bGwsIG51bGwsIG51bGxdIH1cbiAgICB9O1xufTtcbmNvbnN0IEhBTEZfUEkgPSBNYXRoLlBJIC8gMi4wO1xuY29uc3QgVEhJUkRfUEkgPSBNYXRoLlBJIC8gMy4wO1xuY29uc3QgUVVBUlRFUl9QSSA9IEhBTEZfUEkgLyAyLjA7XG5jb25zdCBUQVUgPSAyLjAgKiBNYXRoLlBJO1xuZXhwb3J0IGNvbnN0ICRjb250cm9scyA9IFN5bWJvbCgnY29udHJvbHMnKTtcbmV4cG9ydCBjb25zdCAkcGFuRWxlbWVudCA9IFN5bWJvbCgncGFuRWxlbWVudCcpO1xuZXhwb3J0IGNvbnN0ICRwcm9tcHRFbGVtZW50ID0gU3ltYm9sKCdwcm9tcHRFbGVtZW50Jyk7XG5leHBvcnQgY29uc3QgJHByb21wdEFuaW1hdGVkQ29udGFpbmVyID0gU3ltYm9sKCdwcm9tcHRBbmltYXRlZENvbnRhaW5lcicpO1xuZXhwb3J0IGNvbnN0ICRmaW5nZXJBbmltYXRlZENvbnRhaW5lcnMgPSBTeW1ib2woJ2ZpbmdlckFuaW1hdGVkQ29udGFpbmVycycpO1xuY29uc3QgJGRlZmVySW50ZXJhY3Rpb25Qcm9tcHQgPSBTeW1ib2woJ2RlZmVySW50ZXJhY3Rpb25Qcm9tcHQnKTtcbmNvbnN0ICR1cGRhdGVBcmlhID0gU3ltYm9sKCd1cGRhdGVBcmlhJyk7XG5jb25zdCAkdXBkYXRlQ2FtZXJhRm9yUmFkaXVzID0gU3ltYm9sKCd1cGRhdGVDYW1lcmFGb3JSYWRpdXMnKTtcbmNvbnN0ICRvbkNoYW5nZSA9IFN5bWJvbCgnb25DaGFuZ2UnKTtcbmNvbnN0ICRvblBvaW50ZXJDaGFuZ2UgPSBTeW1ib2woJ29uUG9pbnRlckNoYW5nZScpO1xuY29uc3QgJHdhaXRpbmdUb1Byb21wdFVzZXIgPSBTeW1ib2woJ3dhaXRpbmdUb1Byb21wdFVzZXInKTtcbmNvbnN0ICR1c2VySGFzSW50ZXJhY3RlZCA9IFN5bWJvbCgndXNlckhhc0ludGVyYWN0ZWQnKTtcbmNvbnN0ICRwcm9tcHRFbGVtZW50VmlzaWJsZVRpbWUgPSBTeW1ib2woJ3Byb21wdEVsZW1lbnRWaXNpYmxlVGltZScpO1xuY29uc3QgJGxhc3RQcm9tcHRPZmZzZXQgPSBTeW1ib2woJ2xhc3RQcm9tcHRPZmZzZXQnKTtcbmNvbnN0ICRsYXN0U3BoZXJpY2FsID0gU3ltYm9sKCdsYXN0U3BoZXJpY2FsJyk7XG5jb25zdCAkanVtcENhbWVyYSA9IFN5bWJvbCgnanVtcENhbWVyYScpO1xuY29uc3QgJGluaXRpYWxpemVkID0gU3ltYm9sKCdpbml0aWFsaXplZCcpO1xuY29uc3QgJG1haW50YWluVGhldGFQaGkgPSBTeW1ib2woJ21haW50YWluVGhldGFQaGknKTtcbmNvbnN0ICRzeW5jQ2FtZXJhT3JiaXQgPSBTeW1ib2woJ3N5bmNDYW1lcmFPcmJpdCcpO1xuY29uc3QgJHN5bmNGaWVsZE9mVmlldyA9IFN5bWJvbCgnc3luY0ZpZWxkT2ZWaWV3Jyk7XG5jb25zdCAkc3luY0NhbWVyYVRhcmdldCA9IFN5bWJvbCgnc3luY0NhbWVyYVRhcmdldCcpO1xuY29uc3QgJHN5bmNNaW5DYW1lcmFPcmJpdCA9IFN5bWJvbCgnc3luY01pbkNhbWVyYU9yYml0Jyk7XG5jb25zdCAkc3luY01heENhbWVyYU9yYml0ID0gU3ltYm9sKCdzeW5jTWF4Q2FtZXJhT3JiaXQnKTtcbmNvbnN0ICRzeW5jTWluRmllbGRPZlZpZXcgPSBTeW1ib2woJ3N5bmNNaW5GaWVsZE9mVmlldycpO1xuY29uc3QgJHN5bmNNYXhGaWVsZE9mVmlldyA9IFN5bWJvbCgnc3luY01heEZpZWxkT2ZWaWV3Jyk7XG5leHBvcnQgY29uc3QgQ29udHJvbHNNaXhpbiA9IChNb2RlbFZpZXdlckVsZW1lbnQpID0+IHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbSwgX28sIF9wLCBfcTtcbiAgICBjbGFzcyBDb250cm9sc01vZGVsVmlld2VyRWxlbWVudCBleHRlbmRzIE1vZGVsVmlld2VyRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhQ29udHJvbHMgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhT3JiaXQgPSBERUZBVUxUX0NBTUVSQV9PUkJJVDtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhVGFyZ2V0ID0gREVGQVVMVF9DQU1FUkFfVEFSR0VUO1xuICAgICAgICAgICAgdGhpcy5maWVsZE9mVmlldyA9IERFRkFVTFRfRklFTERfT0ZfVklFVztcbiAgICAgICAgICAgIHRoaXMubWluQ2FtZXJhT3JiaXQgPSAnYXV0byc7XG4gICAgICAgICAgICB0aGlzLm1heENhbWVyYU9yYml0ID0gJ2F1dG8nO1xuICAgICAgICAgICAgdGhpcy5taW5GaWVsZE9mVmlldyA9ICdhdXRvJztcbiAgICAgICAgICAgIHRoaXMubWF4RmllbGRPZlZpZXcgPSAnYXV0byc7XG4gICAgICAgICAgICB0aGlzLmludGVyYWN0aW9uUHJvbXB0VGhyZXNob2xkID0gREVGQVVMVF9JTlRFUkFDVElPTl9QUk9NUFRfVEhSRVNIT0xEO1xuICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGlvblByb21wdCA9IEludGVyYWN0aW9uUHJvbXB0U3RyYXRlZ3kuQVVUTztcbiAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25Qcm9tcHRTdHlsZSA9IEludGVyYWN0aW9uUHJvbXB0U3R5bGUuV0lHR0xFO1xuICAgICAgICAgICAgdGhpcy5vcmJpdFNlbnNpdGl2aXR5ID0gMTtcbiAgICAgICAgICAgIHRoaXMudG91Y2hBY3Rpb24gPSBUb3VjaEFjdGlvbi5OT05FO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlWm9vbSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlUGFuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVUYXAgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJwb2xhdGlvbkRlY2F5ID0gREVDQVlfTUlMTElTRUNPTkRTO1xuICAgICAgICAgICAgdGhpc1tfYV0gPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLmludGVyYWN0aW9uLXByb21wdCcpO1xuICAgICAgICAgICAgdGhpc1tfYl0gPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignI3Byb21wdCcpO1xuICAgICAgICAgICAgdGhpc1tfY10gPSBbXG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJyNmaW5nZXIwJyksXG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJyNmaW5nZXIxJylcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB0aGlzW19kXSA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcucGFuLXRhcmdldCcpO1xuICAgICAgICAgICAgdGhpc1tfZV0gPSAwO1xuICAgICAgICAgICAgdGhpc1tfZl0gPSBJbmZpbml0eTtcbiAgICAgICAgICAgIHRoaXNbX2ddID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzW19oXSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpc1tfal0gPSBuZXcgU21vb3RoQ29udHJvbHModGhpc1skc2NlbmVdLmNhbWVyYSwgdGhpc1skdXNlcklucHV0RWxlbWVudF0sIHRoaXNbJHNjZW5lXSk7XG4gICAgICAgICAgICB0aGlzW19rXSA9IG5ldyBTcGhlcmljYWwoKTtcbiAgICAgICAgICAgIHRoaXNbX2xdID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzW19tXSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpc1tfb10gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXNbX3BdID0gKHsgc291cmNlIH0pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzWyR1cGRhdGVBcmlhXSgpO1xuICAgICAgICAgICAgICAgIHRoaXNbJG5lZWRzUmVuZGVyXSgpO1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgPT09IENoYW5nZVNvdXJjZS5VU0VSX0lOVEVSQUNUSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJHVzZXJIYXNJbnRlcmFjdGVkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJGRlZmVySW50ZXJhY3Rpb25Qcm9tcHRdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2NhbWVyYS1jaGFuZ2UnLCB7IGRldGFpbDogeyBzb3VyY2UgfSB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpc1tfcV0gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3BvaW50ZXItY2hhbmdlLXN0YXJ0Jykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzWyRjb250YWluZXJdLmNsYXNzTGlzdC5hZGQoJ3BvaW50ZXItdHVtYmxpbmcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJGNvbnRhaW5lcl0uY2xhc3NMaXN0LnJlbW92ZSgncG9pbnRlci10dW1ibGluZycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGlucHV0U2Vuc2l0aXZpdHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1skY29udHJvbHNdLmlucHV0U2Vuc2l0aXZpdHk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGlucHV0U2Vuc2l0aXZpdHkodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbJGNvbnRyb2xzXS5pbnB1dFNlbnNpdGl2aXR5ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q2FtZXJhT3JiaXQoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHRoZXRhLCBwaGksIHJhZGl1cyB9ID0gdGhpc1skbGFzdFNwaGVyaWNhbF07XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRoZXRhLFxuICAgICAgICAgICAgICAgIHBoaSxcbiAgICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICAgICAgdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLnRoZXRhfXJhZCAke3RoaXMucGhpfXJhZCAke3RoaXMucmFkaXVzfW1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q2FtZXJhVGFyZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRvVmVjdG9yM0QodGhpc1skcmVuZGVyZXJdLmlzUHJlc2VudGluZyA/IHRoaXNbJHJlbmRlcmVyXS5hclJlbmRlcmVyLnRhcmdldCA6XG4gICAgICAgICAgICAgICAgdGhpc1skc2NlbmVdLmdldFRhcmdldCgpKTtcbiAgICAgICAgfVxuICAgICAgICBnZXRGaWVsZE9mVmlldygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzWyRjb250cm9sc10uZ2V0RmllbGRPZlZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcm92aWRlZCBzbyB1c2VyIGNvZGUgZG9lcyBub3QgaGF2ZSB0byBwYXJzZSB0aGVzZSBmcm9tIGF0dHJpYnV0ZXMuXG4gICAgICAgIGdldE1pbmltdW1GaWVsZE9mVmlldygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzWyRjb250cm9sc10ub3B0aW9ucy5taW5pbXVtRmllbGRPZlZpZXc7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0TWF4aW11bUZpZWxkT2ZWaWV3KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbJGNvbnRyb2xzXS5vcHRpb25zLm1heGltdW1GaWVsZE9mVmlldztcbiAgICAgICAgfVxuICAgICAgICBnZXRJZGVhbEFzcGVjdCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzWyRzY2VuZV0uaWRlYWxBc3BlY3Q7XG4gICAgICAgIH1cbiAgICAgICAganVtcENhbWVyYVRvR29hbCgpIHtcbiAgICAgICAgICAgIHRoaXNbJGp1bXBDYW1lcmFdID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgkanVtcENhbWVyYSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJlc2V0SW50ZXJhY3Rpb25Qcm9tcHQoKSB7XG4gICAgICAgICAgICB0aGlzWyRsYXN0UHJvbXB0T2Zmc2V0XSA9IDA7XG4gICAgICAgICAgICB0aGlzWyRwcm9tcHRFbGVtZW50VmlzaWJsZVRpbWVdID0gSW5maW5pdHk7XG4gICAgICAgICAgICB0aGlzWyR1c2VySGFzSW50ZXJhY3RlZF0gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXNbJHdhaXRpbmdUb1Byb21wdFVzZXJdID1cbiAgICAgICAgICAgICAgICB0aGlzLmludGVyYWN0aW9uUHJvbXB0ID09PSBJbnRlcmFjdGlvblByb21wdFN0cmF0ZWd5LkFVVE8gJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW1lcmFDb250cm9scztcbiAgICAgICAgfVxuICAgICAgICB6b29tKGtleVByZXNzZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IFdoZWVsRXZlbnQoJ3doZWVsJywgeyBkZWx0YVk6IC0zMCAqIGtleVByZXNzZXMgfSk7XG4gICAgICAgICAgICB0aGlzWyR1c2VySW5wdXRFbGVtZW50XS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICB0aGlzWyRjb250cm9sc10uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpc1skb25DaGFuZ2VdKTtcbiAgICAgICAgICAgIHRoaXNbJGNvbnRyb2xzXS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyLWNoYW5nZS1zdGFydCcsIHRoaXNbJG9uUG9pbnRlckNoYW5nZV0pO1xuICAgICAgICAgICAgdGhpc1skY29udHJvbHNdLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXItY2hhbmdlLWVuZCcsIHRoaXNbJG9uUG9pbnRlckNoYW5nZV0pO1xuICAgICAgICB9XG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIHRoaXNbJGNvbnRyb2xzXS5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzWyRvbkNoYW5nZV0pO1xuICAgICAgICAgICAgdGhpc1skY29udHJvbHNdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXItY2hhbmdlLXN0YXJ0JywgdGhpc1skb25Qb2ludGVyQ2hhbmdlXSk7XG4gICAgICAgICAgICB0aGlzWyRjb250cm9sc10ucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlci1jaGFuZ2UtZW5kJywgdGhpc1skb25Qb2ludGVyQ2hhbmdlXSk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcykge1xuICAgICAgICAgICAgc3VwZXIudXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICAgICAgICBjb25zdCBjb250cm9scyA9IHRoaXNbJGNvbnRyb2xzXTtcbiAgICAgICAgICAgIGNvbnN0IHNjZW5lID0gdGhpc1skc2NlbmVdO1xuICAgICAgICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnY2FtZXJhQ29udHJvbHMnKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbWVyYUNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzLmVuYWJsZUludGVyYWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmludGVyYWN0aW9uUHJvbXB0ID09PSBJbnRlcmFjdGlvblByb21wdFN0cmF0ZWd5LkFVVE8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbJHdhaXRpbmdUb1Byb21wdFVzZXJdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHMuZGlzYWJsZUludGVyYWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJGRlZmVySW50ZXJhY3Rpb25Qcm9tcHRdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNbJHVzZXJJbnB1dEVsZW1lbnRdLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHRoaXNbJGFyaWFMYWJlbF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnZGlzYWJsZVpvb20nKSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzLmRpc2FibGVab29tID0gdGhpcy5kaXNhYmxlWm9vbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ2Rpc2FibGVQYW4nKSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzLmVuYWJsZVBhbiA9ICF0aGlzLmRpc2FibGVQYW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdkaXNhYmxlVGFwJykpIHtcbiAgICAgICAgICAgICAgICBjb250cm9scy5lbmFibGVUYXAgPSAhdGhpcy5kaXNhYmxlVGFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnaW50ZXJhY3Rpb25Qcm9tcHQnKSB8fFxuICAgICAgICAgICAgICAgIGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnY2FtZXJhQ29udHJvbHMnKSB8fFxuICAgICAgICAgICAgICAgIGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnc3JjJykpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnRlcmFjdGlvblByb21wdCA9PT0gSW50ZXJhY3Rpb25Qcm9tcHRTdHJhdGVneS5BVVRPICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhQ29udHJvbHMgJiYgIXRoaXNbJHVzZXJIYXNJbnRlcmFjdGVkXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzWyR3YWl0aW5nVG9Qcm9tcHRVc2VyXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzWyRkZWZlckludGVyYWN0aW9uUHJvbXB0XSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ2ludGVyYWN0aW9uUHJvbXB0U3R5bGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXNbJHByb21wdEFuaW1hdGVkQ29udGFpbmVyXS5zdHlsZS5vcGFjaXR5ID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGlvblByb21wdFN0eWxlID09IEludGVyYWN0aW9uUHJvbXB0U3R5bGUuQkFTSUMgPyAnMScgOlxuICAgICAgICAgICAgICAgICAgICAgICAgJzAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygndG91Y2hBY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvdWNoQWN0aW9uID0gdGhpcy50b3VjaEFjdGlvbjtcbiAgICAgICAgICAgICAgICBjb250cm9scy5hcHBseU9wdGlvbnMoeyB0b3VjaEFjdGlvbiB9KTtcbiAgICAgICAgICAgICAgICBjb250cm9scy51cGRhdGVUb3VjaEFjdGlvblN0eWxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdvcmJpdFNlbnNpdGl2aXR5JykpIHtcbiAgICAgICAgICAgICAgICBjb250cm9scy5vcmJpdFNlbnNpdGl2aXR5ID0gdGhpcy5vcmJpdFNlbnNpdGl2aXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnaW50ZXJwb2xhdGlvbkRlY2F5JykpIHtcbiAgICAgICAgICAgICAgICBjb250cm9scy5zZXREYW1wZXJEZWNheVRpbWUodGhpcy5pbnRlcnBvbGF0aW9uRGVjYXkpO1xuICAgICAgICAgICAgICAgIHNjZW5lLnNldFRhcmdldERhbXBlckRlY2F5VGltZSh0aGlzLmludGVycG9sYXRpb25EZWNheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpc1skanVtcENhbWVyYV0gPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHMuanVtcFRvR29hbCgpO1xuICAgICAgICAgICAgICAgICAgICBzY2VuZS5qdW1wVG9Hb2FsKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJGp1bXBDYW1lcmFdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXN5bmMgdXBkYXRlRnJhbWluZygpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjZW5lID0gdGhpc1skc2NlbmVdO1xuICAgICAgICAgICAgY29uc3Qgb2xkRnJhbWVkRm9WID0gc2NlbmUuYWRqdXN0ZWRGb1Yoc2NlbmUuZnJhbWVkRm9WRGVnKTtcbiAgICAgICAgICAgIGF3YWl0IHNjZW5lLnVwZGF0ZUZyYW1pbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0ZyYW1lZEZvViA9IHNjZW5lLmFkanVzdGVkRm9WKHNjZW5lLmZyYW1lZEZvVkRlZyk7XG4gICAgICAgICAgICBjb25zdCB6b29tID0gdGhpc1skY29udHJvbHNdLmdldEZpZWxkT2ZWaWV3KCkgLyBvbGRGcmFtZWRGb1Y7XG4gICAgICAgICAgICB0aGlzWyRjb250cm9sc10uc2V0RmllbGRPZlZpZXcobmV3RnJhbWVkRm9WICogem9vbSk7XG4gICAgICAgICAgICB0aGlzWyRtYWludGFpblRoZXRhUGhpXSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoJ21heEZpZWxkT2ZWaWV3Jyk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoJ2ZpZWxkT2ZWaWV3Jyk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoJ21pbkNhbWVyYU9yYml0Jyk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoJ21heENhbWVyYU9yYml0Jyk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoJ2NhbWVyYU9yYml0Jyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUNvbXBsZXRlO1xuICAgICAgICB9XG4gICAgICAgIGludGVyYWN0KGR1cmF0aW9uLCBmaW5nZXIwLCBmaW5nZXIxKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSB0aGlzWyR1c2VySW5wdXRFbGVtZW50XTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmdlckVsZW1lbnRzID0gdGhpc1skZmluZ2VyQW5pbWF0ZWRDb250YWluZXJzXTtcbiAgICAgICAgICAgIGlmIChmaW5nZXJFbGVtZW50c1swXS5zdHlsZS5vcGFjaXR5ID09PSAnMScpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2ludGVyYWN0KCkgZmFpbGVkIGJlY2F1c2UgYW4gZXhpc3RpbmcgaW50ZXJhY3Rpb24gaXMgcnVubmluZy4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB4eSA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgeHkucHVzaCh7IHg6IHRpbWVsaW5lKGZpbmdlcjAueCksIHk6IHRpbWVsaW5lKGZpbmdlcjAueSkgfSk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBbeyB4OiB4eVswXS54KDApLCB5OiB4eVswXS55KDApIH1dO1xuICAgICAgICAgICAgaWYgKGZpbmdlcjEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHh5LnB1c2goeyB4OiB0aW1lbGluZShmaW5nZXIxLngpLCB5OiB0aW1lbGluZShmaW5nZXIxLnkpIH0pO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKHsgeDogeHlbMV0ueCgwKSwgeTogeHlbMV0ueSgwKSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpc1skc2NlbmVdO1xuICAgICAgICAgICAgY29uc3QgZGlzcGF0Y2hUb3VjaGVzID0gKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtpLCBwb3NpdGlvbl0gb2YgcG9zaXRpb25zLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHN0eWxlIH0gPSBmaW5nZXJFbGVtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt3aWR0aCAqIHBvc2l0aW9uLnh9cHgpIHRyYW5zbGF0ZVkoJHtoZWlnaHQgKiBwb3NpdGlvbi55fXB4KWA7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAncG9pbnRlcmRvd24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdwb2ludGVydXAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluaXQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVySWQ6IGkgLSA1Njc4LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlclR5cGU6ICd0b3VjaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGlucHV0RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFg6IHdpZHRoICogcG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFk6IGhlaWdodCAqIHBvc2l0aW9uLnksXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRLZXk6IHRydWUgLy8gZmxhZyB0aGF0IHRoaXMgaXMgbm90IGEgdXNlciBpbnRlcmFjdGlvblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgUG9pbnRlckV2ZW50KHR5cGUsIGluaXQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgbW92ZVRvdWNoZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQ2FuY2VsIGludGVyYWN0aW9uIGlmIHNvbWV0aGluZyBlbHNlIG1vdmVzIHRoZSBjYW1lcmEgb3IgaW5wdXQgaXNcbiAgICAgICAgICAgICAgICAvLyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgICAgICAgICAgICBjb25zdCB7IGNoYW5nZVNvdXJjZSB9ID0gdGhpc1skY29udHJvbHNdO1xuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VTb3VyY2UgIT09IENoYW5nZVNvdXJjZS5BVVRPTUFUSUMgfHxcbiAgICAgICAgICAgICAgICAgICAgIWlucHV0RWxlbWVudC5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpbmdlckVsZW1lbnQgb2YgdGhpc1skZmluZ2VyQW5pbWF0ZWRDb250YWluZXJzXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluZ2VyRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoVG91Y2hlcygncG9pbnRlcmNhbmNlbCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdpbnRlcmFjdC1zdG9wcGVkJywgeyBkZXRhaWw6IHsgc291cmNlOiBjaGFuZ2VTb3VyY2UgfSB9KSk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBNYXRoLm1pbigxLCAocGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2ksIHBvc2l0aW9uXSBvZiBwb3NpdGlvbnMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnggPSB4eVtpXS54KHRpbWUpO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi55ID0geHlbaV0ueSh0aW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hUb3VjaGVzKCdwb2ludGVybW92ZScpO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZVRvdWNoZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hUb3VjaGVzKCdwb2ludGVydXAnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnaW50ZXJhY3Qtc3RvcHBlZCcsIHsgZGV0YWlsOiB7IHNvdXJjZTogY2hhbmdlU291cmNlIH0gfSkpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgb25WaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBlbGFwc2VkID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgICAgICAgICAgICAgICAgICBlbGFwc2VkID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIGVsYXBzZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgICAgICAgZGlzcGF0Y2hUb3VjaGVzKCdwb2ludGVyZG93bicpO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1vdmVUb3VjaGVzKTtcbiAgICAgICAgfVxuICAgICAgICBbKF9hID0gJHByb21wdEVsZW1lbnQsIF9iID0gJHByb21wdEFuaW1hdGVkQ29udGFpbmVyLCBfYyA9ICRmaW5nZXJBbmltYXRlZENvbnRhaW5lcnMsIF9kID0gJHBhbkVsZW1lbnQsIF9lID0gJGxhc3RQcm9tcHRPZmZzZXQsIF9mID0gJHByb21wdEVsZW1lbnRWaXNpYmxlVGltZSwgX2cgPSAkdXNlckhhc0ludGVyYWN0ZWQsIF9oID0gJHdhaXRpbmdUb1Byb21wdFVzZXIsIF9qID0gJGNvbnRyb2xzLCBfayA9ICRsYXN0U3BoZXJpY2FsLCBfbCA9ICRqdW1wQ2FtZXJhLCBfbSA9ICRpbml0aWFsaXplZCwgX28gPSAkbWFpbnRhaW5UaGV0YVBoaSwgJHN5bmNGaWVsZE9mVmlldyldKHN0eWxlKSB7XG4gICAgICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXNbJHNjZW5lXTtcbiAgICAgICAgICAgIHNjZW5lLmZyYW1lZEZvVkRlZyA9IHN0eWxlWzBdICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgICAgIHRoaXNbJGNvbnRyb2xzXS5zZXRGaWVsZE9mVmlldyhzY2VuZS5hZGp1c3RlZEZvVihzY2VuZS5mcmFtZWRGb1ZEZWcpKTtcbiAgICAgICAgfVxuICAgICAgICBbJHN5bmNDYW1lcmFPcmJpdF0oc3R5bGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xzID0gdGhpc1skY29udHJvbHNdO1xuICAgICAgICAgICAgaWYgKHRoaXNbJG1haW50YWluVGhldGFQaGldKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB0aGV0YSwgcGhpIH0gPSB0aGlzLmdldENhbWVyYU9yYml0KCk7XG4gICAgICAgICAgICAgICAgc3R5bGVbMF0gPSB0aGV0YTtcbiAgICAgICAgICAgICAgICBzdHlsZVsxXSA9IHBoaTtcbiAgICAgICAgICAgICAgICB0aGlzWyRtYWludGFpblRoZXRhUGhpXSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbHMuY2hhbmdlU291cmNlID0gQ2hhbmdlU291cmNlLk5PTkU7XG4gICAgICAgICAgICBjb250cm9scy5zZXRPcmJpdChzdHlsZVswXSwgc3R5bGVbMV0sIHN0eWxlWzJdKTtcbiAgICAgICAgfVxuICAgICAgICBbJHN5bmNNaW5DYW1lcmFPcmJpdF0oc3R5bGUpIHtcbiAgICAgICAgICAgIHRoaXNbJGNvbnRyb2xzXS5hcHBseU9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIG1pbmltdW1BemltdXRoYWxBbmdsZTogc3R5bGVbMF0sXG4gICAgICAgICAgICAgICAgbWluaW11bVBvbGFyQW5nbGU6IHN0eWxlWzFdLFxuICAgICAgICAgICAgICAgIG1pbmltdW1SYWRpdXM6IHN0eWxlWzJdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuanVtcENhbWVyYVRvR29hbCgpO1xuICAgICAgICB9XG4gICAgICAgIFskc3luY01heENhbWVyYU9yYml0XShzdHlsZSkge1xuICAgICAgICAgICAgdGhpc1skY29udHJvbHNdLmFwcGx5T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgbWF4aW11bUF6aW11dGhhbEFuZ2xlOiBzdHlsZVswXSxcbiAgICAgICAgICAgICAgICBtYXhpbXVtUG9sYXJBbmdsZTogc3R5bGVbMV0sXG4gICAgICAgICAgICAgICAgbWF4aW11bVJhZGl1czogc3R5bGVbMl1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpc1skdXBkYXRlQ2FtZXJhRm9yUmFkaXVzXShzdHlsZVsyXSk7XG4gICAgICAgICAgICB0aGlzLmp1bXBDYW1lcmFUb0dvYWwoKTtcbiAgICAgICAgfVxuICAgICAgICBbJHN5bmNNaW5GaWVsZE9mVmlld10oc3R5bGUpIHtcbiAgICAgICAgICAgIHRoaXNbJGNvbnRyb2xzXS5hcHBseU9wdGlvbnMoeyBtaW5pbXVtRmllbGRPZlZpZXc6IHN0eWxlWzBdICogMTgwIC8gTWF0aC5QSSB9KTtcbiAgICAgICAgICAgIHRoaXMuanVtcENhbWVyYVRvR29hbCgpO1xuICAgICAgICB9XG4gICAgICAgIFskc3luY01heEZpZWxkT2ZWaWV3XShzdHlsZSkge1xuICAgICAgICAgICAgY29uc3QgZm92ID0gdGhpc1skc2NlbmVdLmFkanVzdGVkRm9WKHN0eWxlWzBdICogMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgICAgICB0aGlzWyRjb250cm9sc10uYXBwbHlPcHRpb25zKHsgbWF4aW11bUZpZWxkT2ZWaWV3OiBmb3YgfSk7XG4gICAgICAgICAgICB0aGlzLmp1bXBDYW1lcmFUb0dvYWwoKTtcbiAgICAgICAgfVxuICAgICAgICBbJHN5bmNDYW1lcmFUYXJnZXRdKHN0eWxlKSB7XG4gICAgICAgICAgICBjb25zdCBbeCwgeSwgel0gPSBzdHlsZTtcbiAgICAgICAgICAgIGlmICghdGhpc1skcmVuZGVyZXJdLmFyUmVuZGVyZXIuaXNQcmVzZW50aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpc1skc2NlbmVdLnNldFRhcmdldCh4LCB5LCB6KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNbJGNvbnRyb2xzXS5jaGFuZ2VTb3VyY2UgPSBDaGFuZ2VTb3VyY2UuTk9ORTtcbiAgICAgICAgICAgIHRoaXNbJHJlbmRlcmVyXS5hclJlbmRlcmVyLnVwZGF0ZVRhcmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIFskdGlja10odGltZSwgZGVsdGEpIHtcbiAgICAgICAgICAgIHN1cGVyWyR0aWNrXSh0aW1lLCBkZWx0YSk7XG4gICAgICAgICAgICBpZiAodGhpc1skcmVuZGVyZXJdLmlzUHJlc2VudGluZyB8fCAhdGhpc1skZ2V0TW9kZWxJc1Zpc2libGVdKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb250cm9scyA9IHRoaXNbJGNvbnRyb2xzXTtcbiAgICAgICAgICAgIGNvbnN0IHNjZW5lID0gdGhpc1skc2NlbmVdO1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICBpZiAodGhpc1skd2FpdGluZ1RvUHJvbXB0VXNlcl0pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sb2FkZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgbm93ID4gdGhpc1skbG9hZGVkVGltZV0gKyB0aGlzLmludGVyYWN0aW9uUHJvbXB0VGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJHdhaXRpbmdUb1Byb21wdFVzZXJdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJHByb21wdEVsZW1lbnRWaXNpYmxlVGltZV0gPSBub3c7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJHByb21wdEVsZW1lbnRdLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUodGhpc1skcHJvbXB0RWxlbWVudFZpc2libGVUaW1lXSkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmludGVyYWN0aW9uUHJvbXB0U3R5bGUgPT09IEludGVyYWN0aW9uUHJvbXB0U3R5bGUuV0lHR0xFKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5pbWF0aW9uVGltZSA9ICgobm93IC0gdGhpc1skcHJvbXB0RWxlbWVudFZpc2libGVUaW1lXSkgLyBQUk9NUFRfQU5JTUFUSU9OX1RJTUUpICVcbiAgICAgICAgICAgICAgICAgICAgMTtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB3aWdnbGUoYW5pbWF0aW9uVGltZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3BhY2l0eSA9IGZhZGUoYW5pbWF0aW9uVGltZSk7XG4gICAgICAgICAgICAgICAgdGhpc1skcHJvbXB0QW5pbWF0ZWRDb250YWluZXJdLnN0eWxlLm9wYWNpdHkgPSBgJHtvcGFjaXR5fWA7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gdGhpc1skbGFzdFByb21wdE9mZnNldF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeE9mZnNldCA9IG9mZnNldCAqIHNjZW5lLndpZHRoICogMC4wNTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGFUaGV0YSA9IChvZmZzZXQgLSB0aGlzWyRsYXN0UHJvbXB0T2Zmc2V0XSkgKiBNYXRoLlBJIC8gMTY7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJHByb21wdEFuaW1hdGVkQ29udGFpbmVyXS5zdHlsZS50cmFuc2Zvcm0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgYHRyYW5zbGF0ZVgoJHt4T2Zmc2V0fXB4KWA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzLmNoYW5nZVNvdXJjZSA9IENoYW5nZVNvdXJjZS5BVVRPTUFUSUM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzLmFkanVzdE9yYml0KGRlbHRhVGhldGEsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzWyRsYXN0UHJvbXB0T2Zmc2V0XSA9IG9mZnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250cm9scy51cGRhdGUodGltZSwgZGVsdGEpO1xuICAgICAgICAgICAgaWYgKHNjZW5lLnVwZGF0ZVRhcmdldChkZWx0YSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzWyRvbkNoYW5nZV0oeyB0eXBlOiAnY2hhbmdlJywgc291cmNlOiBjb250cm9scy5jaGFuZ2VTb3VyY2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgWyRkZWZlckludGVyYWN0aW9uUHJvbXB0XSgpIHtcbiAgICAgICAgICAgIC8vIEVmZmVjdGl2ZWx5IGNhbmNlbCB0aGUgdGltZXIgd2FpdGluZyBmb3IgdXNlciBpbnRlcmFjdGlvbjpcbiAgICAgICAgICAgIHRoaXNbJHdhaXRpbmdUb1Byb21wdFVzZXJdID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzWyRwcm9tcHRFbGVtZW50XS5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XG4gICAgICAgICAgICB0aGlzWyRwcm9tcHRFbGVtZW50VmlzaWJsZVRpbWVdID0gSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIGNhbWVyYSdzIG5lYXIgYW5kIGZhciBwbGFuZXMgdG8gZW5jbG9zZSB0aGUgc2NlbmUgd2hlblxuICAgICAgICAgKiBvcmJpdGluZyBhdCB0aGUgc3VwcGxpZWQgcmFkaXVzLlxuICAgICAgICAgKi9cbiAgICAgICAgWyR1cGRhdGVDYW1lcmFGb3JSYWRpdXNdKHJhZGl1cykge1xuICAgICAgICAgICAgY29uc3QgbWF4aW11bVJhZGl1cyA9IE1hdGgubWF4KHRoaXNbJHNjZW5lXS5ib3VuZGluZ1NwaGVyZS5yYWRpdXMsIHJhZGl1cyk7XG4gICAgICAgICAgICBjb25zdCBuZWFyID0gMDtcbiAgICAgICAgICAgIGNvbnN0IGZhciA9IDIgKiBtYXhpbXVtUmFkaXVzO1xuICAgICAgICAgICAgdGhpc1skY29udHJvbHNdLnVwZGF0ZU5lYXJGYXIobmVhciwgZmFyKTtcbiAgICAgICAgfVxuICAgICAgICBbJHVwZGF0ZUFyaWFdKCkge1xuICAgICAgICAgICAgY29uc3QgeyB0aGV0YSwgcGhpIH0gPSB0aGlzWyRjb250cm9sc10uZ2V0Q2FtZXJhU3BoZXJpY2FsKHRoaXNbJGxhc3RTcGhlcmljYWxdKTtcbiAgICAgICAgICAgIGNvbnN0IGF6aW11dGhhbFF1YWRyYW50ID0gKDQgKyBNYXRoLmZsb29yKCgodGhldGEgJSBUQVUpICsgUVVBUlRFUl9QSSkgLyBIQUxGX1BJKSkgJSA0O1xuICAgICAgICAgICAgY29uc3QgcG9sYXJUcmllbnQgPSBNYXRoLmZsb29yKHBoaSAvIFRISVJEX1BJKTtcbiAgICAgICAgICAgIGNvbnN0IGF6aW11dGhhbFF1YWRyYW50TGFiZWwgPSBBWklNVVRIQUxfUVVBRFJBTlRfTEFCRUxTW2F6aW11dGhhbFF1YWRyYW50XTtcbiAgICAgICAgICAgIGNvbnN0IHBvbGFyVHJpZW50TGFiZWwgPSBQT0xBUl9UUklFTlRfTEFCRUxTW3BvbGFyVHJpZW50XTtcbiAgICAgICAgICAgIHRoaXNbJHVwZGF0ZVN0YXR1c10oYFZpZXcgZnJvbSBzdGFnZSAke3BvbGFyVHJpZW50TGFiZWx9JHthemltdXRoYWxRdWFkcmFudExhYmVsfWApO1xuICAgICAgICB9XG4gICAgICAgIGdldCBbJGFyaWFMYWJlbF0oKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXJbJGFyaWFMYWJlbF0gK1xuICAgICAgICAgICAgICAgICh0aGlzLmNhbWVyYUNvbnRyb2xzID8gSU5URVJBQ1RJT05fUFJPTVBUIDogJycpO1xuICAgICAgICB9XG4gICAgICAgIGFzeW5jIFskb25SZXNpemVdKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBjb250cm9scyA9IHRoaXNbJGNvbnRyb2xzXTtcbiAgICAgICAgICAgIGNvbnN0IHNjZW5lID0gdGhpc1skc2NlbmVdO1xuICAgICAgICAgICAgY29uc3Qgb2xkRnJhbWVkRm9WID0gc2NlbmUuYWRqdXN0ZWRGb1Yoc2NlbmUuZnJhbWVkRm9WRGVnKTtcbiAgICAgICAgICAgIC8vIFRoZSBzdXBlciBvZiAkb25SZXNpemUgbWF5IHVwZGF0ZSB0aGUgc2NlbmUncyBhZGp1c3RlZEZvViwgc28gd2VcbiAgICAgICAgICAgIC8vIGNvbXBhcmUgdGhlIGJlZm9yZSBhbmQgYWZ0ZXIgdG8gY2FsY3VsYXRlIHRoZSBwcm9wZXIgem9vbS5cbiAgICAgICAgICAgIHN1cGVyWyRvblJlc2l6ZV0oZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgZm92UmF0aW8gPSBzY2VuZS5hZGp1c3RlZEZvVihzY2VuZS5mcmFtZWRGb1ZEZWcpIC8gb2xkRnJhbWVkRm9WO1xuICAgICAgICAgICAgY29uc3QgZm92ID0gY29udHJvbHMuZ2V0RmllbGRPZlZpZXcoKSAqIChpc0Zpbml0ZShmb3ZSYXRpbykgPyBmb3ZSYXRpbyA6IDEpO1xuICAgICAgICAgICAgY29udHJvbHMudXBkYXRlQXNwZWN0KHRoaXNbJHNjZW5lXS5hc3BlY3QpO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCdtYXhGaWVsZE9mVmlldycsIHRoaXMubWF4RmllbGRPZlZpZXcpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVDb21wbGV0ZTtcbiAgICAgICAgICAgIHRoaXNbJGNvbnRyb2xzXS5zZXRGaWVsZE9mVmlldyhmb3YpO1xuICAgICAgICAgICAgdGhpcy5qdW1wQ2FtZXJhVG9Hb2FsKCk7XG4gICAgICAgIH1cbiAgICAgICAgWyRvbk1vZGVsTG9hZF0oKSB7XG4gICAgICAgICAgICBzdXBlclskb25Nb2RlbExvYWRdKCk7XG4gICAgICAgICAgICBpZiAodGhpc1skaW5pdGlhbGl6ZWRdKSB7XG4gICAgICAgICAgICAgICAgdGhpc1skbWFpbnRhaW5UaGV0YVBoaV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1skaW5pdGlhbGl6ZWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgnbWF4RmllbGRPZlZpZXcnLCB0aGlzLm1heEZpZWxkT2ZWaWV3KTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgnZmllbGRPZlZpZXcnLCB0aGlzLmZpZWxkT2ZWaWV3KTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgnbWluQ2FtZXJhT3JiaXQnLCB0aGlzLm1pbkNhbWVyYU9yYml0KTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgnbWF4Q2FtZXJhT3JiaXQnLCB0aGlzLm1heENhbWVyYU9yYml0KTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgnY2FtZXJhT3JiaXQnLCB0aGlzLmNhbWVyYU9yYml0KTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgnY2FtZXJhVGFyZ2V0JywgdGhpcy5jYW1lcmFUYXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5qdW1wQ2FtZXJhVG9Hb2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3AgPSAkb25DaGFuZ2UsIF9xID0gJG9uUG9pbnRlckNoYW5nZTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCBhdHRyaWJ1dGU6ICdjYW1lcmEtY29udHJvbHMnIH0pXG4gICAgXSwgQ29udHJvbHNNb2RlbFZpZXdlckVsZW1lbnQucHJvdG90eXBlLCBcImNhbWVyYUNvbnRyb2xzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgIGludHJpbnNpY3M6IGNhbWVyYU9yYml0SW50cmluc2ljcyxcbiAgICAgICAgICAgIG9ic2VydmVFZmZlY3RzOiB0cnVlLFxuICAgICAgICAgICAgdXBkYXRlSGFuZGxlcjogJHN5bmNDYW1lcmFPcmJpdFxuICAgICAgICB9KSxcbiAgICAgICAgcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcsIGF0dHJpYnV0ZTogJ2NhbWVyYS1vcmJpdCcsIGhhc0NoYW5nZWQ6ICgpID0+IHRydWUgfSlcbiAgICBdLCBDb250cm9sc01vZGVsVmlld2VyRWxlbWVudC5wcm90b3R5cGUsIFwiY2FtZXJhT3JiaXRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgaW50cmluc2ljczogY2FtZXJhVGFyZ2V0SW50cmluc2ljcyxcbiAgICAgICAgICAgIG9ic2VydmVFZmZlY3RzOiB0cnVlLFxuICAgICAgICAgICAgdXBkYXRlSGFuZGxlcjogJHN5bmNDYW1lcmFUYXJnZXRcbiAgICAgICAgfSksXG4gICAgICAgIHByb3BlcnR5KHsgdHlwZTogU3RyaW5nLCBhdHRyaWJ1dGU6ICdjYW1lcmEtdGFyZ2V0JywgaGFzQ2hhbmdlZDogKCkgPT4gdHJ1ZSB9KVxuICAgIF0sIENvbnRyb2xzTW9kZWxWaWV3ZXJFbGVtZW50LnByb3RvdHlwZSwgXCJjYW1lcmFUYXJnZXRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgaW50cmluc2ljczogZmllbGRPZlZpZXdJbnRyaW5zaWNzLFxuICAgICAgICAgICAgb2JzZXJ2ZUVmZmVjdHM6IHRydWUsXG4gICAgICAgICAgICB1cGRhdGVIYW5kbGVyOiAkc3luY0ZpZWxkT2ZWaWV3XG4gICAgICAgIH0pLFxuICAgICAgICBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZywgYXR0cmlidXRlOiAnZmllbGQtb2YtdmlldycsIGhhc0NoYW5nZWQ6ICgpID0+IHRydWUgfSlcbiAgICBdLCBDb250cm9sc01vZGVsVmlld2VyRWxlbWVudC5wcm90b3R5cGUsIFwiZmllbGRPZlZpZXdcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgaW50cmluc2ljczogbWluQ2FtZXJhT3JiaXRJbnRyaW5zaWNzLFxuICAgICAgICAgICAgdXBkYXRlSGFuZGxlcjogJHN5bmNNaW5DYW1lcmFPcmJpdFxuICAgICAgICB9KSxcbiAgICAgICAgcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcsIGF0dHJpYnV0ZTogJ21pbi1jYW1lcmEtb3JiaXQnLCBoYXNDaGFuZ2VkOiAoKSA9PiB0cnVlIH0pXG4gICAgXSwgQ29udHJvbHNNb2RlbFZpZXdlckVsZW1lbnQucHJvdG90eXBlLCBcIm1pbkNhbWVyYU9yYml0XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgIGludHJpbnNpY3M6IG1heENhbWVyYU9yYml0SW50cmluc2ljcyxcbiAgICAgICAgICAgIHVwZGF0ZUhhbmRsZXI6ICRzeW5jTWF4Q2FtZXJhT3JiaXRcbiAgICAgICAgfSksXG4gICAgICAgIHByb3BlcnR5KHsgdHlwZTogU3RyaW5nLCBhdHRyaWJ1dGU6ICdtYXgtY2FtZXJhLW9yYml0JywgaGFzQ2hhbmdlZDogKCkgPT4gdHJ1ZSB9KVxuICAgIF0sIENvbnRyb2xzTW9kZWxWaWV3ZXJFbGVtZW50LnByb3RvdHlwZSwgXCJtYXhDYW1lcmFPcmJpdFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICBpbnRyaW5zaWNzOiBtaW5GaWVsZE9mVmlld0ludHJpbnNpY3MsXG4gICAgICAgICAgICB1cGRhdGVIYW5kbGVyOiAkc3luY01pbkZpZWxkT2ZWaWV3XG4gICAgICAgIH0pLFxuICAgICAgICBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZywgYXR0cmlidXRlOiAnbWluLWZpZWxkLW9mLXZpZXcnLCBoYXNDaGFuZ2VkOiAoKSA9PiB0cnVlIH0pXG4gICAgXSwgQ29udHJvbHNNb2RlbFZpZXdlckVsZW1lbnQucHJvdG90eXBlLCBcIm1pbkZpZWxkT2ZWaWV3XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHN0eWxlKHsgaW50cmluc2ljczogZmllbGRPZlZpZXdJbnRyaW5zaWNzLCB1cGRhdGVIYW5kbGVyOiAkc3luY01heEZpZWxkT2ZWaWV3IH0pLFxuICAgICAgICBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZywgYXR0cmlidXRlOiAnbWF4LWZpZWxkLW9mLXZpZXcnLCBoYXNDaGFuZ2VkOiAoKSA9PiB0cnVlIH0pXG4gICAgXSwgQ29udHJvbHNNb2RlbFZpZXdlckVsZW1lbnQucHJvdG90eXBlLCBcIm1heEZpZWxkT2ZWaWV3XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHByb3BlcnR5KHsgdHlwZTogTnVtYmVyLCBhdHRyaWJ1dGU6ICdpbnRlcmFjdGlvbi1wcm9tcHQtdGhyZXNob2xkJyB9KVxuICAgIF0sIENvbnRyb2xzTW9kZWxWaWV3ZXJFbGVtZW50LnByb3RvdHlwZSwgXCJpbnRlcmFjdGlvblByb21wdFRocmVzaG9sZFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZywgYXR0cmlidXRlOiAnaW50ZXJhY3Rpb24tcHJvbXB0JyB9KVxuICAgIF0sIENvbnRyb2xzTW9kZWxWaWV3ZXJFbGVtZW50LnByb3RvdHlwZSwgXCJpbnRlcmFjdGlvblByb21wdFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZywgYXR0cmlidXRlOiAnaW50ZXJhY3Rpb24tcHJvbXB0LXN0eWxlJyB9KVxuICAgIF0sIENvbnRyb2xzTW9kZWxWaWV3ZXJFbGVtZW50LnByb3RvdHlwZSwgXCJpbnRlcmFjdGlvblByb21wdFN0eWxlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHByb3BlcnR5KHsgdHlwZTogTnVtYmVyLCBhdHRyaWJ1dGU6ICdvcmJpdC1zZW5zaXRpdml0eScgfSlcbiAgICBdLCBDb250cm9sc01vZGVsVmlld2VyRWxlbWVudC5wcm90b3R5cGUsIFwib3JiaXRTZW5zaXRpdml0eVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZywgYXR0cmlidXRlOiAndG91Y2gtYWN0aW9uJyB9KVxuICAgIF0sIENvbnRyb2xzTW9kZWxWaWV3ZXJFbGVtZW50LnByb3RvdHlwZSwgXCJ0b3VjaEFjdGlvblwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIGF0dHJpYnV0ZTogJ2Rpc2FibGUtem9vbScgfSlcbiAgICBdLCBDb250cm9sc01vZGVsVmlld2VyRWxlbWVudC5wcm90b3R5cGUsIFwiZGlzYWJsZVpvb21cIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCBhdHRyaWJ1dGU6ICdkaXNhYmxlLXBhbicgfSlcbiAgICBdLCBDb250cm9sc01vZGVsVmlld2VyRWxlbWVudC5wcm90b3R5cGUsIFwiZGlzYWJsZVBhblwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIGF0dHJpYnV0ZTogJ2Rpc2FibGUtdGFwJyB9KVxuICAgIF0sIENvbnRyb2xzTW9kZWxWaWV3ZXJFbGVtZW50LnByb3RvdHlwZSwgXCJkaXNhYmxlVGFwXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHByb3BlcnR5KHsgdHlwZTogTnVtYmVyLCBhdHRyaWJ1dGU6ICdpbnRlcnBvbGF0aW9uLWRlY2F5JyB9KVxuICAgIF0sIENvbnRyb2xzTW9kZWxWaWV3ZXJFbGVtZW50LnByb3RvdHlwZSwgXCJpbnRlcnBvbGF0aW9uRGVjYXlcIiwgdm9pZCAwKTtcbiAgICByZXR1cm4gQ29udHJvbHNNb2RlbFZpZXdlckVsZW1lbnQ7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJvbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/controls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/environment.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $currentBackground: () => (/* binding */ $currentBackground),\n/* harmony export */   $currentEnvironmentMap: () => (/* binding */ $currentEnvironmentMap),\n/* harmony export */   $updateEnvironment: () => (/* binding */ $updateEnvironment),\n/* harmony export */   BASE_OPACITY: () => (/* binding */ BASE_OPACITY),\n/* harmony export */   EnvironmentMixin: () => (/* binding */ EnvironmentMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\nconst BASE_OPACITY = 0.5;\nconst DEFAULT_SHADOW_INTENSITY = 0.0;\nconst DEFAULT_SHADOW_SOFTNESS = 1.0;\nconst DEFAULT_EXPOSURE = 1.0;\nconst $currentEnvironmentMap = Symbol('currentEnvironmentMap');\nconst $currentBackground = Symbol('currentBackground');\nconst $updateEnvironment = Symbol('updateEnvironment');\nconst $cancelEnvironmentUpdate = Symbol('cancelEnvironmentUpdate');\nconst EnvironmentMixin = (ModelViewerElement) => {\n    var _a, _b, _c;\n    class EnvironmentModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this.environmentImage = null;\n            this.skyboxImage = null;\n            this.shadowIntensity = DEFAULT_SHADOW_INTENSITY;\n            this.shadowSoftness = DEFAULT_SHADOW_SOFTNESS;\n            this.exposure = DEFAULT_EXPOSURE;\n            this[_a] = null;\n            this[_b] = null;\n            this[_c] = null;\n        }\n        updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('shadowIntensity')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].setShadowIntensity(this.shadowIntensity * BASE_OPACITY);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n            if (changedProperties.has('shadowSoftness')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].setShadowSoftness(this.shadowSoftness);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n            if (changedProperties.has('exposure')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].exposure = this.exposure;\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n            if ((changedProperties.has('environmentImage') ||\n                changedProperties.has('skyboxImage')) &&\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$shouldAttemptPreload]()) {\n                this[$updateEnvironment]();\n            }\n        }\n        hasBakedShadow() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].bakedShadows.size > 0;\n        }\n        async [(_a = $currentEnvironmentMap, _b = $currentBackground, _c = $cancelEnvironmentUpdate, $updateEnvironment)]() {\n            const { skyboxImage, environmentImage } = this;\n            if (this[$cancelEnvironmentUpdate] != null) {\n                this[$cancelEnvironmentUpdate]();\n                this[$cancelEnvironmentUpdate] = null;\n            }\n            const { textureUtils } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer];\n            if (textureUtils == null) {\n                return;\n            }\n            const updateEnvProgress = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$progressTracker].beginActivity();\n            try {\n                const { environmentMap, skybox } = await textureUtils.generateEnvironmentMapAndSkybox((0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.deserializeUrl)(skyboxImage), environmentImage, (progress) => updateEnvProgress((0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(progress, 0, 1)));\n                if (this[$currentEnvironmentMap] !== environmentMap) {\n                    this[$currentEnvironmentMap] = environmentMap;\n                    this.dispatchEvent(new CustomEvent('environment-change'));\n                }\n                if (skybox != null) {\n                    // When using the same environment and skybox, use the environment as\n                    // it gives HDR filtering.\n                    this[$currentBackground] =\n                        skybox.name === environmentMap.name ? environmentMap : skybox;\n                }\n                else {\n                    this[$currentBackground] = null;\n                }\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].setEnvironmentAndSkybox(this[$currentEnvironmentMap], this[$currentBackground]);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].dispatchEvent({ type: 'envmap-update' });\n            }\n            catch (errorOrPromise) {\n                if (errorOrPromise instanceof Error) {\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].setEnvironmentAndSkybox(null, null);\n                    throw errorOrPromise;\n                }\n            }\n            finally {\n                updateEnvProgress(1.0);\n            }\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'environment-image' })\n    ], EnvironmentModelViewerElement.prototype, \"environmentImage\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'skybox-image' })\n    ], EnvironmentModelViewerElement.prototype, \"skyboxImage\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'shadow-intensity' })\n    ], EnvironmentModelViewerElement.prototype, \"shadowIntensity\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'shadow-softness' })\n    ], EnvironmentModelViewerElement.prototype, \"shadowSoftness\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({\n            type: Number,\n        })\n    ], EnvironmentModelViewerElement.prototype, \"exposure\", void 0);\n    return EnvironmentModelViewerElement;\n};\n//# sourceMappingURL=environment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/loading.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/loading.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $defaultPosterElement: () => (/* binding */ $defaultPosterElement),\n/* harmony export */   $defaultProgressBarElement: () => (/* binding */ $defaultProgressBarElement),\n/* harmony export */   $posterContainerElement: () => (/* binding */ $posterContainerElement),\n/* harmony export */   LoadingMixin: () => (/* binding */ LoadingMixin),\n/* harmony export */   POSTER_TRANSITION_TIME: () => (/* binding */ POSTER_TRANSITION_TIME),\n/* harmony export */   PROGRESS_BAR_UPDATE_THRESHOLD: () => (/* binding */ PROGRESS_BAR_UPDATE_THRESHOLD)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../three-components/CachingGLTFLoader.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js\");\n/* harmony import */ var _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../three-components/Renderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\nconst POSTER_TRANSITION_TIME = 300;\nconst PROGRESS_BAR_UPDATE_THRESHOLD = 100;\nconst DEFAULT_DRACO_DECODER_LOCATION = 'https://www.gstatic.com/draco/versioned/decoders/1.4.1/';\nconst DEFAULT_KTX2_TRANSCODER_LOCATION = 'https://www.gstatic.com/basis-universal/versioned/2021-04-15-ba1c3e4/';\nconst RevealStrategy = {\n    AUTO: 'auto',\n    MANUAL: 'manual'\n};\nconst LoadingStrategy = {\n    AUTO: 'auto',\n    LAZY: 'lazy',\n    EAGER: 'eager'\n};\nconst $defaultProgressBarElement = Symbol('defaultProgressBarElement');\nconst $posterContainerElement = Symbol('posterContainerElement');\nconst $defaultPosterElement = Symbol('defaultPosterElement');\nconst $shouldDismissPoster = Symbol('shouldDismissPoster');\nconst $hidePoster = Symbol('hidePoster');\nconst $modelIsRevealed = Symbol('modelIsRevealed');\nconst $updateProgressBar = Symbol('updateProgressBar');\nconst $ariaLabelCallToAction = Symbol('ariaLabelCallToAction');\nconst $onProgress = Symbol('onProgress');\n/**\n * LoadingMixin implements features related to lazy loading, as well as\n * presentation details related to the pre-load / pre-render presentation of a\n * <model-viewer>\n *\n * This mixin implements support for models with DRACO-compressed meshes.\n * The DRACO decoder will be loaded on-demand if a glTF that uses the DRACO mesh\n * compression extension is encountered.\n *\n * By default, the DRACO decoder will be loaded from a Google CDN. It is\n * possible to customize where the decoder is loaded from by defining a global\n * configuration option for `<model-viewer>` like so:\n *\n * ```html\n * <script>\n * self.ModelViewerElement = self.ModelViewerElement || {};\n * self.ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration strategy must be performed *before* the\n * first `<model-viewer>` element is created in the browser. The configuration\n * can be done anywhere, but the easiest way to ensure it is done at the right\n * time is to do it in the `<head>` of the HTML document. This is the\n * recommended way to set the location because it is most compatible with\n * scenarios where the `<model-viewer>` library is lazily loaded.\n *\n * If you absolutely have to set the DRACO decoder location *after* the first\n * `<model-viewer>` element is created, you can do it this way:\n *\n * ```html\n * <script>\n * const ModelViewerElement = customElements.get('model-viewer');\n * ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration approach will not work until *after*\n * `<model-viewer>` is defined in the browser. Also note that this configuration\n * *must* be set *before* the first DRACO model is fully loaded.\n *\n * It is recommended that users who intend to take advantage of DRACO mesh\n * compression consider whether or not it is acceptable for their use case to\n * have code side-loaded from a Google CDN. If it is not acceptable, then the\n * location must be customized before loading any DRACO models in order to cause\n * the decoder to be loaded from an alternative, acceptable location.\n */\nconst LoadingMixin = (ModelViewerElement) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    class LoadingModelViewerElement extends ModelViewerElement {\n        constructor(...args) {\n            super(...args);\n            /**\n             * A URL pointing to the image to use as a poster in scenarios where the\n             * <model-viewer> is not ready to reveal a rendered model to the viewer.\n             */\n            this.poster = null;\n            /**\n             * An enumerable attribute describing under what conditions the\n             * <model-viewer> should reveal a model to the viewer.\n             *\n             * The default value is \"auto\". The only supported alternative values is\n             * \"manual\".\n             */\n            this.reveal = RevealStrategy.AUTO;\n            /**\n             * An enumerable attribute describing under what conditions the\n             * <model-viewer> should preload a model.\n             *\n             * The default value is \"auto\". The only supported alternative values are\n             * \"lazy\" and \"eager\". Auto is equivalent to lazy, which loads the model\n             * when it is near the viewport for reveal = \"auto\", and when interacted\n             * with for reveal = \"interaction\". Eager loads the model immediately.\n             */\n            this.loading = LoadingStrategy.AUTO;\n            this[_a] = false;\n            this[_b] = false;\n            // TODO: Add this to the shadow root as part of this mixin's\n            // implementation:\n            this[_c] = this.shadowRoot.querySelector('.slot.poster');\n            this[_d] = this.shadowRoot.querySelector('#default-poster');\n            this[_e] = this.shadowRoot.querySelector('#default-progress-bar > .bar');\n            this[_f] = this[$defaultPosterElement].getAttribute('aria-label');\n            this[_g] = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.throttle)((progress) => {\n                const parentNode = this[$defaultProgressBarElement].parentNode;\n                requestAnimationFrame(() => {\n                    this[$defaultProgressBarElement].style.transform =\n                        `scaleX(${progress})`;\n                    if (progress === 0) {\n                        // NOTE(cdata): We remove and re-append the progress bar in this\n                        // condition so that the progress bar does not appear to\n                        // transition backwards from the right when we reset to 0 (or\n                        // otherwise <1) progress after having already reached 1 progress\n                        // previously.\n                        parentNode.removeChild(this[$defaultProgressBarElement]);\n                        parentNode.appendChild(this[$defaultProgressBarElement]);\n                    }\n                    // NOTE(cdata): IE11 does not properly respect the second parameter\n                    // of classList.toggle, which this implementation originally used.\n                    // @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11865865/\n                    if (progress === 1.0) {\n                        this[$defaultProgressBarElement].classList.add('hide');\n                    }\n                    else {\n                        this[$defaultProgressBarElement].classList.remove('hide');\n                    }\n                });\n            }, PROGRESS_BAR_UPDATE_THRESHOLD);\n            this[_h] = (event) => {\n                const progress = event.detail.totalProgress;\n                if (progress === 1.0) {\n                    this[$updateProgressBar].flush();\n                    if (this.loaded &&\n                        (this[$shouldDismissPoster] ||\n                            this.reveal === RevealStrategy.AUTO)) {\n                        this[$hidePoster]();\n                    }\n                }\n                this[$updateProgressBar](progress);\n                this.dispatchEvent(new CustomEvent('progress', { detail: { totalProgress: progress } }));\n            };\n            const ModelViewerElement = self.ModelViewerElement || {};\n            const dracoDecoderLocation = ModelViewerElement.dracoDecoderLocation ||\n                DEFAULT_DRACO_DECODER_LOCATION;\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setDRACODecoderLocation(dracoDecoderLocation);\n            const ktx2TranscoderLocation = ModelViewerElement.ktx2TranscoderLocation ||\n                DEFAULT_KTX2_TRANSCODER_LOCATION;\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setKTX2TranscoderLocation(ktx2TranscoderLocation);\n            if (ModelViewerElement.meshoptDecoderLocation) {\n                _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setMeshoptDecoderLocation(ModelViewerElement.meshoptDecoderLocation);\n            }\n        }\n        static set dracoDecoderLocation(value) {\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setDRACODecoderLocation(value);\n        }\n        static get dracoDecoderLocation() {\n            return _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.getDRACODecoderLocation();\n        }\n        static set ktx2TranscoderLocation(value) {\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setKTX2TranscoderLocation(value);\n        }\n        static get ktx2TranscoderLocation() {\n            return _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.getKTX2TranscoderLocation();\n        }\n        static set meshoptDecoderLocation(value) {\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setMeshoptDecoderLocation(value);\n        }\n        static get meshoptDecoderLocation() {\n            return _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.getMeshoptDecoderLocation();\n        }\n        /**\n         * If provided, the callback will be passed each resource URL before a\n         * request is sent. The callback may return the original URL, or a new URL\n         * to override loading behavior. This behavior can be used to load assets\n         * from .ZIP files, drag-and-drop APIs, and Data URIs.\n         */\n        static mapURLs(callback) {\n            _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_3__.Renderer.singleton.loader[_three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.$loader].manager.setURLModifier(callback);\n        }\n        /**\n         * Dismisses the poster, causing the model to load and render if\n         * necessary. This is currently effectively the same as interacting with\n         * the poster via user input.\n         */\n        dismissPoster() {\n            if (this.loaded) {\n                this[$hidePoster]();\n            }\n            else {\n                this[$shouldDismissPoster] = true;\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$updateSource]();\n            }\n        }\n        /**\n         * Displays the poster, hiding the 3D model. If this is called after the 3D\n         * model has been revealed, then it must be dismissed by a call to\n         * dismissPoster().\n         */\n        showPoster() {\n            const posterContainerElement = this[$posterContainerElement];\n            if (posterContainerElement.classList.contains('show')) {\n                return;\n            }\n            posterContainerElement.classList.add('show');\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$userInputElement].classList.remove('show');\n            const defaultPosterElement = this[$defaultPosterElement];\n            defaultPosterElement.removeAttribute('tabindex');\n            defaultPosterElement.removeAttribute('aria-hidden');\n            const oldVisibility = this.modelIsVisible;\n            this[$modelIsRevealed] = false;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$announceModelVisibility](oldVisibility);\n        }\n        /**\n         * Returns the model's bounding box dimensions in meters, independent of\n         * turntable rotation.\n         */\n        getDimensions() {\n            return (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.toVector3D)(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].size);\n        }\n        getBoundingBoxCenter() {\n            return (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.toVector3D)(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].boundingBox.getCenter(new three__WEBPACK_IMPORTED_MODULE_5__.Vector3()));\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this.showPoster();\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$progressTracker].addEventListener('progress', this[$onProgress]);\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$progressTracker].removeEventListener('progress', this[$onProgress]);\n        }\n        async updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('poster') && this.poster != null) {\n                this[$defaultPosterElement].style.backgroundImage =\n                    `url(${this.poster})`;\n            }\n            if (changedProperties.has('alt')) {\n                this[$defaultPosterElement].setAttribute('aria-label', this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$altDefaulted]);\n            }\n            if (changedProperties.has('reveal') || changedProperties.has('loading')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$updateSource]();\n            }\n        }\n        [(_a = $modelIsRevealed, _b = $shouldDismissPoster, _c = $posterContainerElement, _d = $defaultPosterElement, _e = $defaultProgressBarElement, _f = $ariaLabelCallToAction, _g = $updateProgressBar, _h = $onProgress, _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$shouldAttemptPreload)]() {\n            return !!this.src &&\n                (this[$shouldDismissPoster] ||\n                    this.loading === LoadingStrategy.EAGER ||\n                    (this.reveal === RevealStrategy.AUTO && this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$isElementInViewport]));\n        }\n        [$hidePoster]() {\n            this[$shouldDismissPoster] = false;\n            const posterContainerElement = this[$posterContainerElement];\n            if (!posterContainerElement.classList.contains('show')) {\n                return;\n            }\n            posterContainerElement.classList.remove('show');\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$userInputElement].classList.add('show');\n            const oldVisibility = this.modelIsVisible;\n            this[$modelIsRevealed] = true;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$announceModelVisibility](oldVisibility);\n            const root = this.getRootNode();\n            // If the <model-viewer> is still focused, forward the focus to\n            // the canvas that has just been revealed\n            if (root && root.activeElement === this) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$userInputElement].focus();\n            }\n            // Ensure that the poster is no longer focusable or visible to\n            // screen readers\n            const defaultPosterElement = this[$defaultPosterElement];\n            defaultPosterElement.setAttribute('aria-hidden', 'true');\n            defaultPosterElement.tabIndex = -1;\n            this.dispatchEvent(new CustomEvent('poster-dismissed'));\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$getModelIsVisible]() {\n            return super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$getModelIsVisible]() && this[$modelIsRevealed];\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String })\n    ], LoadingModelViewerElement.prototype, \"poster\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String })\n    ], LoadingModelViewerElement.prototype, \"reveal\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String })\n    ], LoadingModelViewerElement.prototype, \"loading\", void 0);\n    return LoadingModelViewerElement;\n};\n//# sourceMappingURL=loading.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/loading.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $currentGLTF: () => (/* binding */ $currentGLTF),\n/* harmony export */   $model: () => (/* binding */ $model),\n/* harmony export */   $originalGltfJson: () => (/* binding */ $originalGltfJson),\n/* harmony export */   SceneGraphMixin: () => (/* binding */ SceneGraphMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_exporters_GLTFExporter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/exporters/GLTFExporter.js */ \"(ssr)/./node_modules/three/examples/jsm/exporters/GLTFExporter.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _three_components_gltf_instance_VariantMaterialExporterPlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../three-components/gltf-instance/VariantMaterialExporterPlugin */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialExporterPlugin.js\");\n/* harmony import */ var _scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scene-graph/model.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/model.js\");\n/* harmony import */ var _scene_graph_texture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scene-graph/texture */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\nconst $currentGLTF = Symbol('currentGLTF');\nconst $originalGltfJson = Symbol('originalGltfJson');\nconst $model = Symbol('model');\nconst $getOnUpdateMethod = Symbol('getOnUpdateMethod');\nconst $textureLoader = Symbol('textureLoader');\n/**\n * SceneGraphMixin manages exposes a model API in order to support operations on\n * the <model-viewer> scene graph.\n */\nconst SceneGraphMixin = (ModelViewerElement) => {\n    var _a, _b, _c, _d;\n    class SceneGraphModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this[_a] = undefined;\n            this[_b] = null;\n            this[_c] = new three__WEBPACK_IMPORTED_MODULE_5__.TextureLoader();\n            this[_d] = null;\n            this.variantName = null;\n            this.orientation = '0 0 0';\n            this.scale = '1 1 1';\n        }\n        // Scene-graph API:\n        /** @export */\n        get model() {\n            return this[$model];\n        }\n        get availableVariants() {\n            return this.model ? this.model[_scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.$availableVariants]() : [];\n        }\n        /**\n         * Returns a deep copy of the gltf JSON as loaded. It will not reflect\n         * changes to the scene-graph, nor will editing it have any effect.\n         */\n        get originalGltfJson() {\n            return this[$originalGltfJson];\n        }\n        [(_a = $model, _b = $currentGLTF, _c = $textureLoader, _d = $originalGltfJson, $getOnUpdateMethod)]() {\n            return () => {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            };\n        }\n        async createTexture(uri, type = 'image/png') {\n            const currentGLTF = this[$currentGLTF];\n            const texture = await new Promise((resolve) => this[$textureLoader].load(uri, resolve));\n            if (!currentGLTF || !texture) {\n                return null;\n            }\n            // Applies default settings.\n            texture.encoding = three__WEBPACK_IMPORTED_MODULE_5__.sRGBEncoding;\n            texture.wrapS = three__WEBPACK_IMPORTED_MODULE_5__.RepeatWrapping;\n            texture.wrapT = three__WEBPACK_IMPORTED_MODULE_5__.RepeatWrapping;\n            texture.flipY = false;\n            texture.userData.mimeType = type;\n            return new _scene_graph_texture__WEBPACK_IMPORTED_MODULE_4__.Texture(this[$getOnUpdateMethod](), texture);\n        }\n        async updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('variantName')) {\n                const updateVariantProgress = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$progressTracker].beginActivity();\n                updateVariantProgress(0.1);\n                const model = this[$model];\n                const { variantName } = this;\n                if (model != null) {\n                    await model[_scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.$switchVariant](variantName);\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n                    this.dispatchEvent(new CustomEvent('variant-applied'));\n                }\n                updateVariantProgress(1.0);\n            }\n            if (changedProperties.has('orientation') ||\n                changedProperties.has('scale')) {\n                if (!this.loaded) {\n                    return;\n                }\n                const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene];\n                scene.applyTransform();\n                scene.updateBoundingBox();\n                scene.updateShadow();\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer].arRenderer.onUpdateScene();\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onModelLoad]() {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onModelLoad]();\n            const { currentGLTF } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene];\n            if (currentGLTF != null) {\n                const { correlatedSceneGraph } = currentGLTF;\n                if (correlatedSceneGraph != null &&\n                    currentGLTF !== this[$currentGLTF]) {\n                    this[$model] =\n                        new _scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.Model(correlatedSceneGraph, this[$getOnUpdateMethod]());\n                    this[$originalGltfJson] =\n                        JSON.parse(JSON.stringify(correlatedSceneGraph.gltf));\n                }\n                // KHR_materials_variants extension spec:\n                // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_variants\n                if ('variants' in currentGLTF.userData) {\n                    this.requestUpdate('variantName');\n                }\n            }\n            this[$currentGLTF] = currentGLTF;\n        }\n        /** @export */\n        async exportScene(options) {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene];\n            return new Promise(async (resolve, reject) => {\n                // Defaults\n                const opts = {\n                    binary: true,\n                    onlyVisible: true,\n                    maxTextureSize: Infinity,\n                    includeCustomExtensions: false,\n                    forceIndices: false\n                };\n                Object.assign(opts, options);\n                // Not configurable\n                opts.animations = scene.animations;\n                opts.truncateDrawRange = true;\n                const shadow = scene.shadow;\n                let visible = false;\n                // Remove shadow from export\n                if (shadow != null) {\n                    visible = shadow.visible;\n                    shadow.visible = false;\n                }\n                await this[$model][_scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.$prepareVariantsForExport]();\n                const exporter = new three_examples_jsm_exporters_GLTFExporter_js__WEBPACK_IMPORTED_MODULE_6__.GLTFExporter()\n                    .register((writer) => new _three_components_gltf_instance_VariantMaterialExporterPlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"](writer));\n                exporter.parse(scene.model, (gltf) => {\n                    return resolve(new Blob([opts.binary ? gltf : JSON.stringify(gltf)], {\n                        type: opts.binary ? 'application/octet-stream' :\n                            'application/json'\n                    }));\n                }, () => {\n                    return reject('glTF export failed');\n                }, opts);\n                if (shadow != null) {\n                    shadow.visible = visible;\n                }\n            });\n        }\n        materialFromPoint(pixelX, pixelY) {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene];\n            const ndcCoords = scene.getNDC(pixelX, pixelY);\n            scene.raycaster.setFromCamera(ndcCoords, scene.getCamera());\n            return this[$model][_scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.$materialFromPoint](scene.raycaster);\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'variant-name' })\n    ], SceneGraphModelViewerElement.prototype, \"variantName\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'orientation' })\n    ], SceneGraphModelViewerElement.prototype, \"orientation\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'scale' })\n    ], SceneGraphModelViewerElement.prototype, \"scale\", void 0);\n    return SceneGraphModelViewerElement;\n};\n//# sourceMappingURL=scene-graph.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/image.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/image.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $applyTexture: () => (/* binding */ $applyTexture),\n/* harmony export */   $threeTexture: () => (/* binding */ $threeTexture),\n/* harmony export */   Image: () => (/* binding */ Image)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../three-components/Renderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst quadMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial();\nconst quad = new three__WEBPACK_IMPORTED_MODULE_3__.PlaneGeometry(2, 2);\nlet adhocNum = 0;\nconst $threeTexture = Symbol('threeTexture');\nconst $applyTexture = Symbol('applyTexture');\n/**\n * Image facade implementation for Three.js textures\n */\nclass Image extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.ThreeDOMElement {\n    get [$threeTexture]() {\n        var _a;\n        console.assert(this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects] != null && this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects].size > 0, 'Image correlated object is undefined');\n        return (_a = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) === null || _a === void 0 ? void 0 : _a.values().next().value;\n    }\n    constructor(onUpdate, texture, gltfImage) {\n        gltfImage = gltfImage !== null && gltfImage !== void 0 ? gltfImage : {\n            name: (texture && texture.image && texture.image.src) ?\n                texture.image.src.split('/').pop() :\n                'adhoc_image',\n            uri: (texture && texture.image && texture.image.src) ?\n                texture.image.src :\n                'adhoc_image' + adhocNum++\n        };\n        super(onUpdate, gltfImage, new Set(texture ? [texture] : []));\n    }\n    get name() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name || '';\n    }\n    get uri() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].uri;\n    }\n    get bufferView() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].bufferView;\n    }\n    get type() {\n        return this.uri != null ? 'external' : 'embedded';\n    }\n    set name(name) {\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name = name;\n    }\n    async createThumbnail(width, height) {\n        const scene = new three__WEBPACK_IMPORTED_MODULE_3__.Scene();\n        quadMaterial.map = this[$threeTexture];\n        const mesh = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(quad, quadMaterial);\n        scene.add(mesh);\n        const camera = new three__WEBPACK_IMPORTED_MODULE_3__.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        const { threeRenderer } = _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_1__.Renderer.singleton;\n        const renderTarget = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderTarget(width, height);\n        threeRenderer.setRenderTarget(renderTarget);\n        threeRenderer.render(scene, camera);\n        threeRenderer.setRenderTarget(null);\n        const buffer = new Uint8Array(width * height * 4);\n        threeRenderer.readRenderTargetPixels(renderTarget, 0, 0, width, height, buffer);\n        _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.blobCanvas.width = width;\n        _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.blobCanvas.height = height;\n        const blobContext = _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.blobCanvas.getContext('2d');\n        const imageData = blobContext.createImageData(width, height);\n        imageData.data.set(buffer);\n        blobContext.putImageData(imageData, 0, 0);\n        return new Promise(async (resolve, reject) => {\n            _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.blobCanvas.toBlob(blob => {\n                if (!blob) {\n                    return reject('Failed to capture thumbnail.');\n                }\n                resolve(URL.createObjectURL(blob));\n            }, 'image/png');\n        });\n    }\n}\n//# sourceMappingURL=image.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL2ltYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZHO0FBQ3JEO0FBQ007QUFDOEI7QUFDNUYseUJBQXlCLG9EQUFpQjtBQUMxQyxpQkFBaUIsZ0RBQWE7QUFDOUI7QUFDTztBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ08sb0JBQW9CLGtFQUFlO0FBQzFDO0FBQ0E7QUFDQSw0QkFBNEIscUVBQWtCLGtCQUFrQixxRUFBa0I7QUFDbEYsMEJBQTBCLHFFQUFrQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnRUFBYTtBQUNqQztBQUNBO0FBQ0Esb0JBQW9CLGdFQUFhO0FBQ2pDO0FBQ0E7QUFDQSxvQkFBb0IsZ0VBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQWE7QUFDMUI7QUFDQTtBQUNBLDBCQUEwQix3Q0FBSztBQUMvQjtBQUNBLHlCQUF5Qix1Q0FBSTtBQUM3QjtBQUNBLDJCQUEyQixxREFBa0I7QUFDN0MsZ0JBQWdCLGdCQUFnQixFQUFFLG1FQUFRO0FBQzFDLGlDQUFpQyxvREFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsNkRBQVU7QUFDbEIsUUFBUSw2REFBVTtBQUNsQiw0QkFBNEIsNkRBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZEQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZnQtbWludGluZy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvZmVhdHVyZXMvc2NlbmUtZ3JhcGgvaW1hZ2UuanM/ZjI2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBNZXNoLCBNZXNoQmFzaWNNYXRlcmlhbCwgT3J0aG9ncmFwaGljQ2FtZXJhLCBQbGFuZUdlb21ldHJ5LCBTY2VuZSwgV2ViR0xSZW5kZXJUYXJnZXQgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBibG9iQ2FudmFzIH0gZnJvbSAnLi4vLi4vbW9kZWwtdmlld2VyLWJhc2UuanMnO1xuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuLi8uLi90aHJlZS1jb21wb25lbnRzL1JlbmRlcmVyLmpzJztcbmltcG9ydCB7ICRjb3JyZWxhdGVkT2JqZWN0cywgJHNvdXJjZU9iamVjdCwgVGhyZWVET01FbGVtZW50IH0gZnJvbSAnLi90aHJlZS1kb20tZWxlbWVudC5qcyc7XG5jb25zdCBxdWFkTWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoKTtcbmNvbnN0IHF1YWQgPSBuZXcgUGxhbmVHZW9tZXRyeSgyLCAyKTtcbmxldCBhZGhvY051bSA9IDA7XG5leHBvcnQgY29uc3QgJHRocmVlVGV4dHVyZSA9IFN5bWJvbCgndGhyZWVUZXh0dXJlJyk7XG5leHBvcnQgY29uc3QgJGFwcGx5VGV4dHVyZSA9IFN5bWJvbCgnYXBwbHlUZXh0dXJlJyk7XG4vKipcbiAqIEltYWdlIGZhY2FkZSBpbXBsZW1lbnRhdGlvbiBmb3IgVGhyZWUuanMgdGV4dHVyZXNcbiAqL1xuZXhwb3J0IGNsYXNzIEltYWdlIGV4dGVuZHMgVGhyZWVET01FbGVtZW50IHtcbiAgICBnZXQgWyR0aHJlZVRleHR1cmVdKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHRoaXNbJGNvcnJlbGF0ZWRPYmplY3RzXSAhPSBudWxsICYmIHRoaXNbJGNvcnJlbGF0ZWRPYmplY3RzXS5zaXplID4gMCwgJ0ltYWdlIGNvcnJlbGF0ZWQgb2JqZWN0IGlzIHVuZGVmaW5lZCcpO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpc1skY29ycmVsYXRlZE9iamVjdHNdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihvblVwZGF0ZSwgdGV4dHVyZSwgZ2x0ZkltYWdlKSB7XG4gICAgICAgIGdsdGZJbWFnZSA9IGdsdGZJbWFnZSAhPT0gbnVsbCAmJiBnbHRmSW1hZ2UgIT09IHZvaWQgMCA/IGdsdGZJbWFnZSA6IHtcbiAgICAgICAgICAgIG5hbWU6ICh0ZXh0dXJlICYmIHRleHR1cmUuaW1hZ2UgJiYgdGV4dHVyZS5pbWFnZS5zcmMpID9cbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmltYWdlLnNyYy5zcGxpdCgnLycpLnBvcCgpIDpcbiAgICAgICAgICAgICAgICAnYWRob2NfaW1hZ2UnLFxuICAgICAgICAgICAgdXJpOiAodGV4dHVyZSAmJiB0ZXh0dXJlLmltYWdlICYmIHRleHR1cmUuaW1hZ2Uuc3JjKSA/XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5pbWFnZS5zcmMgOlxuICAgICAgICAgICAgICAgICdhZGhvY19pbWFnZScgKyBhZGhvY051bSsrXG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyKG9uVXBkYXRlLCBnbHRmSW1hZ2UsIG5ldyBTZXQodGV4dHVyZSA/IFt0ZXh0dXJlXSA6IFtdKSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skc291cmNlT2JqZWN0XS5uYW1lIHx8ICcnO1xuICAgIH1cbiAgICBnZXQgdXJpKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skc291cmNlT2JqZWN0XS51cmk7XG4gICAgfVxuICAgIGdldCBidWZmZXJWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpc1skc291cmNlT2JqZWN0XS5idWZmZXJWaWV3O1xuICAgIH1cbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJpICE9IG51bGwgPyAnZXh0ZXJuYWwnIDogJ2VtYmVkZGVkJztcbiAgICB9XG4gICAgc2V0IG5hbWUobmFtZSkge1xuICAgICAgICB0aGlzWyRzb3VyY2VPYmplY3RdLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVUaHVtYm5haWwod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBjb25zdCBzY2VuZSA9IG5ldyBTY2VuZSgpO1xuICAgICAgICBxdWFkTWF0ZXJpYWwubWFwID0gdGhpc1skdGhyZWVUZXh0dXJlXTtcbiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBNZXNoKHF1YWQsIHF1YWRNYXRlcmlhbCk7XG4gICAgICAgIHNjZW5lLmFkZChtZXNoKTtcbiAgICAgICAgY29uc3QgY2FtZXJhID0gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSgtMSwgMSwgMSwgLTEsIDAsIDEpO1xuICAgICAgICBjb25zdCB7IHRocmVlUmVuZGVyZXIgfSA9IFJlbmRlcmVyLnNpbmdsZXRvbjtcbiAgICAgICAgY29uc3QgcmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aHJlZVJlbmRlcmVyLnNldFJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpO1xuICAgICAgICB0aHJlZVJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgICAgICAgdGhyZWVSZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQobnVsbCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdpZHRoICogaGVpZ2h0ICogNCk7XG4gICAgICAgIHRocmVlUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVscyhyZW5kZXJUYXJnZXQsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIGJ1ZmZlcik7XG4gICAgICAgIGJsb2JDYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgYmxvYkNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGNvbnN0IGJsb2JDb250ZXh0ID0gYmxvYkNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBjb25zdCBpbWFnZURhdGEgPSBibG9iQ29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGltYWdlRGF0YS5kYXRhLnNldChidWZmZXIpO1xuICAgICAgICBibG9iQ29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGJsb2JDYW52YXMudG9CbG9iKGJsb2IgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghYmxvYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdGYWlsZWQgdG8gY2FwdHVyZSB0aHVtYm5haWwuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG4gICAgICAgICAgICB9LCAnaW1hZ2UvcG5nJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/image.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/material.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/material.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $ensureMaterialIsLoaded: () => (/* binding */ $ensureMaterialIsLoaded),\n/* harmony export */   $getLoadedMaterial: () => (/* binding */ $getLoadedMaterial),\n/* harmony export */   $gltfIndex: () => (/* binding */ $gltfIndex),\n/* harmony export */   $lazyLoadGLTFInfo: () => (/* binding */ $lazyLoadGLTFInfo),\n/* harmony export */   $setActive: () => (/* binding */ $setActive),\n/* harmony export */   $variantIndices: () => (/* binding */ $variantIndices),\n/* harmony export */   $variantSet: () => (/* binding */ $variantSet),\n/* harmony export */   Material: () => (/* binding */ Material)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _pbr_metallic_roughness_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pbr-metallic-roughness.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/pbr-metallic-roughness.js\");\n/* harmony import */ var _texture_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./texture-info.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\n\n\n\n\nconst $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\nconst $normalTexture = Symbol('normalTexture');\nconst $occlusionTexture = Symbol('occlusionTexture');\nconst $emissiveTexture = Symbol('emissiveTexture');\nconst $backingThreeMaterial = Symbol('backingThreeMaterial');\nconst $applyAlphaCutoff = Symbol('applyAlphaCutoff');\nconst $lazyLoadGLTFInfo = Symbol('lazyLoadGLTFInfo');\nconst $initialize = Symbol('initialize');\nconst $getLoadedMaterial = Symbol('getLoadedMaterial');\nconst $ensureMaterialIsLoaded = Symbol('ensureMaterialIsLoaded');\nconst $gltfIndex = Symbol('gltfIndex');\nconst $setActive = Symbol('setActive');\nconst $variantIndices = Symbol('variantIndices');\nconst $isActive = Symbol('isActive');\nconst $variantSet = Symbol('variantSet');\nconst $modelVariants = Symbol('modelVariants');\n/**\n * Material facade implementation for Three.js materials\n */\nclass Material extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.ThreeDOMElement {\n    constructor(onUpdate, gltf, gltfMaterial, gltfIndex, isActive, modelVariants, correlatedMaterials, lazyLoadInfo = undefined) {\n        super(onUpdate, gltfMaterial, correlatedMaterials);\n        this[_a] = new Set();\n        this[$gltfIndex] = gltfIndex;\n        this[$isActive] = isActive;\n        this[$modelVariants] = modelVariants;\n        if (lazyLoadInfo == null) {\n            this[$initialize](gltf);\n        }\n        else {\n            this[$lazyLoadGLTFInfo] = lazyLoadInfo;\n        }\n    }\n    get [(_a = $variantSet, $backingThreeMaterial)]() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]\n            .values()\n            .next()\n            .value;\n    }\n    [$initialize](gltf) {\n        const onUpdate = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate];\n        const gltfMaterial = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject];\n        const correlatedMaterials = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects];\n        if (gltfMaterial.extensions &&\n            gltfMaterial.extensions['KHR_materials_pbrSpecularGlossiness']) {\n            console.warn(`Material ${gltfMaterial.name} uses a deprecated extension\n          \"KHR_materials_pbrSpecularGlossiness\", please use\n          \"pbrMetallicRoughness\" instead. Specular Glossiness materials are\n          currently supported for rendering, but not for our scene-graph API,\n          nor for auto-generation of USDZ for Quick Look.`);\n        }\n        if (gltfMaterial.pbrMetallicRoughness == null) {\n            gltfMaterial.pbrMetallicRoughness = {};\n        }\n        this[$pbrMetallicRoughness] = new _pbr_metallic_roughness_js__WEBPACK_IMPORTED_MODULE_0__.PBRMetallicRoughness(onUpdate, gltf, gltfMaterial.pbrMetallicRoughness, correlatedMaterials);\n        if (gltfMaterial.emissiveFactor == null) {\n            gltfMaterial.emissiveFactor = [0, 0, 0];\n        }\n        if (gltfMaterial.doubleSided == null) {\n            gltfMaterial.doubleSided = false;\n        }\n        if (gltfMaterial.alphaMode == null) {\n            gltfMaterial.alphaMode = 'OPAQUE';\n        }\n        if (gltfMaterial.alphaCutoff == null) {\n            gltfMaterial.alphaCutoff = 0.5;\n        }\n        const { normalTexture: gltfNormalTexture, occlusionTexture: gltfOcclusionTexture, emissiveTexture: gltfEmissiveTexture } = gltfMaterial;\n        const { normalMap, aoMap, emissiveMap } = correlatedMaterials.values().next().value;\n        this[$normalTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.Normal, normalMap, correlatedMaterials, gltf, gltfNormalTexture ? gltfNormalTexture : null);\n        this[$occlusionTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.Occlusion, aoMap, correlatedMaterials, gltf, gltfOcclusionTexture ? gltfOcclusionTexture : null);\n        this[$emissiveTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.Emissive, emissiveMap, correlatedMaterials, gltf, gltfEmissiveTexture ? gltfEmissiveTexture : null);\n    }\n    async [$getLoadedMaterial]() {\n        if (this[$lazyLoadGLTFInfo] != null) {\n            const { set, material } = await this[$lazyLoadGLTFInfo].doLazyLoad();\n            // Fills in the missing data.\n            this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects] = set;\n            this[$initialize](this[$lazyLoadGLTFInfo].gltf);\n            // Releases lazy load info.\n            this[$lazyLoadGLTFInfo] = undefined;\n            // Redefines the method as a noop method.\n            this.ensureLoaded = async () => { };\n            return material;\n        }\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects].values().next().value;\n    }\n    [$ensureMaterialIsLoaded]() {\n        if (this[$lazyLoadGLTFInfo] == null) {\n            return;\n        }\n        throw new Error(`Material \"${this.name}\" has not been loaded, call 'await\n    myMaterial.ensureLoaded()' before using an unloaded material.`);\n    }\n    async ensureLoaded() {\n        await this[$getLoadedMaterial]();\n    }\n    get isLoaded() {\n        return this[$lazyLoadGLTFInfo] == null;\n    }\n    get isActive() {\n        return this[$isActive];\n    }\n    [$setActive](isActive) {\n        this[$isActive] = isActive;\n    }\n    get name() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name;\n    }\n    set name(name) {\n        const sourceMaterial = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject];\n        if (sourceMaterial != null) {\n            sourceMaterial.name = name;\n        }\n        if (this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects] != null) {\n            for (const threeMaterial of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n                threeMaterial.name = name;\n            }\n        }\n    }\n    get pbrMetallicRoughness() {\n        this[$ensureMaterialIsLoaded]();\n        return this[$pbrMetallicRoughness];\n    }\n    get normalTexture() {\n        this[$ensureMaterialIsLoaded]();\n        return this[$normalTexture];\n    }\n    get occlusionTexture() {\n        this[$ensureMaterialIsLoaded]();\n        return this[$occlusionTexture];\n    }\n    get emissiveTexture() {\n        this[$ensureMaterialIsLoaded]();\n        return this[$emissiveTexture];\n    }\n    get emissiveFactor() {\n        this[$ensureMaterialIsLoaded]();\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].emissiveFactor;\n    }\n    get index() {\n        return this[$gltfIndex];\n    }\n    [$variantIndices]() {\n        return this[$variantSet];\n    }\n    hasVariant(name) {\n        const variantData = this[$modelVariants].get(name);\n        return variantData != null && this[$variantSet].has(variantData.index);\n    }\n    setEmissiveFactor(rgb) {\n        this[$ensureMaterialIsLoaded]();\n        const color = new three__WEBPACK_IMPORTED_MODULE_3__.Color();\n        if (rgb instanceof Array) {\n            color.fromArray(rgb);\n        }\n        else {\n            color.set(rgb).convertSRGBToLinear();\n        }\n        for (const material of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n            material.emissive.set(color);\n        }\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].emissiveFactor =\n            color.toArray();\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate]();\n    }\n    [$applyAlphaCutoff]() {\n        this[$ensureMaterialIsLoaded]();\n        const gltfMaterial = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject];\n        for (const material of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n            if (this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaMode === 'MASK') {\n                material.alphaTest = gltfMaterial.alphaCutoff;\n            }\n            else {\n                material.alphaTest = undefined;\n            }\n            material.needsUpdate = true;\n        }\n    }\n    setAlphaCutoff(cutoff) {\n        this[$ensureMaterialIsLoaded]();\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaCutoff = cutoff;\n        this[$applyAlphaCutoff]();\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate]();\n    }\n    getAlphaCutoff() {\n        this[$ensureMaterialIsLoaded]();\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaCutoff;\n    }\n    setDoubleSided(doubleSided) {\n        this[$ensureMaterialIsLoaded]();\n        for (const material of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n            // When double-sided is disabled gltf spec dictates that Back-Face culling\n            // must be disabled, in three.js parlance that would mean FrontSide\n            // rendering only.\n            // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#double-sided\n            material.side = doubleSided ? three__WEBPACK_IMPORTED_MODULE_3__.DoubleSide : three__WEBPACK_IMPORTED_MODULE_3__.FrontSide;\n            material.needsUpdate = true;\n        }\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].doubleSided = doubleSided;\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate]();\n    }\n    getDoubleSided() {\n        this[$ensureMaterialIsLoaded]();\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].doubleSided;\n    }\n    setAlphaMode(alphaMode) {\n        this[$ensureMaterialIsLoaded]();\n        const enableTransparency = (material, enabled) => {\n            material.transparent = enabled;\n            material.depthWrite = !enabled;\n        };\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaMode = alphaMode;\n        for (const material of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n            enableTransparency(material, alphaMode === 'BLEND');\n            this[$applyAlphaCutoff]();\n            material.needsUpdate = true;\n        }\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate]();\n    }\n    getAlphaMode() {\n        this[$ensureMaterialIsLoaded]();\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaMode;\n    }\n}\n//# sourceMappingURL=material.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/material.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/model.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/model.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $availableVariants: () => (/* binding */ $availableVariants),\n/* harmony export */   $correlatedSceneGraph: () => (/* binding */ $correlatedSceneGraph),\n/* harmony export */   $loadVariant: () => (/* binding */ $loadVariant),\n/* harmony export */   $materialFromPoint: () => (/* binding */ $materialFromPoint),\n/* harmony export */   $materials: () => (/* binding */ $materials),\n/* harmony export */   $materialsFromPoint: () => (/* binding */ $materialsFromPoint),\n/* harmony export */   $prepareVariantsForExport: () => (/* binding */ $prepareVariantsForExport),\n/* harmony export */   $primitivesList: () => (/* binding */ $primitivesList),\n/* harmony export */   $switchVariant: () => (/* binding */ $switchVariant),\n/* harmony export */   $threeScene: () => (/* binding */ $threeScene),\n/* harmony export */   $variantData: () => (/* binding */ $variantData),\n/* harmony export */   LazyLoader: () => (/* binding */ LazyLoader),\n/* harmony export */   Model: () => (/* binding */ Model)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./material.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/material.js\");\n/* harmony import */ var _nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nodes/primitive-node.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/nodes/primitive-node.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c, _d, _e, _f;\n\n\n\n\nconst $materials = Symbol('materials');\nconst $hierarchy = Symbol('hierarchy');\nconst $roots = Symbol('roots');\nconst $primitivesList = Symbol('primitives');\nconst $loadVariant = Symbol('loadVariant');\nconst $correlatedSceneGraph = Symbol('correlatedSceneGraph');\nconst $prepareVariantsForExport = Symbol('prepareVariantsForExport');\nconst $switchVariant = Symbol('switchVariant');\nconst $threeScene = Symbol('threeScene');\nconst $materialsFromPoint = Symbol('materialsFromPoint');\nconst $materialFromPoint = Symbol('materialFromPoint');\nconst $variantData = Symbol('variantData');\nconst $availableVariants = Symbol('availableVariants');\nconst $modelOnUpdate = Symbol('modelOnUpdate');\nconst $cloneMaterial = Symbol('cloneMaterial');\n// Holds onto temporary scene context information needed to perform lazy loading\n// of a resource.\nclass LazyLoader {\n    constructor(gltf, gltfElementMap, mapKey, doLazyLoad) {\n        this.gltf = gltf;\n        this.gltfElementMap = gltfElementMap;\n        this.mapKey = mapKey;\n        this.doLazyLoad = doLazyLoad;\n    }\n}\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\nclass Model {\n    constructor(correlatedSceneGraph, onUpdate = () => { }) {\n        this[_a] = new Array();\n        this[_b] = new Array();\n        this[_c] = new Array();\n        this[_d] = new Array();\n        this[_e] = () => { };\n        this[_f] = new Map();\n        this[$modelOnUpdate] = onUpdate;\n        this[$correlatedSceneGraph] = correlatedSceneGraph;\n        const { gltf, threeGLTF, gltfElementMap } = correlatedSceneGraph;\n        this[$threeScene] = threeGLTF.scene;\n        for (const [i, material] of gltf.materials.entries()) {\n            const correlatedMaterial = gltfElementMap.get(material);\n            if (correlatedMaterial != null) {\n                this[$materials].push(new _material_js__WEBPACK_IMPORTED_MODULE_0__.Material(onUpdate, gltf, material, i, true, this[$variantData], correlatedMaterial));\n            }\n            else {\n                const elementArray = gltf['materials'] || [];\n                const gltfMaterialDef = elementArray[i];\n                // Loads the three.js material.\n                const capturedMatIndex = i;\n                const materialLoadCallback = async () => {\n                    const threeMaterial = await threeGLTF.parser.getDependency('material', capturedMatIndex);\n                    // Adds correlation, maps the variant gltf-def to the\n                    // three material set containing the variant material.\n                    const threeMaterialSet = new Set();\n                    gltfElementMap.set(gltfMaterialDef, threeMaterialSet);\n                    threeMaterialSet.add(threeMaterial);\n                    return { set: threeMaterialSet, material: threeMaterial };\n                };\n                // Configures the material for lazy loading.\n                this[$materials].push(new _material_js__WEBPACK_IMPORTED_MODULE_0__.Material(onUpdate, gltf, gltfMaterialDef, i, false, this[$variantData], correlatedMaterial, new LazyLoader(gltf, gltfElementMap, gltfMaterialDef, materialLoadCallback)));\n            }\n        }\n        // Creates a hierarchy of Nodes. Allows not just for switching which\n        // material is applied to a mesh but also exposes a way to provide API\n        // for switching materials and general assignment/modification.\n        // Prepares for scene iteration.\n        const parentMap = new Map();\n        const nodeStack = new Array();\n        for (const object of threeGLTF.scene.children) {\n            nodeStack.push(object);\n        }\n        // Walks the hierarchy and creates a node tree.\n        while (nodeStack.length > 0) {\n            const object = nodeStack.pop();\n            let node = null;\n            if (object instanceof three__WEBPACK_IMPORTED_MODULE_3__.Mesh) {\n                node = new _nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveNode(object, this.materials, this[$variantData], correlatedSceneGraph);\n                this[$primitivesList].push(node);\n            }\n            else {\n                node = new _nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__.Node(object.name);\n            }\n            const parent = parentMap.get(object);\n            if (parent != null) {\n                parent[_nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__.$children].push(node);\n            }\n            else {\n                this[$roots].push(node);\n            }\n            this[$hierarchy].push(node);\n            for (const child of object.children) {\n                nodeStack.push(child);\n                parentMap.set(object, node);\n            }\n        }\n    }\n    /**\n     * Materials are listed in the order of the GLTF materials array, plus a\n     * default material at the end if one is used.\n     *\n     * TODO(#1003): How do we handle non-active scenes?\n     */\n    get materials() {\n        return this[$materials];\n    }\n    [(_a = $materials, _b = $hierarchy, _c = $roots, _d = $primitivesList, _e = $modelOnUpdate, _f = $variantData, $availableVariants)]() {\n        const variants = Array.from(this[$variantData].values());\n        variants.sort((a, b) => {\n            return a.index - b.index;\n        });\n        return variants.map((data) => {\n            return data.name;\n        });\n    }\n    getMaterialByName(name) {\n        const matches = this[$materials].filter(material => {\n            return material.name === name;\n        });\n        if (matches.length > 0) {\n            return matches[0];\n        }\n        return null;\n    }\n    /**\n     * Intersects a ray with the Model and returns a list of materials whose\n     * objects were intersected.\n     */\n    [$materialsFromPoint](raycaster) {\n        const hits = raycaster.intersectObject(this[$threeScene], true);\n        // Map the object hits to primitives and then to the active material of\n        // the primitive.\n        return hits.map((hit) => {\n            const found = this[$hierarchy].find((node) => {\n                if (node instanceof _nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveNode) {\n                    const primitive = node;\n                    if (primitive.mesh === hit.object) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n            if (found != null) {\n                return found.getActiveMaterial();\n            }\n            return null;\n        });\n    }\n    /**\n     * Intersects a ray with the Model and returns the first material whose\n     * object was intersected.\n     */\n    [$materialFromPoint](raycaster) {\n        const materials = this[$materialsFromPoint](raycaster);\n        if (materials.length > 0) {\n            return materials[0];\n        }\n        return null;\n    }\n    /**\n     * Switches model variant to the variant name provided, or switches to\n     * default/initial materials if 'null' is provided.\n     */\n    async [$switchVariant](variantName) {\n        for (const primitive of this[$primitivesList]) {\n            await primitive.enableVariant(variantName);\n        }\n        for (const material of this.materials) {\n            material[_material_js__WEBPACK_IMPORTED_MODULE_0__.$setActive](false);\n        }\n        // Marks the materials that are now in use after the variant switch.\n        for (const primitive of this[$primitivesList]) {\n            this.materials[primitive.getActiveMaterial().index][_material_js__WEBPACK_IMPORTED_MODULE_0__.$setActive](true);\n        }\n    }\n    async [$prepareVariantsForExport]() {\n        const promises = new Array();\n        for (const primitive of this[$primitivesList]) {\n            promises.push(primitive.instantiateVariants());\n        }\n        await Promise.all(promises);\n    }\n    [$cloneMaterial](index, newMaterialName) {\n        const material = this.materials[index];\n        if (!material.isLoaded) {\n            console.error(`Cloning an unloaded material,\n           call 'material.ensureLoaded() before cloning the material.`);\n        }\n        const threeMaterialSet = material[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects];\n        // clones the gltf material data and updates the material name.\n        const gltfSourceMaterial = JSON.parse(JSON.stringify(material[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject]));\n        gltfSourceMaterial.name = newMaterialName;\n        // Adds the source material clone to the gltf def.\n        const gltf = this[$correlatedSceneGraph].gltf;\n        gltf.materials.push(gltfSourceMaterial);\n        const clonedSet = new Set();\n        for (const [i, threeMaterial] of threeMaterialSet.entries()) {\n            const clone = threeMaterial.clone();\n            clone.name =\n                newMaterialName + (threeMaterialSet.size > 1 ? '_inst' + i : '');\n            clonedSet.add(clone);\n        }\n        const clonedMaterial = new _material_js__WEBPACK_IMPORTED_MODULE_0__.Material(this[$modelOnUpdate], this[$correlatedSceneGraph].gltf, gltfSourceMaterial, this[$materials].length, false, // Cloned as inactive.\n        this[$variantData], clonedSet);\n        this[$materials].push(clonedMaterial);\n        return clonedMaterial;\n    }\n    createMaterialInstanceForVariant(originalMaterialIndex, newMaterialName, variantName, activateVariant = true) {\n        let variantMaterialInstance = null;\n        for (const primitive of this[$primitivesList]) {\n            const variantData = this[$variantData].get(variantName);\n            // Skips the primitive if the variant already exists.\n            if (variantData != null && primitive.variantInfo.has(variantData.index)) {\n                continue;\n            }\n            // Skips the primitive if the source/original material does not exist.\n            if (primitive.getMaterial(originalMaterialIndex) == null) {\n                continue;\n            }\n            if (!this.hasVariant(variantName)) {\n                this.createVariant(variantName);\n            }\n            if (variantMaterialInstance == null) {\n                variantMaterialInstance =\n                    this[$cloneMaterial](originalMaterialIndex, newMaterialName);\n            }\n            primitive.addVariant(variantMaterialInstance, variantName);\n        }\n        if (activateVariant && variantMaterialInstance != null) {\n            variantMaterialInstance[_material_js__WEBPACK_IMPORTED_MODULE_0__.$setActive](true);\n            this.materials[originalMaterialIndex][_material_js__WEBPACK_IMPORTED_MODULE_0__.$setActive](false);\n            for (const primitive of this[$primitivesList]) {\n                primitive.enableVariant(variantName);\n            }\n        }\n        return variantMaterialInstance;\n    }\n    createVariant(variantName) {\n        if (!this[$variantData].has(variantName)) {\n            // Adds the name if it's not already in the list.\n            this[$variantData].set(variantName, { name: variantName, index: this[$variantData].size });\n        }\n        else {\n            console.warn(`Variant '${variantName}'' already exists`);\n        }\n    }\n    hasVariant(variantName) {\n        return this[$variantData].has(variantName);\n    }\n    setMaterialToVariant(materialIndex, targetVariantName) {\n        if (this[$availableVariants]().find(name => name === targetVariantName) ==\n            null) {\n            console.warn(`Can't add material to '${targetVariantName}', the variant does not exist.'`);\n            return;\n        }\n        if (materialIndex < 0 || materialIndex >= this.materials.length) {\n            console.error(`setMaterialToVariant(): materialIndex is out of bounds.`);\n            return;\n        }\n        for (const primitive of this[$primitivesList]) {\n            const material = primitive.getMaterial(materialIndex);\n            // Ensures the material exists on the primitive before setting it to a\n            // variant.\n            if (material != null) {\n                primitive.addVariant(material, targetVariantName);\n            }\n        }\n    }\n    updateVariantName(currentName, newName) {\n        const variantData = this[$variantData].get(currentName);\n        if (variantData == null) {\n            return;\n        }\n        variantData.name = newName;\n        this[$variantData].set(newName, variantData);\n        this[$variantData].delete(currentName);\n    }\n    deleteVariant(variantName) {\n        const variant = this[$variantData].get(variantName);\n        if (variant == null) {\n            return;\n        }\n        for (const material of this.materials) {\n            if (material.hasVariant(variantName)) {\n                material[_material_js__WEBPACK_IMPORTED_MODULE_0__.$variantSet].delete(variant.index);\n            }\n        }\n        for (const primitive of this[$primitivesList]) {\n            primitive.deleteVariant(variant.index);\n        }\n        this[$variantData].delete(variantName);\n    }\n}\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/model.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/nodes/primitive-node.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/nodes/primitive-node.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $activeMaterialIdx: () => (/* binding */ $activeMaterialIdx),\n/* harmony export */   $children: () => (/* binding */ $children),\n/* harmony export */   $initialMaterialIdx: () => (/* binding */ $initialMaterialIdx),\n/* harmony export */   $loadVariant: () => (/* binding */ $loadVariant),\n/* harmony export */   $prepareVariantsForExport: () => (/* binding */ $prepareVariantsForExport),\n/* harmony export */   $primitives: () => (/* binding */ $primitives),\n/* harmony export */   $switchVariant: () => (/* binding */ $switchVariant),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   PrimitiveNode: () => (/* binding */ PrimitiveNode)\n/* harmony export */ });\n/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../material.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/material.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\nvar _a, _b, _c, _d, _e;\n\n\nconst $materials = Symbol('materials');\nconst $variantToMaterialMap = Symbol('variantToMaterialMap');\nconst $modelVariants = Symbol('modelVariants');\nconst $mesh = Symbol('mesh');\nconst $primitives = Symbol('primitives');\nconst $loadVariant = Symbol('loadVariant');\nconst $prepareVariantsForExport = Symbol('prepareVariantsForExport');\nconst $switchVariant = Symbol('switchVariant');\nconst $children = Symbol('children');\nconst $initialMaterialIdx = Symbol('initialMaterialIdx');\nconst $activeMaterialIdx = Symbol('activeMaterialIdx');\n// Defines the base level node methods and data.\nclass Node {\n    constructor(name) {\n        this.name = '';\n        this[_a] = new Array();\n        this.name = name;\n    }\n}\n_a = $children;\n// Represents a primitive in a glTF mesh.\nclass PrimitiveNode extends Node {\n    constructor(mesh, mvMaterials, modelVariants, correlatedSceneGraph) {\n        super(mesh.name);\n        // Maps glTF material index number to a material that this primitive supports.\n        this[_b] = new Map();\n        // Maps variant index to material.\n        this[_c] = new Map();\n        this[_d] = 0;\n        this[_e] = 0;\n        this[$mesh] = mesh;\n        const { gltf, threeGLTF, threeObjectMap } = correlatedSceneGraph;\n        this[$modelVariants] = modelVariants;\n        this.mesh.userData.variantData = modelVariants;\n        // Captures the primitive's initial material.\n        const materialMappings = threeObjectMap.get(mesh.material);\n        if (materialMappings.materials != null) {\n            this[$initialMaterialIdx] = this[$activeMaterialIdx] =\n                materialMappings.materials;\n        }\n        else {\n            console.error(`Primitive (${mesh.name}) missing initial material reference.`);\n        }\n        // Gets the mesh index from the node.\n        const associations = mesh.userData.associations ||\n            {};\n        if (associations.meshes == null) {\n            console.error('Mesh is missing primitive index association');\n            return;\n        }\n        // The gltf mesh array to sample from.\n        const meshElementArray = gltf['meshes'] || [];\n        // List of primitives under the mesh.\n        const gltfPrimitives = (meshElementArray[associations.meshes].primitives || []);\n        const gltfPrimitive = gltfPrimitives[associations.primitives];\n        if (gltfPrimitive == null) {\n            console.error('Mesh primitive definition is missing.');\n            return;\n        }\n        // Maps the gltfPrimitive default to a material.\n        if (gltfPrimitive.material != null) {\n            this[$materials].set(gltfPrimitive.material, mvMaterials[gltfPrimitive.material]);\n        }\n        else {\n            const defaultIdx = mvMaterials.findIndex((mat) => {\n                return mat.name === 'Default';\n            });\n            if (defaultIdx >= 0) {\n                this[$materials].set(defaultIdx, mvMaterials[defaultIdx]);\n            }\n            else {\n                console.warn('gltfPrimitive has no material!');\n            }\n        }\n        if (gltfPrimitive.extensions &&\n            gltfPrimitive.extensions['KHR_materials_variants']) {\n            const variantsExtension = gltfPrimitive.extensions['KHR_materials_variants'];\n            const extensions = threeGLTF.parser.json.extensions;\n            const variantNames = extensions['KHR_materials_variants'].variants;\n            // Provides definition now that we know there are variants to\n            // support.\n            for (const mapping of variantsExtension.mappings) {\n                const mvMaterial = mvMaterials[mapping.material];\n                // Maps variant indices to Materials.\n                this[$materials].set(mapping.material, mvMaterial);\n                for (const variant of mapping.variants) {\n                    const { name } = variantNames[variant];\n                    this[$variantToMaterialMap].set(variant, mvMaterial);\n                    // Provides variant info for material self lookup.\n                    mvMaterial[_material_js__WEBPACK_IMPORTED_MODULE_0__.$variantIndices]().add(variant);\n                    // Updates the models variant data.\n                    if (!modelVariants.has(name)) {\n                        modelVariants.set(name, { name, index: variant });\n                    }\n                }\n            }\n        }\n    }\n    get mesh() {\n        return this[$mesh];\n    }\n    async setActiveMaterial(material) {\n        const mvMaterial = this[$materials].get(material);\n        if (mvMaterial != null) {\n            this.mesh.material = await mvMaterial[_material_js__WEBPACK_IMPORTED_MODULE_0__.$getLoadedMaterial]();\n            this[$activeMaterialIdx] = material;\n        }\n        return this.mesh.material;\n    }\n    getActiveMaterial() {\n        return this[$materials].get(this[$activeMaterialIdx]);\n    }\n    getMaterial(index) {\n        return this[$materials].get(index);\n    }\n    async enableVariant(name) {\n        if (name == null) {\n            return this.setActiveMaterial(this[$initialMaterialIdx]);\n        }\n        if (this[$variantToMaterialMap] != null && this[$modelVariants].has(name)) {\n            const modelVariants = this[$modelVariants].get(name);\n            return this.enableVariantHelper(modelVariants.index);\n        }\n        return null;\n    }\n    async enableVariantHelper(index) {\n        if (this[$variantToMaterialMap] != null && index != null) {\n            const material = this[$variantToMaterialMap].get(index);\n            if (material != null) {\n                return this.setActiveMaterial(material.index);\n            }\n        }\n        return null;\n    }\n    async instantiateVariants() {\n        if (this[$variantToMaterialMap] == null) {\n            return;\n        }\n        for (const index of this[$variantToMaterialMap].keys()) {\n            const variantMaterial = this.mesh.userData.variantMaterials.get(index);\n            if (variantMaterial.material != null) {\n                continue;\n            }\n            const threeMaterial = await this.enableVariantHelper(index);\n            if (threeMaterial != null) {\n                variantMaterial.material = threeMaterial;\n            }\n        }\n    }\n    get variantInfo() {\n        return this[$variantToMaterialMap];\n    }\n    addVariant(materialVariant, variantName) {\n        if (!this.ensureVariantIsUnused(variantName)) {\n            return false;\n        }\n        // Adds the variant to the model variants if needed.\n        if (!this[$modelVariants].has(variantName)) {\n            this[$modelVariants].set(variantName, { name: variantName, index: this[$modelVariants].size });\n        }\n        const modelVariantData = this[$modelVariants].get(variantName);\n        const variantIndex = modelVariantData.index;\n        // Updates materials mapped to the variant.\n        materialVariant[_material_js__WEBPACK_IMPORTED_MODULE_0__.$variantIndices]().add(variantIndex);\n        // Updates internal mappings.\n        this[$variantToMaterialMap].set(variantIndex, materialVariant);\n        this[$materials].set(materialVariant.index, materialVariant);\n        this.updateVariantUserData(variantIndex, materialVariant);\n        return true;\n    }\n    deleteVariant(variantIndex) {\n        if (this.variantInfo.has(variantIndex)) {\n            this.variantInfo.delete(variantIndex);\n            const userDataMap = this.mesh.userData.variantMaterials;\n            if (userDataMap != null) {\n                userDataMap.delete(variantIndex);\n            }\n        }\n    }\n    updateVariantUserData(variantIndex, materialVariant) {\n        // Adds variants name to material variants set.\n        materialVariant[_material_js__WEBPACK_IMPORTED_MODULE_0__.$variantIndices]().add(variantIndex);\n        this.mesh.userData.variantData = this[$modelVariants];\n        // Updates import data (see VariantMaterialLoaderPlugin.ts).\n        this.mesh.userData.variantMaterials = this.mesh.userData.variantMaterials ||\n            new Map();\n        const map = this.mesh.userData.variantMaterials;\n        map.set(variantIndex, {\n            material: materialVariant[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects].values().next().value,\n            gltfMaterialIndex: materialVariant.index,\n        });\n    }\n    ensureVariantIsUnused(variantName) {\n        const modelVariants = this[$modelVariants].get(variantName);\n        if (modelVariants != null && this.variantInfo.has(modelVariants.index)) {\n            console.warn(`Primitive cannot add variant '${variantName}' for this material, it already exists.`);\n            return false;\n        }\n        return true;\n    }\n}\n_b = $materials, _c = $variantToMaterialMap, _d = $initialMaterialIdx, _e = $activeMaterialIdx;\n//# sourceMappingURL=primitive-node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/nodes/primitive-node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/pbr-metallic-roughness.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/pbr-metallic-roughness.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PBRMetallicRoughness: () => (/* binding */ PBRMetallicRoughness)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _texture_info_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./texture-info.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nclass PBRMetallicRoughness extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.ThreeDOMElement {\n    constructor(onUpdate, gltf, pbrMetallicRoughness, correlatedMaterials) {\n        super(onUpdate, pbrMetallicRoughness, correlatedMaterials);\n        // Assign glTF default values\n        if (pbrMetallicRoughness.baseColorFactor == null) {\n            pbrMetallicRoughness.baseColorFactor = [1, 1, 1, 1];\n        }\n        if (pbrMetallicRoughness.roughnessFactor == null) {\n            pbrMetallicRoughness.roughnessFactor = 1;\n        }\n        if (pbrMetallicRoughness.metallicFactor == null) {\n            pbrMetallicRoughness.metallicFactor = 1;\n        }\n        const { baseColorTexture: gltfBaseColorTexture, metallicRoughnessTexture: gltfMetallicRoughnessTexture } = pbrMetallicRoughness;\n        const { map, metalnessMap } = correlatedMaterials.values().next().value;\n        this[$baseColorTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_0__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_0__.TextureUsage.Base, map, correlatedMaterials, gltf, gltfBaseColorTexture ? gltfBaseColorTexture : null);\n        this[$metallicRoughnessTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_0__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_0__.TextureUsage.MetallicRoughness, metalnessMap, correlatedMaterials, gltf, gltfMetallicRoughnessTexture ? gltfMetallicRoughnessTexture : null);\n    }\n    get [$threeMaterials]() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects];\n    }\n    get baseColorFactor() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject]\n            .baseColorFactor;\n    }\n    get metallicFactor() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject]\n            .metallicFactor;\n    }\n    get roughnessFactor() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject]\n            .roughnessFactor;\n    }\n    get baseColorTexture() {\n        return this[$baseColorTexture];\n    }\n    get metallicRoughnessTexture() {\n        return this[$metallicRoughnessTexture];\n    }\n    setBaseColorFactor(rgba) {\n        const color = new three__WEBPACK_IMPORTED_MODULE_2__.Color();\n        if (rgba instanceof Array) {\n            color.fromArray(rgba);\n        }\n        else {\n            color.set(rgba).convertSRGBToLinear();\n        }\n        for (const material of this[$threeMaterials]) {\n            material.color.set(color);\n            if (rgba instanceof Array) {\n                material.opacity = (rgba)[3];\n            }\n            else {\n                rgba = [0, 0, 0, material.opacity];\n                color.toArray(rgba);\n            }\n        }\n        const pbrMetallicRoughness = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject];\n        pbrMetallicRoughness.baseColorFactor = rgba;\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$onUpdate]();\n    }\n    setMetallicFactor(value) {\n        for (const material of this[$threeMaterials]) {\n            material.metalness = value;\n        }\n        const pbrMetallicRoughness = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject];\n        pbrMetallicRoughness.metallicFactor = value;\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$onUpdate]();\n    }\n    setRoughnessFactor(value) {\n        for (const material of this[$threeMaterials]) {\n            material.roughness = value;\n        }\n        const pbrMetallicRoughness = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject];\n        pbrMetallicRoughness.roughnessFactor = value;\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$onUpdate]();\n    }\n}\n//# sourceMappingURL=pbr-metallic-roughness.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3Bici1tZXRhbGxpYy1yb3VnaG5lc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEI7QUFDZ0M7QUFDeUM7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUNBQW1DLGtFQUFlO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpR0FBaUc7QUFDakgsZ0JBQWdCLG9CQUFvQjtBQUNwQyxzQ0FBc0MseURBQVcsV0FBVywwREFBWTtBQUN4RSw4Q0FBOEMseURBQVcsV0FBVywwREFBWTtBQUNoRjtBQUNBO0FBQ0Esb0JBQW9CLHFFQUFrQjtBQUN0QztBQUNBO0FBQ0Esb0JBQW9CLGdFQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnRUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0VBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHdDQUFLO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdFQUFhO0FBQ3ZEO0FBQ0EsYUFBYSw0REFBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdFQUFhO0FBQ3ZEO0FBQ0EsYUFBYSw0REFBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdFQUFhO0FBQ3ZEO0FBQ0EsYUFBYSw0REFBUztBQUN0QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZnQtbWludGluZy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvZmVhdHVyZXMvc2NlbmUtZ3JhcGgvcGJyLW1ldGFsbGljLXJvdWdobmVzcy5qcz9mNzlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IENvbG9yIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVGV4dHVyZUluZm8sIFRleHR1cmVVc2FnZSB9IGZyb20gJy4vdGV4dHVyZS1pbmZvLmpzJztcbmltcG9ydCB7ICRjb3JyZWxhdGVkT2JqZWN0cywgJG9uVXBkYXRlLCAkc291cmNlT2JqZWN0LCBUaHJlZURPTUVsZW1lbnQgfSBmcm9tICcuL3RocmVlLWRvbS1lbGVtZW50LmpzJztcbmNvbnN0ICR0aHJlZU1hdGVyaWFscyA9IFN5bWJvbCgndGhyZWVNYXRlcmlhbHMnKTtcbmNvbnN0ICRiYXNlQ29sb3JUZXh0dXJlID0gU3ltYm9sKCdiYXNlQ29sb3JUZXh0dXJlJyk7XG5jb25zdCAkbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlID0gU3ltYm9sKCdtZXRhbGxpY1JvdWdobmVzc1RleHR1cmUnKTtcbi8qKlxuICogUEJSIG1hdGVyaWFsIHByb3BlcnRpZXMgZmFjYWRlIGltcGxlbWVudGF0aW9uIGZvciBUaHJlZS5qcyBtYXRlcmlhbHNcbiAqL1xuZXhwb3J0IGNsYXNzIFBCUk1ldGFsbGljUm91Z2huZXNzIGV4dGVuZHMgVGhyZWVET01FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvblVwZGF0ZSwgZ2x0ZiwgcGJyTWV0YWxsaWNSb3VnaG5lc3MsIGNvcnJlbGF0ZWRNYXRlcmlhbHMpIHtcbiAgICAgICAgc3VwZXIob25VcGRhdGUsIHBick1ldGFsbGljUm91Z2huZXNzLCBjb3JyZWxhdGVkTWF0ZXJpYWxzKTtcbiAgICAgICAgLy8gQXNzaWduIGdsVEYgZGVmYXVsdCB2YWx1ZXNcbiAgICAgICAgaWYgKHBick1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvciA9PSBudWxsKSB7XG4gICAgICAgICAgICBwYnJNZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3IgPSBbMSwgMSwgMSwgMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBick1ldGFsbGljUm91Z2huZXNzLnJvdWdobmVzc0ZhY3RvciA9PSBudWxsKSB7XG4gICAgICAgICAgICBwYnJNZXRhbGxpY1JvdWdobmVzcy5yb3VnaG5lc3NGYWN0b3IgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYnJNZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY0ZhY3RvciA9PSBudWxsKSB7XG4gICAgICAgICAgICBwYnJNZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY0ZhY3RvciA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBiYXNlQ29sb3JUZXh0dXJlOiBnbHRmQmFzZUNvbG9yVGV4dHVyZSwgbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlOiBnbHRmTWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlIH0gPSBwYnJNZXRhbGxpY1JvdWdobmVzcztcbiAgICAgICAgY29uc3QgeyBtYXAsIG1ldGFsbmVzc01hcCB9ID0gY29ycmVsYXRlZE1hdGVyaWFscy52YWx1ZXMoKS5uZXh0KCkudmFsdWU7XG4gICAgICAgIHRoaXNbJGJhc2VDb2xvclRleHR1cmVdID0gbmV3IFRleHR1cmVJbmZvKG9uVXBkYXRlLCBUZXh0dXJlVXNhZ2UuQmFzZSwgbWFwLCBjb3JyZWxhdGVkTWF0ZXJpYWxzLCBnbHRmLCBnbHRmQmFzZUNvbG9yVGV4dHVyZSA/IGdsdGZCYXNlQ29sb3JUZXh0dXJlIDogbnVsbCk7XG4gICAgICAgIHRoaXNbJG1ldGFsbGljUm91Z2huZXNzVGV4dHVyZV0gPSBuZXcgVGV4dHVyZUluZm8ob25VcGRhdGUsIFRleHR1cmVVc2FnZS5NZXRhbGxpY1JvdWdobmVzcywgbWV0YWxuZXNzTWFwLCBjb3JyZWxhdGVkTWF0ZXJpYWxzLCBnbHRmLCBnbHRmTWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlID8gZ2x0Zk1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSA6IG51bGwpO1xuICAgIH1cbiAgICBnZXQgWyR0aHJlZU1hdGVyaWFsc10oKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRjb3JyZWxhdGVkT2JqZWN0c107XG4gICAgfVxuICAgIGdldCBiYXNlQ29sb3JGYWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRzb3VyY2VPYmplY3RdXG4gICAgICAgICAgICAuYmFzZUNvbG9yRmFjdG9yO1xuICAgIH1cbiAgICBnZXQgbWV0YWxsaWNGYWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRzb3VyY2VPYmplY3RdXG4gICAgICAgICAgICAubWV0YWxsaWNGYWN0b3I7XG4gICAgfVxuICAgIGdldCByb3VnaG5lc3NGYWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRzb3VyY2VPYmplY3RdXG4gICAgICAgICAgICAucm91Z2huZXNzRmFjdG9yO1xuICAgIH1cbiAgICBnZXQgYmFzZUNvbG9yVGV4dHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJGJhc2VDb2xvclRleHR1cmVdO1xuICAgIH1cbiAgICBnZXQgbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlXTtcbiAgICB9XG4gICAgc2V0QmFzZUNvbG9yRmFjdG9yKHJnYmEpIHtcbiAgICAgICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IoKTtcbiAgICAgICAgaWYgKHJnYmEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgY29sb3IuZnJvbUFycmF5KHJnYmEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29sb3Iuc2V0KHJnYmEpLmNvbnZlcnRTUkdCVG9MaW5lYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IG1hdGVyaWFsIG9mIHRoaXNbJHRocmVlTWF0ZXJpYWxzXSkge1xuICAgICAgICAgICAgbWF0ZXJpYWwuY29sb3Iuc2V0KGNvbG9yKTtcbiAgICAgICAgICAgIGlmIChyZ2JhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5vcGFjaXR5ID0gKHJnYmEpWzNdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmdiYSA9IFswLCAwLCAwLCBtYXRlcmlhbC5vcGFjaXR5XTtcbiAgICAgICAgICAgICAgICBjb2xvci50b0FycmF5KHJnYmEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBick1ldGFsbGljUm91Z2huZXNzID0gdGhpc1skc291cmNlT2JqZWN0XTtcbiAgICAgICAgcGJyTWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yID0gcmdiYTtcbiAgICAgICAgdGhpc1skb25VcGRhdGVdKCk7XG4gICAgfVxuICAgIHNldE1ldGFsbGljRmFjdG9yKHZhbHVlKSB7XG4gICAgICAgIGZvciAoY29uc3QgbWF0ZXJpYWwgb2YgdGhpc1skdGhyZWVNYXRlcmlhbHNdKSB7XG4gICAgICAgICAgICBtYXRlcmlhbC5tZXRhbG5lc3MgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYnJNZXRhbGxpY1JvdWdobmVzcyA9IHRoaXNbJHNvdXJjZU9iamVjdF07XG4gICAgICAgIHBick1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yID0gdmFsdWU7XG4gICAgICAgIHRoaXNbJG9uVXBkYXRlXSgpO1xuICAgIH1cbiAgICBzZXRSb3VnaG5lc3NGYWN0b3IodmFsdWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBtYXRlcmlhbCBvZiB0aGlzWyR0aHJlZU1hdGVyaWFsc10pIHtcbiAgICAgICAgICAgIG1hdGVyaWFsLnJvdWdobmVzcyA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBick1ldGFsbGljUm91Z2huZXNzID0gdGhpc1skc291cmNlT2JqZWN0XTtcbiAgICAgICAgcGJyTWV0YWxsaWNSb3VnaG5lc3Mucm91Z2huZXNzRmFjdG9yID0gdmFsdWU7XG4gICAgICAgIHRoaXNbJG9uVXBkYXRlXSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBici1tZXRhbGxpYy1yb3VnaG5lc3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/pbr-metallic-roughness.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/sampler.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/sampler.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sampler: () => (/* binding */ Sampler)\n/* harmony export */ });\n/* harmony import */ var _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../three-components/gltf-instance/gltf-2.0.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/gltf-2.0.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst isMinFilter = (() => {\n    const minFilterValues = [\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Nearest,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Linear,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.NearestMipmapNearest,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.LinearMipmapLinear,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.NearestMipmapLinear,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.LinearMipmapLinear\n    ];\n    return (value) => minFilterValues.indexOf(value) > -1;\n})();\nconst isMagFilter = (() => {\n    const magFilterValues = [_three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Nearest, _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Linear];\n    return (value) => magFilterValues.indexOf(value) > -1;\n})();\nconst isWrapMode = (() => {\n    const wrapModes = [_three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.ClampToEdge, _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.MirroredRepeat, _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.Repeat];\n    return (value) => wrapModes.indexOf(value) > -1;\n})();\nconst isValidSamplerValue = (property, value) => {\n    switch (property) {\n        case 'minFilter':\n            return isMinFilter(value);\n        case 'magFilter':\n            return isMagFilter(value);\n        case 'wrapS':\n        case 'wrapT':\n            return isWrapMode(value);\n        default:\n            throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n    }\n};\nconst $threeTextures = Symbol('threeTextures');\nconst $setProperty = Symbol('setProperty');\nconst $sourceSampler = Symbol('sourceSampler');\n/**\n * Sampler facade implementation for Three.js textures\n */\nclass Sampler extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.ThreeDOMElement {\n    get [$threeTextures]() {\n        console.assert(this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects] != null && this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects].size > 0, 'Sampler correlated object is undefined');\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects];\n    }\n    get [$sourceSampler]() {\n        console.assert(this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject] != null, 'Sampler source is undefined');\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject];\n    }\n    constructor(onUpdate, texture, gltfSampler) {\n        gltfSampler = gltfSampler !== null && gltfSampler !== void 0 ? gltfSampler : {};\n        // These defaults represent a convergence of glTF defaults for wrap mode and\n        // Three.js defaults for filters. Per glTF 2.0 spec, a renderer may choose\n        // its own defaults for filters.\n        // @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-sampler\n        // @see https://threejs.org/docs/#api/en/textures/Texture\n        if (gltfSampler.minFilter == null) {\n            gltfSampler.minFilter =\n                texture ? texture.minFilter : _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.LinearMipmapLinear;\n        }\n        if (gltfSampler.magFilter == null) {\n            gltfSampler.magFilter =\n                texture ? texture.magFilter : _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Linear;\n        }\n        if (gltfSampler.wrapS == null) {\n            gltfSampler.wrapS = texture ? texture.wrapS : _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.Repeat;\n        }\n        if (gltfSampler.wrapT == null) {\n            gltfSampler.wrapT = texture ? texture.wrapT : _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.Repeat;\n        }\n        super(onUpdate, gltfSampler, new Set(texture ? [texture] : []));\n    }\n    get name() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject].name || '';\n    }\n    get minFilter() {\n        return this[$sourceSampler].minFilter;\n    }\n    get magFilter() {\n        return this[$sourceSampler].magFilter;\n    }\n    get wrapS() {\n        return this[$sourceSampler].wrapS;\n    }\n    get wrapT() {\n        return this[$sourceSampler].wrapT;\n    }\n    setMinFilter(filter) {\n        this[$setProperty]('minFilter', filter);\n    }\n    setMagFilter(filter) {\n        this[$setProperty]('magFilter', filter);\n    }\n    setWrapS(mode) {\n        this[$setProperty]('wrapS', mode);\n    }\n    setWrapT(mode) {\n        this[$setProperty]('wrapT', mode);\n    }\n    [$setProperty](property, value) {\n        const sampler = this[$sourceSampler];\n        if (sampler != null) {\n            if (isValidSamplerValue(property, value)) {\n                sampler[property] = value;\n                for (const texture of this[$threeTextures]) {\n                    texture[property] = value;\n                    texture.needsUpdate = true;\n                }\n            }\n            this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$onUpdate]();\n        }\n    }\n}\n//# sourceMappingURL=sampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/sampler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $materials: () => (/* binding */ $materials),\n/* harmony export */   $usage: () => (/* binding */ $usage),\n/* harmony export */   TextureInfo: () => (/* binding */ TextureInfo),\n/* harmony export */   TextureUsage: () => (/* binding */ TextureUsage)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./image.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/image.js\");\n/* harmony import */ var _texture_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./texture.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\n\n\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nconst $materials = Symbol('materials');\nconst $usage = Symbol('usage');\n// Defines what a texture will be used for.\nvar TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"Base\"] = 0] = \"Base\";\n    TextureUsage[TextureUsage[\"MetallicRoughness\"] = 1] = \"MetallicRoughness\";\n    TextureUsage[TextureUsage[\"Normal\"] = 2] = \"Normal\";\n    TextureUsage[TextureUsage[\"Occlusion\"] = 3] = \"Occlusion\";\n    TextureUsage[TextureUsage[\"Emissive\"] = 4] = \"Emissive\";\n})(TextureUsage || (TextureUsage = {}));\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nclass TextureInfo {\n    constructor(onUpdate, usage, threeTexture, material, gltf, gltfTextureInfo) {\n        this[_a] = null;\n        this[_b] = {\n            rotation: 0,\n            scale: new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(1, 1),\n            offset: new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(0, 0)\n        };\n        // Creates image, sampler, and texture if valid texture info is provided.\n        if (gltfTextureInfo && threeTexture) {\n            const gltfTexture = gltf.textures ? gltf.textures[gltfTextureInfo.index] : null;\n            const sampler = gltfTexture ?\n                (gltf.samplers ? gltf.samplers[gltfTexture.sampler] : null) :\n                null;\n            const image = gltfTexture ?\n                (gltf.images ? gltf.images[gltfTexture.source] : null) :\n                null;\n            this[$transform].rotation = threeTexture.rotation;\n            this[$transform].scale.copy(threeTexture.repeat);\n            this[$transform].offset.copy(threeTexture.offset);\n            this[$texture] =\n                new _texture_js__WEBPACK_IMPORTED_MODULE_1__.Texture(onUpdate, threeTexture, gltfTexture, sampler, image);\n        }\n        this.onUpdate = onUpdate;\n        this[$materials] = material;\n        this[$usage] = usage;\n    }\n    get texture() {\n        return this[$texture];\n    }\n    setTexture(texture) {\n        const threeTexture = texture != null ? texture.source[_image_js__WEBPACK_IMPORTED_MODULE_0__.$threeTexture] : null;\n        let encoding = three__WEBPACK_IMPORTED_MODULE_2__.sRGBEncoding;\n        this[$texture] = texture;\n        if (this[$materials]) {\n            for (const material of this[$materials]) {\n                switch (this[$usage]) {\n                    case TextureUsage.Base:\n                        material.map = threeTexture;\n                        break;\n                    case TextureUsage.MetallicRoughness:\n                        encoding = three__WEBPACK_IMPORTED_MODULE_2__.LinearEncoding;\n                        material.metalnessMap = threeTexture;\n                        material.roughnessMap = threeTexture;\n                        break;\n                    case TextureUsage.Normal:\n                        encoding = three__WEBPACK_IMPORTED_MODULE_2__.LinearEncoding;\n                        material.normalMap = threeTexture;\n                        break;\n                    case TextureUsage.Occlusion:\n                        encoding = three__WEBPACK_IMPORTED_MODULE_2__.LinearEncoding;\n                        material.aoMap = threeTexture;\n                        break;\n                    case TextureUsage.Emissive:\n                        material.emissiveMap = threeTexture;\n                        break;\n                    default:\n                }\n                material.needsUpdate = true;\n            }\n        }\n        if (threeTexture) {\n            // Updates the encoding for the texture, affects all references.\n            threeTexture.encoding = encoding;\n            threeTexture.rotation = this[$transform].rotation;\n            threeTexture.repeat = this[$transform].scale;\n            threeTexture.offset = this[$transform].offset;\n        }\n        this.onUpdate();\n    }\n}\n_a = $texture, _b = $transform;\n//# sourceMappingURL=texture-info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3RleHR1cmUtaW5mby5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzhEO0FBQ25CO0FBQ0o7QUFDdkM7QUFDQTtBQUNPO0FBQ0E7QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQ0FBb0M7QUFDckM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwwQ0FBTztBQUM5Qix3QkFBd0IsMENBQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnREFBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsb0RBQWE7QUFDM0UsdUJBQXVCLCtDQUFZO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaURBQWM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaURBQWM7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGlEQUFjO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3RleHR1cmUtaW5mby5qcz8zOTQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfYSwgX2I7XG5pbXBvcnQgeyBMaW5lYXJFbmNvZGluZywgc1JHQkVuY29kaW5nLCBWZWN0b3IyIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgJHRocmVlVGV4dHVyZSB9IGZyb20gJy4vaW1hZ2UuanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZS5qcyc7XG5jb25zdCAkdGV4dHVyZSA9IFN5bWJvbCgndGV4dHVyZScpO1xuY29uc3QgJHRyYW5zZm9ybSA9IFN5bWJvbCgndHJhbnNmb3JtJyk7XG5leHBvcnQgY29uc3QgJG1hdGVyaWFscyA9IFN5bWJvbCgnbWF0ZXJpYWxzJyk7XG5leHBvcnQgY29uc3QgJHVzYWdlID0gU3ltYm9sKCd1c2FnZScpO1xuLy8gRGVmaW5lcyB3aGF0IGEgdGV4dHVyZSB3aWxsIGJlIHVzZWQgZm9yLlxuZXhwb3J0IHZhciBUZXh0dXJlVXNhZ2U7XG4oZnVuY3Rpb24gKFRleHR1cmVVc2FnZSkge1xuICAgIFRleHR1cmVVc2FnZVtUZXh0dXJlVXNhZ2VbXCJCYXNlXCJdID0gMF0gPSBcIkJhc2VcIjtcbiAgICBUZXh0dXJlVXNhZ2VbVGV4dHVyZVVzYWdlW1wiTWV0YWxsaWNSb3VnaG5lc3NcIl0gPSAxXSA9IFwiTWV0YWxsaWNSb3VnaG5lc3NcIjtcbiAgICBUZXh0dXJlVXNhZ2VbVGV4dHVyZVVzYWdlW1wiTm9ybWFsXCJdID0gMl0gPSBcIk5vcm1hbFwiO1xuICAgIFRleHR1cmVVc2FnZVtUZXh0dXJlVXNhZ2VbXCJPY2NsdXNpb25cIl0gPSAzXSA9IFwiT2NjbHVzaW9uXCI7XG4gICAgVGV4dHVyZVVzYWdlW1RleHR1cmVVc2FnZVtcIkVtaXNzaXZlXCJdID0gNF0gPSBcIkVtaXNzaXZlXCI7XG59KShUZXh0dXJlVXNhZ2UgfHwgKFRleHR1cmVVc2FnZSA9IHt9KSk7XG4vKipcbiAqIFRleHR1cmVJbmZvIGZhY2FkZSBpbXBsZW1lbnRhdGlvbiBmb3IgVGhyZWUuanMgbWF0ZXJpYWxzXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0dXJlSW5mbyB7XG4gICAgY29uc3RydWN0b3Iob25VcGRhdGUsIHVzYWdlLCB0aHJlZVRleHR1cmUsIG1hdGVyaWFsLCBnbHRmLCBnbHRmVGV4dHVyZUluZm8pIHtcbiAgICAgICAgdGhpc1tfYV0gPSBudWxsO1xuICAgICAgICB0aGlzW19iXSA9IHtcbiAgICAgICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWN0b3IyKDEsIDEpLFxuICAgICAgICAgICAgb2Zmc2V0OiBuZXcgVmVjdG9yMigwLCAwKVxuICAgICAgICB9O1xuICAgICAgICAvLyBDcmVhdGVzIGltYWdlLCBzYW1wbGVyLCBhbmQgdGV4dHVyZSBpZiB2YWxpZCB0ZXh0dXJlIGluZm8gaXMgcHJvdmlkZWQuXG4gICAgICAgIGlmIChnbHRmVGV4dHVyZUluZm8gJiYgdGhyZWVUZXh0dXJlKSB7XG4gICAgICAgICAgICBjb25zdCBnbHRmVGV4dHVyZSA9IGdsdGYudGV4dHVyZXMgPyBnbHRmLnRleHR1cmVzW2dsdGZUZXh0dXJlSW5mby5pbmRleF0gOiBudWxsO1xuICAgICAgICAgICAgY29uc3Qgc2FtcGxlciA9IGdsdGZUZXh0dXJlID9cbiAgICAgICAgICAgICAgICAoZ2x0Zi5zYW1wbGVycyA/IGdsdGYuc2FtcGxlcnNbZ2x0ZlRleHR1cmUuc2FtcGxlcl0gOiBudWxsKSA6XG4gICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlID0gZ2x0ZlRleHR1cmUgP1xuICAgICAgICAgICAgICAgIChnbHRmLmltYWdlcyA/IGdsdGYuaW1hZ2VzW2dsdGZUZXh0dXJlLnNvdXJjZV0gOiBudWxsKSA6XG4gICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICAgIHRoaXNbJHRyYW5zZm9ybV0ucm90YXRpb24gPSB0aHJlZVRleHR1cmUucm90YXRpb247XG4gICAgICAgICAgICB0aGlzWyR0cmFuc2Zvcm1dLnNjYWxlLmNvcHkodGhyZWVUZXh0dXJlLnJlcGVhdCk7XG4gICAgICAgICAgICB0aGlzWyR0cmFuc2Zvcm1dLm9mZnNldC5jb3B5KHRocmVlVGV4dHVyZS5vZmZzZXQpO1xuICAgICAgICAgICAgdGhpc1skdGV4dHVyZV0gPVxuICAgICAgICAgICAgICAgIG5ldyBUZXh0dXJlKG9uVXBkYXRlLCB0aHJlZVRleHR1cmUsIGdsdGZUZXh0dXJlLCBzYW1wbGVyLCBpbWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICAgICAgICB0aGlzWyRtYXRlcmlhbHNdID0gbWF0ZXJpYWw7XG4gICAgICAgIHRoaXNbJHVzYWdlXSA9IHVzYWdlO1xuICAgIH1cbiAgICBnZXQgdGV4dHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHRleHR1cmVdO1xuICAgIH1cbiAgICBzZXRUZXh0dXJlKHRleHR1cmUpIHtcbiAgICAgICAgY29uc3QgdGhyZWVUZXh0dXJlID0gdGV4dHVyZSAhPSBudWxsID8gdGV4dHVyZS5zb3VyY2VbJHRocmVlVGV4dHVyZV0gOiBudWxsO1xuICAgICAgICBsZXQgZW5jb2RpbmcgPSBzUkdCRW5jb2Rpbmc7XG4gICAgICAgIHRoaXNbJHRleHR1cmVdID0gdGV4dHVyZTtcbiAgICAgICAgaWYgKHRoaXNbJG1hdGVyaWFsc10pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWF0ZXJpYWwgb2YgdGhpc1skbWF0ZXJpYWxzXSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpc1skdXNhZ2VdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVGV4dHVyZVVzYWdlLkJhc2U6XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5tYXAgPSB0aHJlZVRleHR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUZXh0dXJlVXNhZ2UuTWV0YWxsaWNSb3VnaG5lc3M6XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZyA9IExpbmVhckVuY29kaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwubWV0YWxuZXNzTWFwID0gdGhyZWVUZXh0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwucm91Z2huZXNzTWFwID0gdGhyZWVUZXh0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVGV4dHVyZVVzYWdlLk5vcm1hbDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kaW5nID0gTGluZWFyRW5jb2Rpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5ub3JtYWxNYXAgPSB0aHJlZVRleHR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUZXh0dXJlVXNhZ2UuT2NjbHVzaW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmFvTWFwID0gdGhyZWVUZXh0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVGV4dHVyZVVzYWdlLkVtaXNzaXZlOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSB0aHJlZVRleHR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aHJlZVRleHR1cmUpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZXMgdGhlIGVuY29kaW5nIGZvciB0aGUgdGV4dHVyZSwgYWZmZWN0cyBhbGwgcmVmZXJlbmNlcy5cbiAgICAgICAgICAgIHRocmVlVGV4dHVyZS5lbmNvZGluZyA9IGVuY29kaW5nO1xuICAgICAgICAgICAgdGhyZWVUZXh0dXJlLnJvdGF0aW9uID0gdGhpc1skdHJhbnNmb3JtXS5yb3RhdGlvbjtcbiAgICAgICAgICAgIHRocmVlVGV4dHVyZS5yZXBlYXQgPSB0aGlzWyR0cmFuc2Zvcm1dLnNjYWxlO1xuICAgICAgICAgICAgdGhyZWVUZXh0dXJlLm9mZnNldCA9IHRoaXNbJHRyYW5zZm9ybV0ub2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25VcGRhdGUoKTtcbiAgICB9XG59XG5fYSA9ICR0ZXh0dXJlLCBfYiA9ICR0cmFuc2Zvcm07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0dXJlLWluZm8uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Texture: () => (/* binding */ Texture)\n/* harmony export */ });\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./image.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/image.js\");\n/* harmony import */ var _sampler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sampler.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/sampler.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nconst $image = Symbol('image');\nconst $sampler = Symbol('sampler');\n/**\n * Material facade implementation for Three.js materials\n */\nclass Texture extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.ThreeDOMElement {\n    constructor(onUpdate, threeTexture, gltfTexture = null, gltfSampler = null, gltfImage = null) {\n        super(onUpdate, gltfTexture ? gltfTexture : {}, new Set(threeTexture ? [threeTexture] : []));\n        this[$sampler] = new _sampler_js__WEBPACK_IMPORTED_MODULE_1__.Sampler(onUpdate, threeTexture, gltfSampler);\n        this[$image] = new _image_js__WEBPACK_IMPORTED_MODULE_0__.Image(onUpdate, threeTexture, gltfImage);\n    }\n    get name() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name || '';\n    }\n    set name(name) {\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name = name;\n    }\n    get sampler() {\n        return this[$sampler];\n    }\n    get source() {\n        return this[$image];\n    }\n}\n//# sourceMappingURL=texture.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3RleHR1cmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDbUM7QUFDSTtBQUNpQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sc0JBQXNCLGtFQUFlO0FBQzVDO0FBQ0Esc0RBQXNEO0FBQ3RELDZCQUE2QixnREFBTztBQUNwQywyQkFBMkIsNENBQUs7QUFDaEM7QUFDQTtBQUNBLG9CQUFvQixnRUFBYTtBQUNqQztBQUNBO0FBQ0EsYUFBYSxnRUFBYTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZnQtbWludGluZy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvZmVhdHVyZXMvc2NlbmUtZ3JhcGgvdGV4dHVyZS5qcz9kZTkwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi9pbWFnZS5qcyc7XG5pbXBvcnQgeyBTYW1wbGVyIH0gZnJvbSAnLi9zYW1wbGVyLmpzJztcbmltcG9ydCB7ICRzb3VyY2VPYmplY3QsIFRocmVlRE9NRWxlbWVudCB9IGZyb20gJy4vdGhyZWUtZG9tLWVsZW1lbnQuanMnO1xuY29uc3QgJGltYWdlID0gU3ltYm9sKCdpbWFnZScpO1xuY29uc3QgJHNhbXBsZXIgPSBTeW1ib2woJ3NhbXBsZXInKTtcbi8qKlxuICogTWF0ZXJpYWwgZmFjYWRlIGltcGxlbWVudGF0aW9uIGZvciBUaHJlZS5qcyBtYXRlcmlhbHNcbiAqL1xuZXhwb3J0IGNsYXNzIFRleHR1cmUgZXh0ZW5kcyBUaHJlZURPTUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9uVXBkYXRlLCB0aHJlZVRleHR1cmUsIGdsdGZUZXh0dXJlID0gbnVsbCwgZ2x0ZlNhbXBsZXIgPSBudWxsLCBnbHRmSW1hZ2UgPSBudWxsKSB7XG4gICAgICAgIHN1cGVyKG9uVXBkYXRlLCBnbHRmVGV4dHVyZSA/IGdsdGZUZXh0dXJlIDoge30sIG5ldyBTZXQodGhyZWVUZXh0dXJlID8gW3RocmVlVGV4dHVyZV0gOiBbXSkpO1xuICAgICAgICB0aGlzWyRzYW1wbGVyXSA9IG5ldyBTYW1wbGVyKG9uVXBkYXRlLCB0aHJlZVRleHR1cmUsIGdsdGZTYW1wbGVyKTtcbiAgICAgICAgdGhpc1skaW1hZ2VdID0gbmV3IEltYWdlKG9uVXBkYXRlLCB0aHJlZVRleHR1cmUsIGdsdGZJbWFnZSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skc291cmNlT2JqZWN0XS5uYW1lIHx8ICcnO1xuICAgIH1cbiAgICBzZXQgbmFtZShuYW1lKSB7XG4gICAgICAgIHRoaXNbJHNvdXJjZU9iamVjdF0ubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldCBzYW1wbGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skc2FtcGxlcl07XG4gICAgfVxuICAgIGdldCBzb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRpbWFnZV07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dHVyZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $correlatedObjects: () => (/* binding */ $correlatedObjects),\n/* harmony export */   $onUpdate: () => (/* binding */ $onUpdate),\n/* harmony export */   $sourceObject: () => (/* binding */ $sourceObject),\n/* harmony export */   ThreeDOMElement: () => (/* binding */ ThreeDOMElement)\n/* harmony export */ });\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst $correlatedObjects = Symbol('correlatedObjects');\nconst $sourceObject = Symbol('sourceObject');\nconst $onUpdate = Symbol('onUpdate');\n/**\n * A SerializableThreeDOMElement is the common primitive of all scene graph\n * elements that have been facaded in the host execution context. It adds\n * a common interface to these elements in support of convenient\n * serializability.\n */\nclass ThreeDOMElement {\n    constructor(onUpdate, element, correlatedObjects = null) {\n        this[$onUpdate] = onUpdate;\n        this[$sourceObject] = element;\n        this[$correlatedObjects] = correlatedObjects;\n    }\n}\n//# sourceMappingURL=three-dom-element.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3RocmVlLWRvbS1lbGVtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25mdC1taW50aW5nLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi9mZWF0dXJlcy9zY2VuZS1ncmFwaC90aHJlZS1kb20tZWxlbWVudC5qcz83ZWYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCBjb25zdCAkY29ycmVsYXRlZE9iamVjdHMgPSBTeW1ib2woJ2NvcnJlbGF0ZWRPYmplY3RzJyk7XG5leHBvcnQgY29uc3QgJHNvdXJjZU9iamVjdCA9IFN5bWJvbCgnc291cmNlT2JqZWN0Jyk7XG5leHBvcnQgY29uc3QgJG9uVXBkYXRlID0gU3ltYm9sKCdvblVwZGF0ZScpO1xuLyoqXG4gKiBBIFNlcmlhbGl6YWJsZVRocmVlRE9NRWxlbWVudCBpcyB0aGUgY29tbW9uIHByaW1pdGl2ZSBvZiBhbGwgc2NlbmUgZ3JhcGhcbiAqIGVsZW1lbnRzIHRoYXQgaGF2ZSBiZWVuIGZhY2FkZWQgaW4gdGhlIGhvc3QgZXhlY3V0aW9uIGNvbnRleHQuIEl0IGFkZHNcbiAqIGEgY29tbW9uIGludGVyZmFjZSB0byB0aGVzZSBlbGVtZW50cyBpbiBzdXBwb3J0IG9mIGNvbnZlbmllbnRcbiAqIHNlcmlhbGl6YWJpbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRocmVlRE9NRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Iob25VcGRhdGUsIGVsZW1lbnQsIGNvcnJlbGF0ZWRPYmplY3RzID0gbnVsbCkge1xuICAgICAgICB0aGlzWyRvblVwZGF0ZV0gPSBvblVwZGF0ZTtcbiAgICAgICAgdGhpc1skc291cmNlT2JqZWN0XSA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXNbJGNvcnJlbGF0ZWRPYmplY3RzXSA9IGNvcnJlbGF0ZWRPYmplY3RzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocmVlLWRvbS1lbGVtZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/staging.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/staging.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_ROTATE_DELAY_DEFAULT: () => (/* binding */ AUTO_ROTATE_DELAY_DEFAULT),\n/* harmony export */   StagingMixin: () => (/* binding */ StagingMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var _decorators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../decorators.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/decorators.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/conversions.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _styles_parsers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../styles/parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n// How much the model will rotate per\n// second in radians:\nconst DEFAULT_ROTATION_SPEED = Math.PI / 32;\nconst AUTO_ROTATE_DELAY_DEFAULT = 3000;\nconst rotationRateIntrinsics = {\n    basis: [(0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.degreesToRadians)((0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_4__.numberNode)(DEFAULT_ROTATION_SPEED, 'rad'))],\n    keywords: { auto: [null] }\n};\nconst $autoRotateStartTime = Symbol('autoRotateStartTime');\nconst $radiansPerSecond = Symbol('radiansPerSecond');\nconst $syncRotationRate = Symbol('syncRotationRate');\nconst $onCameraChange = Symbol('onCameraChange');\nconst StagingMixin = (ModelViewerElement) => {\n    var _a, _b, _c;\n    class StagingModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this.autoRotate = false;\n            this.autoRotateDelay = AUTO_ROTATE_DELAY_DEFAULT;\n            this.rotationPerSecond = 'auto';\n            this[_a] = performance.now();\n            this[_b] = 0;\n            this[_c] = (event) => {\n                if (!this.autoRotate) {\n                    return;\n                }\n                if (event.detail.source === 'user-interaction') {\n                    this[$autoRotateStartTime] = performance.now();\n                }\n            };\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this.addEventListener('camera-change', this[$onCameraChange]);\n            this[$autoRotateStartTime] = performance.now();\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            this.removeEventListener('camera-change', this[$onCameraChange]);\n            this[$autoRotateStartTime] = performance.now();\n        }\n        updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('autoRotate')) {\n                this[$autoRotateStartTime] = performance.now();\n            }\n        }\n        [(_a = $autoRotateStartTime, _b = $radiansPerSecond, $syncRotationRate)](style) {\n            this[$radiansPerSecond] = style[0];\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$tick](time, delta) {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$tick](time, delta);\n            if (!this.autoRotate || !this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$getModelIsVisible]() ||\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].isPresenting) {\n                return;\n            }\n            const rotationDelta = Math.min(delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n            if (rotationDelta > 0) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].yaw = this.turntableRotation +\n                    this[$radiansPerSecond] * rotationDelta * 0.001;\n            }\n        }\n        get turntableRotation() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].yaw;\n        }\n        resetTurntableRotation(theta = 0) {\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].yaw = theta;\n        }\n    }\n    _c = $onCameraChange;\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'auto-rotate' })\n    ], StagingModelViewerElement.prototype, \"autoRotate\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'auto-rotate-delay' })\n    ], StagingModelViewerElement.prototype, \"autoRotateDelay\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({ intrinsics: rotationRateIntrinsics, updateHandler: $syncRotationRate }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'rotation-per-second' })\n    ], StagingModelViewerElement.prototype, \"rotationPerSecond\", void 0);\n    return StagingModelViewerElement;\n};\n//# sourceMappingURL=staging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/staging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/model-viewer-base.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $altDefaulted: () => (/* binding */ $altDefaulted),\n/* harmony export */   $announceModelVisibility: () => (/* binding */ $announceModelVisibility),\n/* harmony export */   $ariaLabel: () => (/* binding */ $ariaLabel),\n/* harmony export */   $canvas: () => (/* binding */ $canvas),\n/* harmony export */   $container: () => (/* binding */ $container),\n/* harmony export */   $getLoaded: () => (/* binding */ $getLoaded),\n/* harmony export */   $getModelIsVisible: () => (/* binding */ $getModelIsVisible),\n/* harmony export */   $intersectionObserver: () => (/* binding */ $intersectionObserver),\n/* harmony export */   $isElementInViewport: () => (/* binding */ $isElementInViewport),\n/* harmony export */   $loadedTime: () => (/* binding */ $loadedTime),\n/* harmony export */   $markLoaded: () => (/* binding */ $markLoaded),\n/* harmony export */   $needsRender: () => (/* binding */ $needsRender),\n/* harmony export */   $onModelLoad: () => (/* binding */ $onModelLoad),\n/* harmony export */   $onResize: () => (/* binding */ $onResize),\n/* harmony export */   $progressTracker: () => (/* binding */ $progressTracker),\n/* harmony export */   $renderer: () => (/* binding */ $renderer),\n/* harmony export */   $scene: () => (/* binding */ $scene),\n/* harmony export */   $shouldAttemptPreload: () => (/* binding */ $shouldAttemptPreload),\n/* harmony export */   $statusElement: () => (/* binding */ $statusElement),\n/* harmony export */   $tick: () => (/* binding */ $tick),\n/* harmony export */   $updateSize: () => (/* binding */ $updateSize),\n/* harmony export */   $updateSource: () => (/* binding */ $updateSource),\n/* harmony export */   $updateStatus: () => (/* binding */ $updateStatus),\n/* harmony export */   $userInputElement: () => (/* binding */ $userInputElement),\n/* harmony export */   blobCanvas: () => (/* binding */ blobCanvas),\n/* harmony export */   \"default\": () => (/* binding */ ModelViewerElementBase),\n/* harmony export */   toVector2D: () => (/* binding */ toVector2D),\n/* harmony export */   toVector3D: () => (/* binding */ toVector3D)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/constants.js\");\n/* harmony import */ var _features_environment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./features/environment.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./template.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/template.js\");\n/* harmony import */ var _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./three-components/CachingGLTFLoader.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js\");\n/* harmony import */ var _three_components_ModelScene_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./three-components/ModelScene.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelScene.js\");\n/* harmony import */ var _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./three-components/Renderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _utilities_data_conversion_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utilities/data-conversion.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/data-conversion.js\");\n/* harmony import */ var _utilities_progress_tracker_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utilities/progress-tracker.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/progress-tracker.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n\n\n\n\n\n\n\n\n\n\n\nconst CLEAR_MODEL_TIMEOUT_MS = 1000;\nconst FALLBACK_SIZE_UPDATE_THRESHOLD_MS = 50;\nconst ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD = 0;\nconst UNSIZED_MEDIA_WIDTH = 300;\nconst UNSIZED_MEDIA_HEIGHT = 150;\nconst blobCanvas = document.createElement('canvas');\nconst $fallbackResizeHandler = Symbol('fallbackResizeHandler');\nconst $defaultAriaLabel = Symbol('defaultAriaLabel');\nconst $resizeObserver = Symbol('resizeObserver');\nconst $clearModelTimeout = Symbol('clearModelTimeout');\nconst $onContextLost = Symbol('onContextLost');\nconst $loaded = Symbol('loaded');\nconst $status = Symbol('status');\nconst $onFocus = Symbol('onFocus');\nconst $onBlur = Symbol('onBlur');\nconst $updateSize = Symbol('updateSize');\nconst $intersectionObserver = Symbol('intersectionObserver');\nconst $isElementInViewport = Symbol('isElementInViewport');\nconst $announceModelVisibility = Symbol('announceModelVisibility');\nconst $ariaLabel = Symbol('ariaLabel');\nconst $altDefaulted = Symbol('altDefaulted');\nconst $statusElement = Symbol('statusElement');\nconst $updateStatus = Symbol('updateStatus');\nconst $loadedTime = Symbol('loadedTime');\nconst $updateSource = Symbol('updateSource');\nconst $markLoaded = Symbol('markLoaded');\nconst $container = Symbol('container');\nconst $userInputElement = Symbol('input');\nconst $canvas = Symbol('canvas');\nconst $scene = Symbol('scene');\nconst $needsRender = Symbol('needsRender');\nconst $tick = Symbol('tick');\nconst $onModelLoad = Symbol('onModelLoad');\nconst $onResize = Symbol('onResize');\nconst $renderer = Symbol('renderer');\nconst $progressTracker = Symbol('progressTracker');\nconst $getLoaded = Symbol('getLoaded');\nconst $getModelIsVisible = Symbol('getModelIsVisible');\nconst $shouldAttemptPreload = Symbol('shouldAttemptPreload');\nconst toVector3D = (v) => {\n    return {\n        x: v.x,\n        y: v.y,\n        z: v.z,\n        toString() {\n            return `${this.x}m ${this.y}m ${this.z}m`;\n        }\n    };\n};\nconst toVector2D = (v) => {\n    return {\n        u: v.x,\n        v: v.y,\n        toString() {\n            return `${this.u} ${this.v}`;\n        }\n    };\n};\n/**\n * Definition for a basic <model-viewer> element.\n */\nclass ModelViewerElementBase extends lit__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement {\n    /**\n     * Creates a new ModelViewerElement.\n     */\n    constructor() {\n        super();\n        this.alt = null;\n        this.src = null;\n        this.withCredentials = false;\n        /**\n         * Generates a 3D model schema https://schema.org/3DModel associated with\n         * the loaded src and inserts it into the header of the page for search\n         * engines to crawl.\n         */\n        this.generateSchema = false;\n        this[_a] = false;\n        this[_b] = false;\n        this[_c] = 0;\n        this[_d] = '';\n        this[_e] = null;\n        this[_f] = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_8__.debounce)(() => {\n            const boundingRect = this.getBoundingClientRect();\n            this[$updateSize](boundingRect);\n        }, FALLBACK_SIZE_UPDATE_THRESHOLD_MS);\n        this[_g] = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_8__.debounce)((oldVisibility) => {\n            const newVisibility = this.modelIsVisible;\n            if (newVisibility !== oldVisibility) {\n                this.dispatchEvent(new CustomEvent('model-visibility', { detail: { visible: newVisibility } }));\n            }\n        }, ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD);\n        this[_h] = null;\n        this[_j] = null;\n        this[_k] = new _utilities_progress_tracker_js__WEBPACK_IMPORTED_MODULE_10__.ProgressTracker();\n        this[_l] = () => {\n            this[$statusElement].textContent = this[$status];\n        };\n        this[_m] = () => {\n            this[$statusElement].textContent = '';\n        };\n        this[_o] = (event) => {\n            this.dispatchEvent(new CustomEvent('error', { detail: { type: 'webglcontextlost', sourceError: event.sourceEvent } }));\n        };\n        this.attachShadow({ mode: 'open' });\n        const shadowRoot = this.shadowRoot;\n        (0,_template_js__WEBPACK_IMPORTED_MODULE_4__.makeTemplate)(shadowRoot);\n        this[$container] = shadowRoot.querySelector('.container');\n        this[$userInputElement] =\n            shadowRoot.querySelector('.userInput');\n        this[$canvas] = shadowRoot.querySelector('canvas');\n        this[$statusElement] =\n            shadowRoot.querySelector('#status');\n        this[$defaultAriaLabel] =\n            this[$userInputElement].getAttribute('aria-label');\n        // Because of potential race conditions related to invoking the constructor\n        // we only use the bounding rect to set the initial size if the element is\n        // already connected to the document:\n        let width, height;\n        if (this.isConnected) {\n            const rect = this.getBoundingClientRect();\n            width = rect.width;\n            height = rect.height;\n        }\n        else {\n            width = UNSIZED_MEDIA_WIDTH;\n            height = UNSIZED_MEDIA_HEIGHT;\n        }\n        // Create the underlying ModelScene.\n        this[$scene] =\n            new _three_components_ModelScene_js__WEBPACK_IMPORTED_MODULE_6__.ModelScene({ canvas: this[$canvas], element: this, width, height });\n        // Update initial size on microtask timing so that subclasses have a\n        // chance to initialize\n        Promise.resolve().then(() => {\n            this[$updateSize](this.getBoundingClientRect());\n        });\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_RESIZE_OBSERVER) {\n            // Set up a resize observer so we can scale our canvas\n            // if our <model-viewer> changes\n            this[$resizeObserver] =\n                new ResizeObserver((entries) => {\n                    // Don't resize anything if in AR mode; otherwise the canvas\n                    // scaling to fullscreen on entering AR will clobber the flat/2d\n                    // dimensions of the element.\n                    if (this[$renderer].isPresenting) {\n                        return;\n                    }\n                    for (let entry of entries) {\n                        if (entry.target === this) {\n                            this[$updateSize](entry.contentRect);\n                        }\n                    }\n                });\n        }\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_INTERSECTION_OBSERVER) {\n            this[$intersectionObserver] = new IntersectionObserver(entries => {\n                for (let entry of entries) {\n                    if (entry.target === this) {\n                        const oldVisibility = this.modelIsVisible;\n                        this[$isElementInViewport] = entry.isIntersecting;\n                        this[$announceModelVisibility](oldVisibility);\n                        if (this[$isElementInViewport] && !this.loaded) {\n                            this[$updateSource]();\n                        }\n                    }\n                }\n            }, {\n                root: null,\n                // We used to have margin here, but it was causing animated models below\n                // the fold to steal the frame budget. Weirder still, it would also\n                // cause input events to be swallowed, sometimes for seconds on the\n                // model above the fold, but only when the animated model was completely\n                // below. Setting this margin to zero fixed it.\n                rootMargin: '0px',\n                // With zero threshold, an element adjacent to but not intersecting the\n                // viewport will be reported as intersecting, which will cause\n                // unnecessary rendering. Any slight positive threshold alleviates this.\n                threshold: 0.00001,\n            });\n        }\n        else {\n            // If there is no intersection observer, then all models should be visible\n            // at all times:\n            this[$isElementInViewport] = true;\n        }\n    }\n    static get is() {\n        return 'model-viewer';\n    }\n    /** @export */\n    static set modelCacheSize(value) {\n        _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.CachingGLTFLoader[_three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.$evictionPolicy].evictionThreshold = value;\n    }\n    /** @export */\n    static get modelCacheSize() {\n        return _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.CachingGLTFLoader[_three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.$evictionPolicy].evictionThreshold;\n    }\n    /** @export */\n    static set minimumRenderScale(value) {\n        if (value > 1) {\n            console.warn('<model-viewer> minimumRenderScale has been clamped to a maximum value of 1.');\n        }\n        if (value <= 0) {\n            console.warn('<model-viewer> minimumRenderScale has been clamped to a minimum value of 0.25.');\n        }\n        _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_7__.Renderer.singleton.minScale = value;\n    }\n    /** @export */\n    static get minimumRenderScale() {\n        return _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_7__.Renderer.singleton.minScale;\n    }\n    /** @export */\n    get loaded() {\n        return this[$getLoaded]();\n    }\n    get [(_a = $isElementInViewport, _b = $loaded, _c = $loadedTime, _d = $status, _e = $clearModelTimeout, _f = $fallbackResizeHandler, _g = $announceModelVisibility, _h = $resizeObserver, _j = $intersectionObserver, _k = $progressTracker, $renderer)]() {\n        return _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_7__.Renderer.singleton;\n    }\n    /** @export */\n    get modelIsVisible() {\n        return this[$getModelIsVisible]();\n    }\n    connectedCallback() {\n        super.connectedCallback && super.connectedCallback();\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_RESIZE_OBSERVER) {\n            this[$resizeObserver].observe(this);\n        }\n        else {\n            self.addEventListener('resize', this[$fallbackResizeHandler]);\n        }\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_INTERSECTION_OBSERVER) {\n            this[$intersectionObserver].observe(this);\n        }\n        this.addEventListener('focus', this[$onFocus]);\n        this.addEventListener('blur', this[$onBlur]);\n        const renderer = this[$renderer];\n        renderer.addEventListener('contextlost', this[$onContextLost]);\n        renderer.registerScene(this[$scene]);\n        if (this[$clearModelTimeout] != null) {\n            self.clearTimeout(this[$clearModelTimeout]);\n            this[$clearModelTimeout] = null;\n            // Force an update in case the model has been evicted from our GLTF cache\n            // @see https://lit-element.polymer-project.org/guide/lifecycle#requestupdate\n            this.requestUpdate('src', null);\n        }\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback && super.disconnectedCallback();\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_RESIZE_OBSERVER) {\n            this[$resizeObserver].unobserve(this);\n        }\n        else {\n            self.removeEventListener('resize', this[$fallbackResizeHandler]);\n        }\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_INTERSECTION_OBSERVER) {\n            this[$intersectionObserver].unobserve(this);\n        }\n        this.removeEventListener('focus', this[$onFocus]);\n        this.removeEventListener('blur', this[$onBlur]);\n        const renderer = this[$renderer];\n        renderer.removeEventListener('contextlost', this[$onContextLost]);\n        renderer.unregisterScene(this[$scene]);\n        this[$clearModelTimeout] = self.setTimeout(() => {\n            this[$scene].dispose();\n            this[$clearModelTimeout] = null;\n        }, CLEAR_MODEL_TIMEOUT_MS);\n    }\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        // NOTE(cdata): If a property changes from values A -> B -> A in the space\n        // of a microtask, LitElement/UpdatingElement will notify of a change even\n        // though the value has effectively not changed, so we need to check to make\n        // sure that the value has actually changed before changing the loaded flag.\n        if (changedProperties.has('src')) {\n            if (this.src == null) {\n                this[$loaded] = false;\n                this[$loadedTime] = 0;\n                this[$scene].reset();\n            }\n            else if (this.src !== this[$scene].url) {\n                this[$loaded] = false;\n                this[$loadedTime] = 0;\n                this[$updateSource]();\n            }\n        }\n        if (changedProperties.has('alt')) {\n            this[$userInputElement].setAttribute('aria-label', this[$ariaLabel]);\n        }\n        if (changedProperties.has('withCredentials')) {\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.CachingGLTFLoader.withCredentials = this.withCredentials;\n        }\n        if (changedProperties.has('generateSchema')) {\n            if (this.generateSchema) {\n                this[$scene].updateSchema(this.src);\n            }\n            else {\n                this[$scene].updateSchema(null);\n            }\n        }\n    }\n    /** @export */\n    toDataURL(type, encoderOptions) {\n        return this[$renderer]\n            .displayCanvas(this[$scene])\n            .toDataURL(type, encoderOptions);\n    }\n    /** @export */\n    async toBlob(options) {\n        const mimeType = options ? options.mimeType : undefined;\n        const qualityArgument = options ? options.qualityArgument : undefined;\n        const useIdealAspect = options ? options.idealAspect : undefined;\n        const { width, height, idealAspect, aspect } = this[$scene];\n        const { dpr, scaleFactor } = this[$renderer];\n        let outputWidth = width * scaleFactor * dpr;\n        let outputHeight = height * scaleFactor * dpr;\n        let offsetX = 0;\n        let offsetY = 0;\n        if (useIdealAspect === true) {\n            if (idealAspect > aspect) {\n                const oldHeight = outputHeight;\n                outputHeight = Math.round(outputWidth / idealAspect);\n                offsetY = (oldHeight - outputHeight) / 2;\n            }\n            else {\n                const oldWidth = outputWidth;\n                outputWidth = Math.round(outputHeight * idealAspect);\n                offsetX = (oldWidth - outputWidth) / 2;\n            }\n        }\n        blobCanvas.width = outputWidth;\n        blobCanvas.height = outputHeight;\n        try {\n            return new Promise(async (resolve, reject) => {\n                blobCanvas.getContext('2d').drawImage(this[$renderer].displayCanvas(this[$scene]), offsetX, offsetY, outputWidth, outputHeight, 0, 0, outputWidth, outputHeight);\n                if (blobCanvas.msToBlob) {\n                    // NOTE: msToBlob only returns image/png\n                    // so ensure mimeType is not specified (defaults to image/png)\n                    // or is image/png, otherwise fallback to using toDataURL on IE.\n                    if (!mimeType || mimeType === 'image/png') {\n                        return resolve(blobCanvas.msToBlob());\n                    }\n                }\n                if (!blobCanvas.toBlob) {\n                    return resolve(await (0,_utilities_data_conversion_js__WEBPACK_IMPORTED_MODULE_9__.dataUrlToBlob)(blobCanvas.toDataURL(mimeType, qualityArgument)));\n                }\n                blobCanvas.toBlob((blob) => {\n                    if (!blob) {\n                        return reject(new Error('Unable to retrieve canvas blob'));\n                    }\n                    resolve(blob);\n                }, mimeType, qualityArgument);\n            });\n        }\n        finally {\n            this[$updateSize]({ width, height });\n        }\n        ;\n    }\n    registerRenderer(renderer) {\n        this[$scene].externalRenderer = renderer;\n    }\n    unregisterRenderer() {\n        this[$scene].externalRenderer = null;\n    }\n    get [$ariaLabel]() {\n        return this[$altDefaulted];\n    }\n    get [$altDefaulted]() {\n        return (this.alt == null || this.alt === 'null') ? this[$defaultAriaLabel] :\n            this.alt;\n    }\n    // NOTE(cdata): Although this may seem extremely redundant, it is required in\n    // order to support overloading when TypeScript is compiled to ES5\n    // @see https://github.com/Polymer/lit-element/pull/745\n    // @see https://github.com/microsoft/TypeScript/issues/338\n    [$getLoaded]() {\n        return this[$loaded];\n    }\n    // @see [$getLoaded]\n    [$getModelIsVisible]() {\n        return this.loaded && this[$isElementInViewport];\n    }\n    [$shouldAttemptPreload]() {\n        return !!this.src && this[$isElementInViewport];\n    }\n    /**\n     * Called on initialization and when the resize observer fires.\n     */\n    [$updateSize]({ width, height }) {\n        this[$container].style.width = `${width}px`;\n        this[$container].style.height = `${height}px`;\n        this[$onResize]({ width: parseFloat(width), height: parseFloat(height) });\n    }\n    [$tick](_time, _delta) {\n    }\n    [$markLoaded]() {\n        if (this[$loaded]) {\n            return;\n        }\n        this[$loaded] = true;\n        this[$loadedTime] = performance.now();\n    }\n    [$needsRender]() {\n        this[$scene].queueRender();\n    }\n    [$onModelLoad]() {\n    }\n    [$updateStatus](status) {\n        this[$status] = status;\n        const rootNode = this.getRootNode();\n        // Only change the aria-label if <model-viewer> is currently focused:\n        if (rootNode != null && rootNode.activeElement === this &&\n            this[$statusElement].textContent != status) {\n            this[$statusElement].textContent = status;\n        }\n    }\n    [(_l = $onFocus, _m = $onBlur, $onResize)](e) {\n        this[$scene].setSize(e.width, e.height);\n    }\n    /**\n     * Parses the element for an appropriate source URL and\n     * sets the views to use the new model based.\n     */\n    async [(_o = $onContextLost, $updateSource)]() {\n        const scene = this[$scene];\n        if (this.loaded || !this[$shouldAttemptPreload]() ||\n            this.src === scene.url) {\n            return;\n        }\n        if (this.generateSchema) {\n            scene.updateSchema(this.src);\n        }\n        this[$updateStatus]('Loading');\n        // If we are loading a new model, we need to stop the animation of\n        // the current one (if any is playing). Otherwise, we might lose\n        // the reference to the scene root and running actions start to\n        // throw exceptions and/or behave in unexpected ways:\n        scene.stopAnimation();\n        const updateSourceProgress = this[$progressTracker].beginActivity();\n        const source = this.src;\n        try {\n            const srcUpdated = scene.setSource(source, (progress) => updateSourceProgress((0,_utilities_js__WEBPACK_IMPORTED_MODULE_8__.clamp)(progress, 0, 1) * 0.95));\n            const envUpdated = this[_features_environment_js__WEBPACK_IMPORTED_MODULE_3__.$updateEnvironment]();\n            await Promise.all([srcUpdated, envUpdated]);\n            this[$markLoaded]();\n            this[$onModelLoad]();\n            // Wait for shaders to compile and pixels to be drawn.\n            await new Promise(resolve => {\n                requestAnimationFrame(() => {\n                    requestAnimationFrame(() => {\n                        this.dispatchEvent(new CustomEvent('load', { detail: { url: source } }));\n                        resolve();\n                    });\n                });\n            });\n        }\n        catch (error) {\n            this.dispatchEvent(new CustomEvent('error', { detail: { type: 'loadfailure', sourceError: error } }));\n        }\n        finally {\n            updateSourceProgress(1.0);\n        }\n    }\n}\n__decorate([\n    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: String })\n], ModelViewerElementBase.prototype, \"alt\", void 0);\n__decorate([\n    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: String })\n], ModelViewerElementBase.prototype, \"src\", void 0);\n__decorate([\n    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, attribute: 'with-credentials' })\n], ModelViewerElementBase.prototype, \"withCredentials\", void 0);\n__decorate([\n    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, attribute: 'generate-schema' })\n], ModelViewerElementBase.prototype, \"generateSchema\", void 0);\n//# sourceMappingURL=model-viewer-base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/model-viewer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/model-viewer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelViewerElement: () => (/* binding */ ModelViewerElement)\n/* harmony export */ });\n/* harmony import */ var _features_animation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./features/animation.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/animation.js\");\n/* harmony import */ var _features_annotation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./features/annotation.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/annotation.js\");\n/* harmony import */ var _features_ar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./features/ar.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/ar.js\");\n/* harmony import */ var _features_controls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./features/controls.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/controls.js\");\n/* harmony import */ var _features_environment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./features/environment.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\");\n/* harmony import */ var _features_loading_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./features/loading.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/loading.js\");\n/* harmony import */ var _features_scene_graph_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./features/scene-graph.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph.js\");\n/* harmony import */ var _features_staging_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./features/staging.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/staging.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _utilities_focus_visible_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utilities/focus-visible.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/focus-visible.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n// Uncomment these lines to export PMREM textures in Glitch:\n// export {default as TextureUtils} from './three-components/TextureUtils';\n// export * from 'three';\nconst ModelViewerElement = (0,_features_annotation_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationMixin)((0,_features_scene_graph_js__WEBPACK_IMPORTED_MODULE_6__.SceneGraphMixin)((0,_features_staging_js__WEBPACK_IMPORTED_MODULE_7__.StagingMixin)((0,_features_environment_js__WEBPACK_IMPORTED_MODULE_4__.EnvironmentMixin)((0,_features_controls_js__WEBPACK_IMPORTED_MODULE_3__.ControlsMixin)((0,_features_ar_js__WEBPACK_IMPORTED_MODULE_2__.ARMixin)((0,_features_loading_js__WEBPACK_IMPORTED_MODULE_5__.LoadingMixin)((0,_features_animation_js__WEBPACK_IMPORTED_MODULE_0__.AnimationMixin)((0,_utilities_focus_visible_js__WEBPACK_IMPORTED_MODULE_9__.FocusVisiblePolyfillMixin)(_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])))))))));\ncustomElements.define('model-viewer', ModelViewerElement);\n//# sourceMappingURL=model-viewer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL21vZGVsLXZpZXdlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUQ7QUFDRTtBQUNoQjtBQUNZO0FBQ007QUFDUjtBQUNPO0FBQ1A7QUFDTztBQUNhO0FBQ3pFO0FBQ0EsV0FBVyx5QkFBeUI7QUFDcEM7QUFDTywyQkFBMkIsd0VBQWUsQ0FBQyx5RUFBZSxDQUFDLGtFQUFZLENBQUMsMEVBQWdCLENBQUMsb0VBQWEsQ0FBQyx3REFBTyxDQUFDLGtFQUFZLENBQUMsc0VBQWMsQ0FBQyxzRkFBeUIsQ0FBQyw2REFBc0I7QUFDbE07QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25mdC1taW50aW5nLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi9tb2RlbC12aWV3ZXIuanM/ZGQ4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBBbmltYXRpb25NaXhpbiB9IGZyb20gJy4vZmVhdHVyZXMvYW5pbWF0aW9uLmpzJztcbmltcG9ydCB7IEFubm90YXRpb25NaXhpbiB9IGZyb20gJy4vZmVhdHVyZXMvYW5ub3RhdGlvbi5qcyc7XG5pbXBvcnQgeyBBUk1peGluIH0gZnJvbSAnLi9mZWF0dXJlcy9hci5qcyc7XG5pbXBvcnQgeyBDb250cm9sc01peGluIH0gZnJvbSAnLi9mZWF0dXJlcy9jb250cm9scy5qcyc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudE1peGluIH0gZnJvbSAnLi9mZWF0dXJlcy9lbnZpcm9ubWVudC5qcyc7XG5pbXBvcnQgeyBMb2FkaW5nTWl4aW4gfSBmcm9tICcuL2ZlYXR1cmVzL2xvYWRpbmcuanMnO1xuaW1wb3J0IHsgU2NlbmVHcmFwaE1peGluIH0gZnJvbSAnLi9mZWF0dXJlcy9zY2VuZS1ncmFwaC5qcyc7XG5pbXBvcnQgeyBTdGFnaW5nTWl4aW4gfSBmcm9tICcuL2ZlYXR1cmVzL3N0YWdpbmcuanMnO1xuaW1wb3J0IE1vZGVsVmlld2VyRWxlbWVudEJhc2UgZnJvbSAnLi9tb2RlbC12aWV3ZXItYmFzZS5qcyc7XG5pbXBvcnQgeyBGb2N1c1Zpc2libGVQb2x5ZmlsbE1peGluIH0gZnJvbSAnLi91dGlsaXRpZXMvZm9jdXMtdmlzaWJsZS5qcyc7XG4vLyBVbmNvbW1lbnQgdGhlc2UgbGluZXMgdG8gZXhwb3J0IFBNUkVNIHRleHR1cmVzIGluIEdsaXRjaDpcbi8vIGV4cG9ydCB7ZGVmYXVsdCBhcyBUZXh0dXJlVXRpbHN9IGZyb20gJy4vdGhyZWUtY29tcG9uZW50cy9UZXh0dXJlVXRpbHMnO1xuLy8gZXhwb3J0ICogZnJvbSAndGhyZWUnO1xuZXhwb3J0IGNvbnN0IE1vZGVsVmlld2VyRWxlbWVudCA9IEFubm90YXRpb25NaXhpbihTY2VuZUdyYXBoTWl4aW4oU3RhZ2luZ01peGluKEVudmlyb25tZW50TWl4aW4oQ29udHJvbHNNaXhpbihBUk1peGluKExvYWRpbmdNaXhpbihBbmltYXRpb25NaXhpbihGb2N1c1Zpc2libGVQb2x5ZmlsbE1peGluKE1vZGVsVmlld2VyRWxlbWVudEJhc2UpKSkpKSkpKSk7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ21vZGVsLXZpZXdlcicsIE1vZGVsVmlld2VyRWxlbWVudCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlbC12aWV3ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/model-viewer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/conversions.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   degreesToRadians: () => (/* binding */ degreesToRadians),\n/* harmony export */   lengthToBaseMeters: () => (/* binding */ lengthToBaseMeters),\n/* harmony export */   normalizeUnit: () => (/* binding */ normalizeUnit),\n/* harmony export */   radiansToDegrees: () => (/* binding */ radiansToDegrees)\n/* harmony export */ });\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ensures that a given number is expressed in radians. If the number is already\n * in radians, does nothing. If the value is in degrees, converts it to radians.\n * If the value has no specified unit, the unit is assumed to be radians. If the\n * value is not in radians or degrees, the value is resolved as 0 radians.\n *\n * Also accepts a second argument that is a default value to use if the input\n * numberNode number is NaN or Infinity.\n */\nconst degreesToRadians = (numberNode, fallbackRadianValue = 0) => {\n    let { number, unit } = numberNode;\n    if (!isFinite(number)) {\n        number = fallbackRadianValue;\n        unit = 'rad';\n    }\n    else if (numberNode.unit === 'rad' || numberNode.unit == null) {\n        return numberNode;\n    }\n    const valueIsDegrees = unit === 'deg' && number != null;\n    const value = valueIsDegrees ? number : 0;\n    const radians = value * Math.PI / 180;\n    return { type: 'number', number: radians, unit: 'rad' };\n};\n/**\n * Ensures that a given number is expressed in degrees. If the number is already\n * in degrees, does nothing. If the value is in radians or has no specified\n * unit, converts it to degrees. If the value is not in radians or degrees, the\n * value is resolved as 0 degrees.\n *\n * Also accepts a second argument that is a default value to use if the input\n * numberNode number is NaN or Infinity.\n */\nconst radiansToDegrees = (numberNode, fallbackDegreeValue = 0) => {\n    let { number, unit } = numberNode;\n    if (!isFinite(number)) {\n        number = fallbackDegreeValue;\n        unit = 'deg';\n    }\n    else if (numberNode.unit === 'deg') {\n        return numberNode;\n    }\n    const valueIsRadians = (unit === null || unit === 'rad') && number != null;\n    const value = valueIsRadians ? number : 0;\n    const degrees = value * 180 / Math.PI;\n    return { type: 'number', number: degrees, unit: 'deg' };\n};\n/**\n * Converts a given length to meters. Currently supported input units are\n * meters, centimeters and millimeters.\n *\n * Also accepts a second argument that is a default value to use if the input\n * numberNode number is NaN or Infinity.\n */\nconst lengthToBaseMeters = (numberNode, fallbackMeterValue = 0) => {\n    let { number, unit } = numberNode;\n    if (!isFinite(number)) {\n        number = fallbackMeterValue;\n        unit = 'm';\n    }\n    else if (numberNode.unit === 'm') {\n        return numberNode;\n    }\n    let scale;\n    switch (unit) {\n        default:\n            scale = 1;\n            break;\n        case 'cm':\n            scale = 1 / 100;\n            break;\n        case 'mm':\n            scale = 1 / 1000;\n            break;\n    }\n    const value = scale * number;\n    return { type: 'number', number: value, unit: 'm' };\n};\n/**\n * Normalizes the unit of a given input number so that it is expressed in a\n * preferred unit. For length nodes, the return value will be expressed in\n * meters. For angle nodes, the return value will be expressed in radians.\n *\n * Also takes a fallback number that is used when the number value is not a\n * valid number or when the unit of the given number cannot be normalized.\n */\nconst normalizeUnit = (() => {\n    const identity = (node) => node;\n    const unitNormalizers = {\n        'rad': identity,\n        'deg': degreesToRadians,\n        'm': identity,\n        'mm': lengthToBaseMeters,\n        'cm': lengthToBaseMeters\n    };\n    return (node, fallback = _parsers__WEBPACK_IMPORTED_MODULE_0__.ZERO) => {\n        if (!isFinite(node.number)) {\n            node.number = fallback.number;\n            node.unit = fallback.unit;\n        }\n        const { unit } = node;\n        if (unit == null) {\n            return node;\n        }\n        const normalize = unitNormalizers[unit];\n        if (normalize == null) {\n            return fallback;\n        }\n        return normalize(node);\n    };\n})();\n//# sourceMappingURL=conversions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3N0eWxlcy9jb252ZXJzaW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxVQUFVLGVBQWU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFVBQVUsZUFBZTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxVQUFVLGVBQWU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsMENBQUk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZnQtbWludGluZy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvc3R5bGVzL2NvbnZlcnNpb25zLmpzP2FiOGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgWkVSTyB9IGZyb20gJy4vcGFyc2Vycyc7XG4vKipcbiAqIEVuc3VyZXMgdGhhdCBhIGdpdmVuIG51bWJlciBpcyBleHByZXNzZWQgaW4gcmFkaWFucy4gSWYgdGhlIG51bWJlciBpcyBhbHJlYWR5XG4gKiBpbiByYWRpYW5zLCBkb2VzIG5vdGhpbmcuIElmIHRoZSB2YWx1ZSBpcyBpbiBkZWdyZWVzLCBjb252ZXJ0cyBpdCB0byByYWRpYW5zLlxuICogSWYgdGhlIHZhbHVlIGhhcyBubyBzcGVjaWZpZWQgdW5pdCwgdGhlIHVuaXQgaXMgYXNzdW1lZCB0byBiZSByYWRpYW5zLiBJZiB0aGVcbiAqIHZhbHVlIGlzIG5vdCBpbiByYWRpYW5zIG9yIGRlZ3JlZXMsIHRoZSB2YWx1ZSBpcyByZXNvbHZlZCBhcyAwIHJhZGlhbnMuXG4gKlxuICogQWxzbyBhY2NlcHRzIGEgc2Vjb25kIGFyZ3VtZW50IHRoYXQgaXMgYSBkZWZhdWx0IHZhbHVlIHRvIHVzZSBpZiB0aGUgaW5wdXRcbiAqIG51bWJlck5vZGUgbnVtYmVyIGlzIE5hTiBvciBJbmZpbml0eS5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZ3JlZXNUb1JhZGlhbnMgPSAobnVtYmVyTm9kZSwgZmFsbGJhY2tSYWRpYW5WYWx1ZSA9IDApID0+IHtcbiAgICBsZXQgeyBudW1iZXIsIHVuaXQgfSA9IG51bWJlck5vZGU7XG4gICAgaWYgKCFpc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgIG51bWJlciA9IGZhbGxiYWNrUmFkaWFuVmFsdWU7XG4gICAgICAgIHVuaXQgPSAncmFkJztcbiAgICB9XG4gICAgZWxzZSBpZiAobnVtYmVyTm9kZS51bml0ID09PSAncmFkJyB8fCBudW1iZXJOb2RlLnVuaXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVtYmVyTm9kZTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVJc0RlZ3JlZXMgPSB1bml0ID09PSAnZGVnJyAmJiBudW1iZXIgIT0gbnVsbDtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlSXNEZWdyZWVzID8gbnVtYmVyIDogMDtcbiAgICBjb25zdCByYWRpYW5zID0gdmFsdWUgKiBNYXRoLlBJIC8gMTgwO1xuICAgIHJldHVybiB7IHR5cGU6ICdudW1iZXInLCBudW1iZXI6IHJhZGlhbnMsIHVuaXQ6ICdyYWQnIH07XG59O1xuLyoqXG4gKiBFbnN1cmVzIHRoYXQgYSBnaXZlbiBudW1iZXIgaXMgZXhwcmVzc2VkIGluIGRlZ3JlZXMuIElmIHRoZSBudW1iZXIgaXMgYWxyZWFkeVxuICogaW4gZGVncmVlcywgZG9lcyBub3RoaW5nLiBJZiB0aGUgdmFsdWUgaXMgaW4gcmFkaWFucyBvciBoYXMgbm8gc3BlY2lmaWVkXG4gKiB1bml0LCBjb252ZXJ0cyBpdCB0byBkZWdyZWVzLiBJZiB0aGUgdmFsdWUgaXMgbm90IGluIHJhZGlhbnMgb3IgZGVncmVlcywgdGhlXG4gKiB2YWx1ZSBpcyByZXNvbHZlZCBhcyAwIGRlZ3JlZXMuXG4gKlxuICogQWxzbyBhY2NlcHRzIGEgc2Vjb25kIGFyZ3VtZW50IHRoYXQgaXMgYSBkZWZhdWx0IHZhbHVlIHRvIHVzZSBpZiB0aGUgaW5wdXRcbiAqIG51bWJlck5vZGUgbnVtYmVyIGlzIE5hTiBvciBJbmZpbml0eS5cbiAqL1xuZXhwb3J0IGNvbnN0IHJhZGlhbnNUb0RlZ3JlZXMgPSAobnVtYmVyTm9kZSwgZmFsbGJhY2tEZWdyZWVWYWx1ZSA9IDApID0+IHtcbiAgICBsZXQgeyBudW1iZXIsIHVuaXQgfSA9IG51bWJlck5vZGU7XG4gICAgaWYgKCFpc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgIG51bWJlciA9IGZhbGxiYWNrRGVncmVlVmFsdWU7XG4gICAgICAgIHVuaXQgPSAnZGVnJztcbiAgICB9XG4gICAgZWxzZSBpZiAobnVtYmVyTm9kZS51bml0ID09PSAnZGVnJykge1xuICAgICAgICByZXR1cm4gbnVtYmVyTm9kZTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVJc1JhZGlhbnMgPSAodW5pdCA9PT0gbnVsbCB8fCB1bml0ID09PSAncmFkJykgJiYgbnVtYmVyICE9IG51bGw7XG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZUlzUmFkaWFucyA/IG51bWJlciA6IDA7XG4gICAgY29uc3QgZGVncmVlcyA9IHZhbHVlICogMTgwIC8gTWF0aC5QSTtcbiAgICByZXR1cm4geyB0eXBlOiAnbnVtYmVyJywgbnVtYmVyOiBkZWdyZWVzLCB1bml0OiAnZGVnJyB9O1xufTtcbi8qKlxuICogQ29udmVydHMgYSBnaXZlbiBsZW5ndGggdG8gbWV0ZXJzLiBDdXJyZW50bHkgc3VwcG9ydGVkIGlucHV0IHVuaXRzIGFyZVxuICogbWV0ZXJzLCBjZW50aW1ldGVycyBhbmQgbWlsbGltZXRlcnMuXG4gKlxuICogQWxzbyBhY2NlcHRzIGEgc2Vjb25kIGFyZ3VtZW50IHRoYXQgaXMgYSBkZWZhdWx0IHZhbHVlIHRvIHVzZSBpZiB0aGUgaW5wdXRcbiAqIG51bWJlck5vZGUgbnVtYmVyIGlzIE5hTiBvciBJbmZpbml0eS5cbiAqL1xuZXhwb3J0IGNvbnN0IGxlbmd0aFRvQmFzZU1ldGVycyA9IChudW1iZXJOb2RlLCBmYWxsYmFja01ldGVyVmFsdWUgPSAwKSA9PiB7XG4gICAgbGV0IHsgbnVtYmVyLCB1bml0IH0gPSBudW1iZXJOb2RlO1xuICAgIGlmICghaXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICBudW1iZXIgPSBmYWxsYmFja01ldGVyVmFsdWU7XG4gICAgICAgIHVuaXQgPSAnbSc7XG4gICAgfVxuICAgIGVsc2UgaWYgKG51bWJlck5vZGUudW5pdCA9PT0gJ20nKSB7XG4gICAgICAgIHJldHVybiBudW1iZXJOb2RlO1xuICAgIH1cbiAgICBsZXQgc2NhbGU7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzY2FsZSA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY20nOlxuICAgICAgICAgICAgc2NhbGUgPSAxIC8gMTAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgIHNjYWxlID0gMSAvIDEwMDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBzY2FsZSAqIG51bWJlcjtcbiAgICByZXR1cm4geyB0eXBlOiAnbnVtYmVyJywgbnVtYmVyOiB2YWx1ZSwgdW5pdDogJ20nIH07XG59O1xuLyoqXG4gKiBOb3JtYWxpemVzIHRoZSB1bml0IG9mIGEgZ2l2ZW4gaW5wdXQgbnVtYmVyIHNvIHRoYXQgaXQgaXMgZXhwcmVzc2VkIGluIGFcbiAqIHByZWZlcnJlZCB1bml0LiBGb3IgbGVuZ3RoIG5vZGVzLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgZXhwcmVzc2VkIGluXG4gKiBtZXRlcnMuIEZvciBhbmdsZSBub2RlcywgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlIGV4cHJlc3NlZCBpbiByYWRpYW5zLlxuICpcbiAqIEFsc28gdGFrZXMgYSBmYWxsYmFjayBudW1iZXIgdGhhdCBpcyB1c2VkIHdoZW4gdGhlIG51bWJlciB2YWx1ZSBpcyBub3QgYVxuICogdmFsaWQgbnVtYmVyIG9yIHdoZW4gdGhlIHVuaXQgb2YgdGhlIGdpdmVuIG51bWJlciBjYW5ub3QgYmUgbm9ybWFsaXplZC5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVVuaXQgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGlkZW50aXR5ID0gKG5vZGUpID0+IG5vZGU7XG4gICAgY29uc3QgdW5pdE5vcm1hbGl6ZXJzID0ge1xuICAgICAgICAncmFkJzogaWRlbnRpdHksXG4gICAgICAgICdkZWcnOiBkZWdyZWVzVG9SYWRpYW5zLFxuICAgICAgICAnbSc6IGlkZW50aXR5LFxuICAgICAgICAnbW0nOiBsZW5ndGhUb0Jhc2VNZXRlcnMsXG4gICAgICAgICdjbSc6IGxlbmd0aFRvQmFzZU1ldGVyc1xuICAgIH07XG4gICAgcmV0dXJuIChub2RlLCBmYWxsYmFjayA9IFpFUk8pID0+IHtcbiAgICAgICAgaWYgKCFpc0Zpbml0ZShub2RlLm51bWJlcikpIHtcbiAgICAgICAgICAgIG5vZGUubnVtYmVyID0gZmFsbGJhY2subnVtYmVyO1xuICAgICAgICAgICAgbm9kZS51bml0ID0gZmFsbGJhY2sudW5pdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVuaXQgfSA9IG5vZGU7XG4gICAgICAgIGlmICh1bml0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZSA9IHVuaXROb3JtYWxpemVyc1t1bml0XTtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShub2RlKTtcbiAgICB9O1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnNpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/deserializers.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/deserializers.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enumerationDeserializer: () => (/* binding */ enumerationDeserializer)\n/* harmony export */ });\n/* harmony import */ var _parsers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * For our purposes, an enumeration is a fixed set of CSS-expression-compatible\n * names. When serialized, a selected subset of the members may be specified as\n * whitespace-separated strings. An enumeration deserializer is a function that\n * parses a serialized subset of an enumeration and returns any members that are\n * found as a Set.\n *\n * The following example will produce a deserializer for the days of the\n * week:\n *\n * const deserializeDaysOfTheWeek = enumerationDeserializer([\n *   'Monday',\n *   'Tuesday',\n *   'Wednesday',\n *   'Thursday',\n *   'Friday',\n *   'Saturday',\n *   'Sunday'\n * ]);\n */\nconst enumerationDeserializer = (allowedNames) => (valueString) => {\n    try {\n        const expressions = (0,_parsers_js__WEBPACK_IMPORTED_MODULE_0__.parseExpressions)(valueString);\n        const names = (expressions.length ? expressions[0].terms : [])\n            .filter((valueNode) => valueNode && valueNode.type === 'ident')\n            .map(valueNode => valueNode.value)\n            .filter(name => allowedNames.indexOf(name) > -1);\n        // NOTE(cdata): IE11 does not support constructing a Set directly from\n        // an iterable, so we need to manually add all the items:\n        const result = new Set();\n        for (const name of names) {\n            result.add(name);\n        }\n        return result;\n    }\n    catch (_error) {\n    }\n    return new Set();\n};\n//# sourceMappingURL=deserializers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3N0eWxlcy9kZXNlcmlhbGl6ZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDRCQUE0Qiw2REFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25mdC1taW50aW5nLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi9zdHlsZXMvZGVzZXJpYWxpemVycy5qcz81Y2JkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IHBhcnNlRXhwcmVzc2lvbnMgfSBmcm9tICcuL3BhcnNlcnMuanMnO1xuLyoqXG4gKiBGb3Igb3VyIHB1cnBvc2VzLCBhbiBlbnVtZXJhdGlvbiBpcyBhIGZpeGVkIHNldCBvZiBDU1MtZXhwcmVzc2lvbi1jb21wYXRpYmxlXG4gKiBuYW1lcy4gV2hlbiBzZXJpYWxpemVkLCBhIHNlbGVjdGVkIHN1YnNldCBvZiB0aGUgbWVtYmVycyBtYXkgYmUgc3BlY2lmaWVkIGFzXG4gKiB3aGl0ZXNwYWNlLXNlcGFyYXRlZCBzdHJpbmdzLiBBbiBlbnVtZXJhdGlvbiBkZXNlcmlhbGl6ZXIgaXMgYSBmdW5jdGlvbiB0aGF0XG4gKiBwYXJzZXMgYSBzZXJpYWxpemVkIHN1YnNldCBvZiBhbiBlbnVtZXJhdGlvbiBhbmQgcmV0dXJucyBhbnkgbWVtYmVycyB0aGF0IGFyZVxuICogZm91bmQgYXMgYSBTZXQuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHdpbGwgcHJvZHVjZSBhIGRlc2VyaWFsaXplciBmb3IgdGhlIGRheXMgb2YgdGhlXG4gKiB3ZWVrOlxuICpcbiAqIGNvbnN0IGRlc2VyaWFsaXplRGF5c09mVGhlV2VlayA9IGVudW1lcmF0aW9uRGVzZXJpYWxpemVyKFtcbiAqICAgJ01vbmRheScsXG4gKiAgICdUdWVzZGF5JyxcbiAqICAgJ1dlZG5lc2RheScsXG4gKiAgICdUaHVyc2RheScsXG4gKiAgICdGcmlkYXknLFxuICogICAnU2F0dXJkYXknLFxuICogICAnU3VuZGF5J1xuICogXSk7XG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtZXJhdGlvbkRlc2VyaWFsaXplciA9IChhbGxvd2VkTmFtZXMpID0+ICh2YWx1ZVN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGV4cHJlc3Npb25zID0gcGFyc2VFeHByZXNzaW9ucyh2YWx1ZVN0cmluZyk7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gKGV4cHJlc3Npb25zLmxlbmd0aCA/IGV4cHJlc3Npb25zWzBdLnRlcm1zIDogW10pXG4gICAgICAgICAgICAuZmlsdGVyKCh2YWx1ZU5vZGUpID0+IHZhbHVlTm9kZSAmJiB2YWx1ZU5vZGUudHlwZSA9PT0gJ2lkZW50JylcbiAgICAgICAgICAgIC5tYXAodmFsdWVOb2RlID0+IHZhbHVlTm9kZS52YWx1ZSlcbiAgICAgICAgICAgIC5maWx0ZXIobmFtZSA9PiBhbGxvd2VkTmFtZXMuaW5kZXhPZihuYW1lKSA+IC0xKTtcbiAgICAgICAgLy8gTk9URShjZGF0YSk6IElFMTEgZG9lcyBub3Qgc3VwcG9ydCBjb25zdHJ1Y3RpbmcgYSBTZXQgZGlyZWN0bHkgZnJvbVxuICAgICAgICAvLyBhbiBpdGVyYWJsZSwgc28gd2UgbmVlZCB0byBtYW51YWxseSBhZGQgYWxsIHRoZSBpdGVtczpcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbmFtZXMpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKF9lcnJvcikge1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNldCgpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlc2VyaWFsaXplcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/deserializers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/evaluators.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/evaluators.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalcEvaluator: () => (/* binding */ CalcEvaluator),\n/* harmony export */   EnvEvaluator: () => (/* binding */ EnvEvaluator),\n/* harmony export */   Evaluator: () => (/* binding */ Evaluator),\n/* harmony export */   OperatorEvaluator: () => (/* binding */ OperatorEvaluator),\n/* harmony export */   PercentageEvaluator: () => (/* binding */ PercentageEvaluator),\n/* harmony export */   StyleEvaluator: () => (/* binding */ StyleEvaluator)\n/* harmony export */ });\n/* harmony import */ var _conversions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./conversions */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c;\n\n\nconst $evaluate = Symbol('evaluate');\nconst $lastValue = Symbol('lastValue');\n/**\n * An Evaluator is used to derive a computed style from part (or all) of a CSS\n * expression AST. This construct is particularly useful for complex ASTs\n * containing function calls such as calc, var and env. Such styles could be\n * costly to re-evaluate on every frame (and in some cases we may try to do\n * that). The Evaluator construct allows us to mark sub-trees of the AST as\n * constant, so that only the dynamic parts are re-evaluated. It also separates\n * one-time AST preparation work from work that necessarily has to happen upon\n * each evaluation.\n */\nclass Evaluator {\n    constructor() {\n        this[_a] = null;\n    }\n    /**\n     * An Evaluatable is a NumberNode or an Evaluator that evaluates a NumberNode\n     * as the result of invoking its evaluate method. This is mainly used to\n     * ensure that CSS function nodes are cast to the corresponding Evaluators\n     * that will resolve the result of the function, but is also used to ensure\n     * that a percentage nested at arbitrary depth in the expression will always\n     * be evaluated against the correct basis.\n     */\n    static evaluatableFor(node, basis = _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO) {\n        if (node instanceof Evaluator) {\n            return node;\n        }\n        if (node.type === 'number') {\n            if (node.unit === '%') {\n                return new PercentageEvaluator(node, basis);\n            }\n            return node;\n        }\n        switch (node.name.value) {\n            case 'calc':\n                return new CalcEvaluator(node, basis);\n            case 'env':\n                return new EnvEvaluator(node);\n        }\n        return _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n    }\n    /**\n     * If the input is an Evaluator, returns the result of evaluating it.\n     * Otherwise, returns the input.\n     *\n     * This is a helper to aide in resolving a NumberNode without conditionally\n     * checking if the Evaluatable is an Evaluator everywhere.\n     */\n    static evaluate(evaluatable) {\n        if (evaluatable instanceof Evaluator) {\n            return evaluatable.evaluate();\n        }\n        return evaluatable;\n    }\n    /**\n     * If the input is an Evaluator, returns the value of its isConstant property.\n     * Returns true for all other input values.\n     */\n    static isConstant(evaluatable) {\n        if (evaluatable instanceof Evaluator) {\n            return evaluatable.isConstant;\n        }\n        return true;\n    }\n    /**\n     * This method applies a set of structured intrinsic metadata to an evaluated\n     * result from a parsed CSS-like string of expressions. Intrinsics provide\n     * sufficient metadata (e.g., basis values, analogs for keywords) such that\n     * omitted values in the input string can be backfilled, and keywords can be\n     * converted to concrete numbers.\n     *\n     * The result of applying intrinsics is a tuple of NumberNode values whose\n     * units match the units used by the basis of the intrinsics.\n     *\n     * The following is a high-level description of how intrinsics are applied:\n     *\n     *  1. Determine the value of 'auto' for the current term\n     *  2. If there is no corresponding input value for this term, substitute the\n     *     'auto' value.\n     *  3. If the term is an IdentNode, treat it as a keyword and perform the\n     *     appropriate substitution.\n     *  4. If the term is still null, fallback to the 'auto' value\n     *  5. If the term is a percentage, apply it to the basis and return that\n     *     value\n     *  6. Normalize the unit of the term\n     *  7. If the term's unit does not match the basis unit, return the basis\n     *     value\n     *  8. Return the term as is\n     */\n    static applyIntrinsics(evaluated, intrinsics) {\n        const { basis, keywords } = intrinsics;\n        const { auto } = keywords;\n        return basis.map((basisNode, index) => {\n            // Use an auto value if we have it, otherwise the auto value is the basis:\n            const autoSubstituteNode = auto[index] == null ? basisNode : auto[index];\n            // If the evaluated nodes do not have a node at the current\n            // index, fallback to the \"auto\" substitute right away:\n            let evaluatedNode = evaluated[index] ? evaluated[index] : autoSubstituteNode;\n            // Any ident node is considered a keyword:\n            if (evaluatedNode.type === 'ident') {\n                const keyword = evaluatedNode.value;\n                // Substitute any keywords for concrete values first:\n                if (keyword in keywords) {\n                    evaluatedNode = keywords[keyword][index];\n                }\n            }\n            // If we don't have a NumberNode at this point, fall back to whatever\n            // is specified for auto:\n            if (evaluatedNode == null || evaluatedNode.type === 'ident') {\n                evaluatedNode = autoSubstituteNode;\n            }\n            // For percentages, we always apply the percentage to the basis value:\n            if (evaluatedNode.unit === '%') {\n                return (0,_parsers__WEBPACK_IMPORTED_MODULE_1__.numberNode)(evaluatedNode.number / 100 * basisNode.number, basisNode.unit);\n            }\n            // Otherwise, normalize whatever we have:\n            evaluatedNode = (0,_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(evaluatedNode, basisNode);\n            // If the normalized units do not match, return the basis as a fallback:\n            if (evaluatedNode.unit !== basisNode.unit) {\n                return basisNode;\n            }\n            // Finally, return the evaluated node with intrinsics applied:\n            return evaluatedNode;\n        });\n    }\n    /**\n     * If true, the Evaluator will only evaluate its AST one time. If false, the\n     * Evaluator will re-evaluate the AST each time that the public evaluate\n     * method is invoked.\n     */\n    get isConstant() {\n        return false;\n    }\n    /**\n     * Evaluate the Evaluator and return the result. If the Evaluator is constant,\n     * the corresponding AST will only be evaluated once, and the result of\n     * evaluating it the first time will be returned on all subsequent\n     * evaluations.\n     */\n    evaluate() {\n        if (!this.isConstant || this[$lastValue] == null) {\n            this[$lastValue] = this[$evaluate]();\n        }\n        return this[$lastValue];\n    }\n}\n_a = $lastValue;\nconst $percentage = Symbol('percentage');\nconst $basis = Symbol('basis');\n/**\n * A PercentageEvaluator scales a given basis value by a given percentage value.\n * The evaluated result is always considered to be constant.\n */\nclass PercentageEvaluator extends Evaluator {\n    constructor(percentage, basis) {\n        super();\n        this[$percentage] = percentage;\n        this[$basis] = basis;\n    }\n    get isConstant() {\n        return true;\n    }\n    [$evaluate]() {\n        return (0,_parsers__WEBPACK_IMPORTED_MODULE_1__.numberNode)(this[$percentage].number / 100 * this[$basis].number, this[$basis].unit);\n    }\n}\nconst $identNode = Symbol('identNode');\n/**\n * Evaluator for CSS-like env() functions. Currently, only one environment\n * variable is accepted as an argument for such functions: window-scroll-y.\n *\n * The env() Evaluator is explicitly dynamic because it always refers to\n * external state that changes as the user scrolls, so it should always be\n * re-evaluated to ensure we get the most recent value.\n *\n * Some important notes about this feature include:\n *\n *  - There is no such thing as a \"window-scroll-y\" CSS environment variable in\n *    any stable browser at the time that this comment is being written.\n *  - The actual CSS env() function accepts a second argument as a fallback for\n *    the case that the specified first argument isn't set; our syntax does not\n *    support this second argument.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/env\n */\nclass EnvEvaluator extends Evaluator {\n    constructor(envFunction) {\n        super();\n        this[_b] = null;\n        const identNode = envFunction.arguments.length ? envFunction.arguments[0].terms[0] : null;\n        if (identNode != null && identNode.type === 'ident') {\n            this[$identNode] = identNode;\n        }\n    }\n    get isConstant() {\n        return false;\n    }\n    ;\n    [(_b = $identNode, $evaluate)]() {\n        if (this[$identNode] != null) {\n            switch (this[$identNode].value) {\n                case 'window-scroll-y':\n                    const verticalScrollPosition = window.pageYOffset;\n                    const verticalScrollMax = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\n                    const scrollY = verticalScrollPosition /\n                        (verticalScrollMax - window.innerHeight) ||\n                        0;\n                    return { type: 'number', number: scrollY, unit: null };\n            }\n        }\n        return _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n    }\n}\nconst IS_MULTIPLICATION_RE = /[\\*\\/]/;\nconst $evaluator = Symbol('evaluator');\n/**\n * Evaluator for CSS-like calc() functions. Our implementation of calc()\n * evaluation currently support nested function calls, an unlimited number of\n * terms, and all four algebraic operators (+, -, * and /).\n *\n * The Evaluator is marked as constant unless the calc expression contains an\n * internal env expression at any depth, in which case it will be marked as\n * dynamic.\n *\n * @see https://www.w3.org/TR/css-values-3/#calc-syntax\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/calc\n */\nclass CalcEvaluator extends Evaluator {\n    constructor(calcFunction, basis = _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO) {\n        super();\n        this[_c] = null;\n        if (calcFunction.arguments.length !== 1) {\n            return;\n        }\n        const terms = calcFunction.arguments[0].terms.slice();\n        const secondOrderTerms = [];\n        while (terms.length) {\n            const term = terms.shift();\n            if (secondOrderTerms.length > 0) {\n                const previousTerm = secondOrderTerms[secondOrderTerms.length - 1];\n                if (previousTerm.type === 'operator' &&\n                    IS_MULTIPLICATION_RE.test(previousTerm.value)) {\n                    const operator = secondOrderTerms.pop();\n                    const leftValue = secondOrderTerms.pop();\n                    if (leftValue == null) {\n                        return;\n                    }\n                    secondOrderTerms.push(new OperatorEvaluator(operator, Evaluator.evaluatableFor(leftValue, basis), Evaluator.evaluatableFor(term, basis)));\n                    continue;\n                }\n            }\n            secondOrderTerms.push(term.type === 'operator' ? term :\n                Evaluator.evaluatableFor(term, basis));\n        }\n        while (secondOrderTerms.length > 2) {\n            const [left, operator, right] = secondOrderTerms.splice(0, 3);\n            if (operator.type !== 'operator') {\n                return;\n            }\n            secondOrderTerms.unshift(new OperatorEvaluator(operator, Evaluator.evaluatableFor(left, basis), Evaluator.evaluatableFor(right, basis)));\n        }\n        // There should only be one combined evaluator at this point:\n        if (secondOrderTerms.length === 1) {\n            this[$evaluator] = secondOrderTerms[0];\n        }\n    }\n    get isConstant() {\n        return this[$evaluator] == null || Evaluator.isConstant(this[$evaluator]);\n    }\n    [(_c = $evaluator, $evaluate)]() {\n        return this[$evaluator] != null ? Evaluator.evaluate(this[$evaluator]) :\n            _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n    }\n}\nconst $operator = Symbol('operator');\nconst $left = Symbol('left');\nconst $right = Symbol('right');\n/**\n * An Evaluator for the operators found inside CSS calc() functions.\n * The evaluator accepts an operator and left/right operands. The operands can\n * be any valid expression term typically allowed inside a CSS calc function.\n *\n * As detail of this implementation, the only supported unit types are angles\n * expressed as radians or degrees, and lengths expressed as meters, centimeters\n * or millimeters.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/calc\n */\nclass OperatorEvaluator extends Evaluator {\n    constructor(operator, left, right) {\n        super();\n        this[$operator] = operator;\n        this[$left] = left;\n        this[$right] = right;\n    }\n    get isConstant() {\n        return Evaluator.isConstant(this[$left]) &&\n            Evaluator.isConstant(this[$right]);\n    }\n    [$evaluate]() {\n        const leftNode = (0,_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(Evaluator.evaluate(this[$left]));\n        const rightNode = (0,_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(Evaluator.evaluate(this[$right]));\n        const { number: leftValue, unit: leftUnit } = leftNode;\n        const { number: rightValue, unit: rightUnit } = rightNode;\n        // Disallow operations for mismatched normalized units e.g., m and rad:\n        if (rightUnit != null && leftUnit != null && rightUnit != leftUnit) {\n            return _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n        }\n        // NOTE(cdata): rules for calc type checking are defined here\n        // https://drafts.csswg.org/css-values-3/#calc-type-checking\n        // This is a simplification and may not hold up once we begin to support\n        // additional unit types:\n        const unit = leftUnit || rightUnit;\n        let value;\n        switch (this[$operator].value) {\n            case '+':\n                value = leftValue + rightValue;\n                break;\n            case '-':\n                value = leftValue - rightValue;\n                break;\n            case '/':\n                value = leftValue / rightValue;\n                break;\n            case '*':\n                value = leftValue * rightValue;\n                break;\n            default:\n                return _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n        }\n        return { type: 'number', number: value, unit };\n    }\n}\nconst $evaluatables = Symbol('evaluatables');\nconst $intrinsics = Symbol('intrinsics');\n/**\n * A VectorEvaluator evaluates a series of numeric terms that usually represent\n * a data structure such as a multi-dimensional vector or a spherical\n *\n * The form of the evaluator's result is determined by the Intrinsics that are\n * given to it when it is constructed. For example, spherical intrinsics would\n * establish two angle terms and a length term, so the result of evaluating the\n * evaluator that is configured with spherical intrinsics is a three element\n * array where the first two elements represent angles in radians and the third\n * element representing a length in meters.\n */\nclass StyleEvaluator extends Evaluator {\n    constructor(expressions, intrinsics) {\n        super();\n        this[$intrinsics] = intrinsics;\n        const firstExpression = expressions[0];\n        const terms = firstExpression != null ? firstExpression.terms : [];\n        this[$evaluatables] =\n            intrinsics.basis.map((basisNode, index) => {\n                const term = terms[index];\n                if (term == null) {\n                    return { type: 'ident', value: 'auto' };\n                }\n                if (term.type === 'ident') {\n                    return term;\n                }\n                return Evaluator.evaluatableFor(term, basisNode);\n            });\n    }\n    get isConstant() {\n        for (const evaluatable of this[$evaluatables]) {\n            if (!Evaluator.isConstant(evaluatable)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    [$evaluate]() {\n        const evaluated = this[$evaluatables].map(evaluatable => Evaluator.evaluate(evaluatable));\n        return Evaluator.applyIntrinsics(evaluated, this[$intrinsics])\n            .map(numberNode => numberNode.number);\n    }\n}\n//# sourceMappingURL=evaluators.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/evaluators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/parsers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ASTWalker: () => (/* binding */ ASTWalker),\n/* harmony export */   ZERO: () => (/* binding */ ZERO),\n/* harmony export */   numberNode: () => (/* binding */ numberNode),\n/* harmony export */   parseExpressions: () => (/* binding */ parseExpressions)\n/* harmony export */ });\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst numberNode = (value, unit) => ({ type: 'number', number: value, unit });\n/**\n * Given a string representing a comma-separated set of CSS-like expressions,\n * parses and returns an array of ASTs that correspond to those expressions.\n *\n * Currently supported syntax includes:\n *\n *  - functions (top-level and nested)\n *  - calc() arithmetic operators\n *  - numbers with units\n *  - hexadecimal-encoded colors in 3, 6 or 8 digit form\n *  - idents\n *\n * All syntax is intended to match the parsing rules and semantics of the actual\n * CSS spec as closely as possible.\n *\n * @see https://www.w3.org/TR/CSS2/\n * @see https://www.w3.org/TR/css-values-3/\n */\nconst parseExpressions = (() => {\n    const cache = {};\n    const MAX_PARSE_ITERATIONS = 1000; // Arbitrarily large\n    return (inputString) => {\n        const cacheKey = inputString;\n        if (cacheKey in cache) {\n            return cache[cacheKey];\n        }\n        const expressions = [];\n        let parseIterations = 0;\n        while (inputString) {\n            if (++parseIterations > MAX_PARSE_ITERATIONS) {\n                // Avoid a potentially infinite loop due to typos:\n                inputString = '';\n                break;\n            }\n            const expressionParseResult = parseExpression(inputString);\n            const expression = expressionParseResult.nodes[0];\n            if (expression == null || expression.terms.length === 0) {\n                break;\n            }\n            expressions.push(expression);\n            inputString = expressionParseResult.remainingInput;\n        }\n        return cache[cacheKey] = expressions;\n    };\n})();\n/**\n * Parse a single expression. For the purposes of our supported syntax, an\n * expression is the set of semantically meaningful terms that appear before the\n * next comma, or between the parens of a function invocation.\n */\nconst parseExpression = (() => {\n    const IS_IDENT_RE = /^(\\-\\-|[a-z\\u0240-\\uffff])/i;\n    const IS_OPERATOR_RE = /^([\\*\\+\\/]|[\\-]\\s)/i;\n    const IS_EXPRESSION_END_RE = /^[\\),]/;\n    const FUNCTION_ARGUMENTS_FIRST_TOKEN = '(';\n    const HEX_FIRST_TOKEN = '#';\n    return (inputString) => {\n        const terms = [];\n        while (inputString.length) {\n            inputString = inputString.trim();\n            if (IS_EXPRESSION_END_RE.test(inputString)) {\n                break;\n            }\n            else if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n                const { nodes, remainingInput } = parseFunctionArguments(inputString);\n                inputString = remainingInput;\n                terms.push({\n                    type: 'function',\n                    name: { type: 'ident', value: 'calc' },\n                    arguments: nodes\n                });\n            }\n            else if (IS_IDENT_RE.test(inputString)) {\n                const identParseResult = parseIdent(inputString);\n                const identNode = identParseResult.nodes[0];\n                inputString = identParseResult.remainingInput;\n                if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n                    const { nodes, remainingInput } = parseFunctionArguments(inputString);\n                    terms.push({ type: 'function', name: identNode, arguments: nodes });\n                    inputString = remainingInput;\n                }\n                else {\n                    terms.push(identNode);\n                }\n            }\n            else if (IS_OPERATOR_RE.test(inputString)) {\n                // Operators are always a single character, so just pluck them out:\n                terms.push({ type: 'operator', value: inputString[0] });\n                inputString = inputString.slice(1);\n            }\n            else {\n                const { nodes, remainingInput } = inputString[0] === HEX_FIRST_TOKEN ?\n                    parseHex(inputString) :\n                    parseNumber(inputString);\n                // The remaining string may not have had any meaningful content. Exit\n                // early if this is the case:\n                if (nodes.length === 0) {\n                    break;\n                }\n                terms.push(nodes[0]);\n                inputString = remainingInput;\n            }\n        }\n        return { nodes: [{ type: 'expression', terms }], remainingInput: inputString };\n    };\n})();\n/**\n * An ident is something like a function name or the keyword \"auto\".\n */\nconst parseIdent = (() => {\n    const NOT_IDENT_RE = /[^a-z0-9_\\-\\u0240-\\uffff]/i;\n    return (inputString) => {\n        const match = inputString.match(NOT_IDENT_RE);\n        const ident = match == null ? inputString : inputString.substr(0, match.index);\n        const remainingInput = match == null ? '' : inputString.substr(match.index);\n        return { nodes: [{ type: 'ident', value: ident }], remainingInput };\n    };\n})();\n/**\n * Parses a number. A number value can be expressed with an integer or\n * non-integer syntax, and usually includes a unit (but does not strictly\n * require one for our purposes).\n */\nconst parseNumber = (() => {\n    // @see https://www.w3.org/TR/css-syntax/#number-token-diagram\n    const VALUE_RE = /[\\+\\-]?(\\d+[\\.]\\d+|\\d+|[\\.]\\d+)([eE][\\+\\-]?\\d+)?/;\n    const UNIT_RE = /^[a-z%]+/i;\n    const ALLOWED_UNITS = /^(m|mm|cm|rad|deg|[%])$/;\n    return (inputString) => {\n        const valueMatch = inputString.match(VALUE_RE);\n        const value = valueMatch == null ? '0' : valueMatch[0];\n        inputString = value == null ? inputString : inputString.slice(value.length);\n        const unitMatch = inputString.match(UNIT_RE);\n        let unit = unitMatch != null && unitMatch[0] !== '' ? unitMatch[0] : null;\n        const remainingInput = unitMatch == null ? inputString : inputString.slice(unit.length);\n        if (unit != null && !ALLOWED_UNITS.test(unit)) {\n            unit = null;\n        }\n        return {\n            nodes: [{\n                    type: 'number',\n                    number: parseFloat(value) || 0,\n                    unit: unit\n                }],\n            remainingInput\n        };\n    };\n})();\n/**\n * Parses a hexadecimal-encoded color in 3, 6 or 8 digit form.\n */\nconst parseHex = (() => {\n    // TODO(cdata): right now we don't actually enforce the number of digits\n    const HEX_RE = /^[a-f0-9]*/i;\n    return (inputString) => {\n        inputString = inputString.slice(1).trim();\n        const hexMatch = inputString.match(HEX_RE);\n        const nodes = hexMatch == null ? [] : [{ type: 'hex', value: hexMatch[0] }];\n        return {\n            nodes,\n            remainingInput: hexMatch == null ? inputString :\n                inputString.slice(hexMatch[0].length)\n        };\n    };\n})();\n/**\n * Parses arguments passed to a function invocation (e.g., the expressions\n * within a matched set of parens).\n */\nconst parseFunctionArguments = (inputString) => {\n    const expressionNodes = [];\n    // Consume the opening paren\n    inputString = inputString.slice(1).trim();\n    while (inputString.length) {\n        const expressionParseResult = parseExpression(inputString);\n        expressionNodes.push(expressionParseResult.nodes[0]);\n        inputString = expressionParseResult.remainingInput.trim();\n        if (inputString[0] === ',') {\n            inputString = inputString.slice(1).trim();\n        }\n        else if (inputString[0] === ')') {\n            // Consume the closing paren and stop parsing\n            inputString = inputString.slice(1);\n            break;\n        }\n    }\n    return { nodes: expressionNodes, remainingInput: inputString };\n};\nconst $visitedTypes = Symbol('visitedTypes');\n/**\n * An ASTWalker walks an array of ASTs such as the type produced by\n * parseExpressions and invokes a callback for a configured set of nodes that\n * the user wishes to \"visit\" during the walk.\n */\nclass ASTWalker {\n    constructor(visitedTypes) {\n        this[$visitedTypes] = visitedTypes;\n    }\n    /**\n     * Walk the given set of ASTs, and invoke the provided callback for nodes that\n     * match the filtered set that the ASTWalker was constructed with.\n     */\n    walk(ast, callback) {\n        const remaining = ast.slice();\n        while (remaining.length) {\n            const next = remaining.shift();\n            if (this[$visitedTypes].indexOf(next.type) > -1) {\n                callback(next);\n            }\n            switch (next.type) {\n                case 'expression':\n                    remaining.unshift(...next.terms);\n                    break;\n                case 'function':\n                    remaining.unshift(next.name, ...next.arguments);\n                    break;\n            }\n        }\n    }\n}\nconst ZERO = Object.freeze({ type: 'number', number: 0, unit: null });\n//# sourceMappingURL=parsers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/style-effector.js":
/*!************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/style-effector.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StyleEffector: () => (/* binding */ StyleEffector)\n/* harmony export */ });\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c, _d;\n\nconst $instances = Symbol('instances');\nconst $activateListener = Symbol('activateListener');\nconst $deactivateListener = Symbol('deactivateListener');\nconst $notifyInstances = Symbol('notifyInstances');\nconst $notify = Symbol('notify');\nconst $scrollCallback = Symbol('callback');\n/**\n * This internal helper is intended to work as a reference-counting manager of\n * scroll event listeners. Only one scroll listener is ever registered for all\n * instances of the class, and when the last ScrollObserver \"disconnects\", that\n * event listener is removed. This spares us from thrashing\n * the {add,remove}EventListener API (the binding cost of these methods has been\n * known to show up in performance analyses) as well as potential memory leaks.\n */\nclass ScrollObserver {\n    constructor(callback) {\n        this[$scrollCallback] = callback;\n    }\n    static [$notifyInstances]() {\n        for (const instance of ScrollObserver[$instances]) {\n            instance[$notify]();\n        }\n    }\n    static [(_a = $instances, $activateListener)]() {\n        window.addEventListener('scroll', this[$notifyInstances], { passive: true });\n    }\n    static [$deactivateListener]() {\n        window.removeEventListener('scroll', this[$notifyInstances]);\n    }\n    /**\n     * Listen for scroll events. The configured callback (passed to the\n     * constructor) will be invoked for subsequent global scroll events.\n     */\n    observe() {\n        if (ScrollObserver[$instances].size === 0) {\n            ScrollObserver[$activateListener]();\n        }\n        ScrollObserver[$instances].add(this);\n    }\n    /**\n     * Stop listening for scroll events.\n     */\n    disconnect() {\n        ScrollObserver[$instances].delete(this);\n        if (ScrollObserver[$instances].size === 0) {\n            ScrollObserver[$deactivateListener]();\n        }\n    }\n    [$notify]() {\n        this[$scrollCallback]();\n    }\n    ;\n}\nScrollObserver[_a] = new Set();\nconst $computeStyleCallback = Symbol('computeStyleCallback');\nconst $astWalker = Symbol('astWalker');\nconst $dependencies = Symbol('dependencies');\nconst $onScroll = Symbol('onScroll');\n/**\n * The StyleEffector is configured with a callback that will be invoked at the\n * optimal time that some array of CSS expression ASTs ought to be evaluated.\n *\n * For example, our CSS-like expression syntax supports usage of the env()\n * function to incorporate the current top-level scroll position into a CSS\n * expression: env(window-scroll-y).\n *\n * This \"environment variable\" will change dynamically as the user scrolls the\n * page. If an AST contains such a usage of env(), we would have to evaluate the\n * AST on every frame in order to be sure that the computed style stays up to\n * date.\n *\n * The StyleEffector spares us from evaluating the expressions on every frame by\n * correlating specific parts of an AST with observers of the external effects\n * that they refer to (if any). So, if the AST contains env(window-scroll-y),\n * the StyleEffector manages the lifetime of a global scroll event listener and\n * notifies the user at the optimal time to evaluate the computed style.\n */\nclass StyleEffector {\n    constructor(callback) {\n        this[_b] = {};\n        this[_c] = new _parsers__WEBPACK_IMPORTED_MODULE_0__.ASTWalker(['function']);\n        this[_d] = () => {\n            this[$computeStyleCallback]({ relatedState: 'window-scroll' });\n        };\n        this[$computeStyleCallback] = callback;\n    }\n    /**\n     * Sets the expressions that govern when the StyleEffector callback will be\n     * invoked.\n     */\n    observeEffectsFor(ast) {\n        const newDependencies = {};\n        const oldDependencies = this[$dependencies];\n        this[$astWalker].walk(ast, functionNode => {\n            const { name } = functionNode;\n            const firstArgument = functionNode.arguments[0];\n            const firstTerm = firstArgument.terms[0];\n            if (name.value !== 'env' || firstTerm == null ||\n                firstTerm.type !== 'ident') {\n                return;\n            }\n            switch (firstTerm.value) {\n                case 'window-scroll-y':\n                    if (newDependencies['window-scroll'] == null) {\n                        const observer = 'window-scroll' in oldDependencies ?\n                            oldDependencies['window-scroll'] :\n                            new ScrollObserver(this[$onScroll]);\n                        observer.observe();\n                        delete oldDependencies['window-scroll'];\n                        newDependencies['window-scroll'] = observer;\n                    }\n                    break;\n            }\n        });\n        for (const environmentState in oldDependencies) {\n            const observer = oldDependencies[environmentState];\n            observer.disconnect();\n        }\n        this[$dependencies] = newDependencies;\n    }\n    /**\n     * Disposes of the StyleEffector by disconnecting all observers of external\n     * effects.\n     */\n    dispose() {\n        for (const environmentState in this[$dependencies]) {\n            const observer = this[$dependencies][environmentState];\n            observer.disconnect();\n        }\n    }\n}\n_b = $dependencies, _c = $astWalker, _d = $onScroll;\n//# sourceMappingURL=style-effector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/style-effector.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/template.js":
/*!***********************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/template.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeTemplate: () => (/* binding */ makeTemplate)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* harmony import */ var _assets_close_material_svg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assets/close-material-svg.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/assets/close-material-svg.js\");\n/* harmony import */ var _assets_controls_svg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assets/controls-svg.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/assets/controls-svg.js\");\n/* harmony import */ var _assets_view_in_ar_material_svg_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assets/view-in-ar-material-svg.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/assets/view-in-ar-material-svg.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst templateResult = (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `\n<style>\n:host {\n  display: block;\n  position: relative;\n  contain: strict;\n  width: 300px;\n  height: 150px;\n}\n\n/* NOTE: This rule set is our integration surface area with the\n * :focus-visible polyfill.\n *\n * @see https://github.com/WICG/focus-visible/pull/196 */\n:host([data-js-focus-visible]:focus:not(.focus-visible)),\n:host([data-js-focus-visible]) :focus:not(.focus-visible) {\n  outline: none;\n}\n\n.container {\n  position: relative;\n  overflow: hidden;\n}\n\n.userInput {\n  width: 100%;\n  height: 100%;\n  display: none;\n  position: relative;\n}\n\ncanvas {\n  position: absolute;\n  display: none;\n  pointer-events: none;\n  /* NOTE(cdata): Chrome 76 and below apparently have a bug\n   * that causes our canvas not to display pixels unless it is\n   * on its own render layer\n   * @see https://github.com/google/model-viewer/pull/755#issuecomment-536597893\n   */\n  transform: translateZ(0);\n}\n\n.show {\n  display: block;\n}\n\n/* Adapted from HTML5 Boilerplate\n *\n * @see https://github.com/h5bp/html5-boilerplate/blob/ceb4620c78fc82e13534fc44202a3f168754873f/dist/css/main.css#L122-L133 */\n.screen-reader-only {\n  border: 0;\n  left: 0;\n  top: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  pointer-events: none;\n}\n\n.slot {\n  position: absolute;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.slot > * {\n  pointer-events: initial;\n}\n\n.annotation-wrapper ::slotted(*) {\n  opacity: var(--max-hotspot-opacity, 1);\n  transition: opacity 0.3s;\n}\n\n.pointer-tumbling .annotation-wrapper ::slotted(*) {\n  pointer-events: none;\n}\n\n.annotation-wrapper ::slotted(*) {\n  pointer-events: initial;\n}\n\n.annotation-wrapper.hide ::slotted(*) {\n  opacity: var(--min-hotspot-opacity, 0.25);\n}\n\n.slot.poster {\n  display: none;\n  background-color: inherit;\n}\n\n.slot.poster.show {\n  display: inherit;\n}\n\n.slot.poster > * {\n  pointer-events: initial;\n}\n\n.slot.poster:not(.show) > * {\n  pointer-events: none;\n}\n\n#default-poster {\n  width: 100%;\n  height: 100%;\n  /* The default poster is a <button> so we need to set display\n   * to prevent it from being affected by text-align: */\n  display: block;\n  position: absolute;\n  border: none;\n  padding: 0;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-color: #fff0;\n}\n\n#default-progress-bar {\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  overflow: hidden;\n}\n\n#default-progress-bar > .bar {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: var(--progress-bar-height, 5px);\n  background-color: var(--progress-bar-color, rgba(0, 0, 0, 0.4));\n  transition: transform 0.09s;\n  transform-origin: top left;\n  transform: scaleX(0);\n  overflow: hidden;\n}\n\n#default-progress-bar > .bar.hide {\n  transition: opacity 0.3s 1s;\n  opacity: 0;\n}\n\n.centered {\n  align-items: center;\n  justify-content: center;\n}\n\n.cover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n.slot.interaction-prompt {\n  display: var(--interaction-prompt-display, flex);\n  overflow: hidden;\n  opacity: 0;\n  will-change: opacity;\n  transition: opacity 0.3s;\n}\n\n.slot.interaction-prompt.visible {\n  opacity: 1;\n}\n\n.animated-container {\n  will-change: transform, opacity;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.slot.interaction-prompt > * {\n  pointer-events: none;\n}\n\n.slot.ar-button {\n  -moz-user-select: none;\n  -webkit-tap-highlight-color: transparent;\n  user-select: none;\n\n  display: var(--ar-button-display, block);\n}\n\n.slot.ar-button:not(.enabled) {\n  display: none;\n}\n\n.fab {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  background-color: #fff;\n  box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 100px;\n}\n\n.fab > * {\n  opacity: 0.87;\n}\n\n#default-ar-button {\n  position: absolute;\n  bottom: 16px;\n  right: 16px;\n  transform: scale(var(--ar-button-scale, 1));\n  transform-origin: bottom right;\n}\n\n.slot.pan-target {\n  display: block;\n  position: absolute;\n  width: 0;\n  height: 0;\n  left: 50%;\n  top: 50%;\n  transform: translate3d(-50%, -50%, 0);\n  background-color: transparent;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n#default-pan-target {\n  width: 6px;\n  height: 6px;\n  border-radius: 6px;\n  border: 1px solid white;\n  box-shadow: 0px 0px 2px 1px rgba(0, 0, 0, 0.8);\n}\n\n.slot.default {\n  pointer-events: none;\n}\n\n.slot.progress-bar {\n  pointer-events: none;\n}\n\n.slot.exit-webxr-ar-button {\n  pointer-events: none;\n}\n\n.slot.exit-webxr-ar-button:not(.enabled) {\n  display: none;\n}\n\n#default-exit-webxr-ar-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: env(safe-area-inset-top, 16px);\n  right: 16px;\n  width: 40px;\n  height: 40px;\n  box-sizing: border-box;\n}\n\n#default-exit-webxr-ar-button > svg {\n  fill: #fff;\n}\n</style>\n<div class=\"container\">\n  <div class=\"userInput\" tabindex=\"0\" role=\"img\"\n      aria-label=\"3D model\">\n      <div class=\"slot canvas\">\n        <slot name=\"canvas\">\n          <canvas></canvas>\n        </slot>\n      </div>\n\n  </div>\n\n  <!-- NOTE(cdata): We need to wrap slots because browsers without ShadowDOM\n        will have their <slot> elements removed by ShadyCSS -->\n  <div class=\"slot poster\">\n    <slot name=\"poster\">\n      <button type=\"button\" id=\"default-poster\" aria-hidden=\"true\" aria-label=\"Loading 3D model\"></button>\n    </slot>\n  </div>\n\n  <div class=\"slot ar-button\">\n    <slot name=\"ar-button\">\n      <a id=\"default-ar-button\" part=\"default-ar-button\" class=\"fab\"\n          tabindex=\"2\"\n          aria-label=\"View in your space\">\n        ${_assets_view_in_ar_material_svg_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]}\n      </a>\n    </slot>\n  </div>\n\n  <div class=\"slot pan-target\">\n    <slot name=\"pan-target\">\n      <div id=\"default-pan-target\">\n      </div>\n    </slot>\n  </div>\n\n  <div class=\"slot interaction-prompt cover centered\">\n    <div id=\"prompt\" class=\"animated-container\">\n      <slot name=\"interaction-prompt\" aria-hidden=\"true\">\n        ${_assets_controls_svg_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]}\n      </slot>\n    </div>\n  </div>\n\n  <div id=\"finger0\" class=\"animated-container cover\">\n    <slot name=\"finger0\" aria-hidden=\"true\">\n    </slot>\n  </div>\n  <div id=\"finger1\" class=\"animated-container cover\">\n    <slot name=\"finger1\" aria-hidden=\"true\">\n    </slot>\n  </div>\n\n  <div class=\"slot default\">\n    <slot></slot>\n\n    <div class=\"slot progress-bar\">\n      <slot name=\"progress-bar\">\n        <div id=\"default-progress-bar\" aria-hidden=\"true\">\n          <div class=\"bar\" part=\"default-progress-bar\"></div>\n        </div>\n      </slot>\n    </div>\n\n    <div class=\"slot exit-webxr-ar-button\">\n      <slot name=\"exit-webxr-ar-button\">\n        <a id=\"default-exit-webxr-ar-button\" part=\"default-exit-webxr-ar-button\"\n            tabindex=\"3\"\n            aria-label=\"Exit AR\"\n            aria-hidden=\"true\">\n          ${_assets_close_material_svg_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]}\n        </a>\n      </slot>\n    </div>\n  </div>\n</div>\n<div class=\"screen-reader-only\" role=\"region\" aria-label=\"Live announcements\">\n  <span id=\"status\" role=\"status\"></span>\n</div>`;\nconst makeTemplate = (shadowRoot) => {\n    (0,lit__WEBPACK_IMPORTED_MODULE_0__.render)(templateResult, shadowRoot);\n};\n//# sourceMappingURL=template.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RlbXBsYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtQztBQUNvQjtBQUNEO0FBQ0k7QUFDMUQsdUJBQXVCLHlDQUFJO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSwwRUFBTztBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsK0RBQWM7QUFDeEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFFQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLElBQUksMkNBQU07QUFDVjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RlbXBsYXRlLmpzP2YwMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgaHRtbCwgcmVuZGVyIH0gZnJvbSAnbGl0JztcbmltcG9ydCBDbG9zZUljb24gZnJvbSAnLi9hc3NldHMvY2xvc2UtbWF0ZXJpYWwtc3ZnLmpzJztcbmltcG9ydCBDb250cm9sc1Byb21wdCBmcm9tICcuL2Fzc2V0cy9jb250cm9scy1zdmcuanMnO1xuaW1wb3J0IEFSR2x5cGggZnJvbSAnLi9hc3NldHMvdmlldy1pbi1hci1tYXRlcmlhbC1zdmcuanMnO1xuY29uc3QgdGVtcGxhdGVSZXN1bHQgPSBodG1sIGBcbjxzdHlsZT5cbjpob3N0IHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgY29udGFpbjogc3RyaWN0O1xuICB3aWR0aDogMzAwcHg7XG4gIGhlaWdodDogMTUwcHg7XG59XG5cbi8qIE5PVEU6IFRoaXMgcnVsZSBzZXQgaXMgb3VyIGludGVncmF0aW9uIHN1cmZhY2UgYXJlYSB3aXRoIHRoZVxuICogOmZvY3VzLXZpc2libGUgcG9seWZpbGwuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL3B1bGwvMTk2ICovXG46aG9zdChbZGF0YS1qcy1mb2N1cy12aXNpYmxlXTpmb2N1czpub3QoLmZvY3VzLXZpc2libGUpKSxcbjpob3N0KFtkYXRhLWpzLWZvY3VzLXZpc2libGVdKSA6Zm9jdXM6bm90KC5mb2N1cy12aXNpYmxlKSB7XG4gIG91dGxpbmU6IG5vbmU7XG59XG5cbi5jb250YWluZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi51c2VySW5wdXQge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBub25lO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbmNhbnZhcyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIC8qIE5PVEUoY2RhdGEpOiBDaHJvbWUgNzYgYW5kIGJlbG93IGFwcGFyZW50bHkgaGF2ZSBhIGJ1Z1xuICAgKiB0aGF0IGNhdXNlcyBvdXIgY2FudmFzIG5vdCB0byBkaXNwbGF5IHBpeGVscyB1bmxlc3MgaXQgaXNcbiAgICogb24gaXRzIG93biByZW5kZXIgbGF5ZXJcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL21vZGVsLXZpZXdlci9wdWxsLzc1NSNpc3N1ZWNvbW1lbnQtNTM2NTk3ODkzXG4gICAqL1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG59XG5cbi5zaG93IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qIEFkYXB0ZWQgZnJvbSBIVE1MNSBCb2lsZXJwbGF0ZVxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2g1YnAvaHRtbDUtYm9pbGVycGxhdGUvYmxvYi9jZWI0NjIwYzc4ZmM4MmUxMzUzNGZjNDQyMDJhM2YxNjg3NTQ4NzNmL2Rpc3QvY3NzL21haW4uY3NzI0wxMjItTDEzMyAqL1xuLnNjcmVlbi1yZWFkZXItb25seSB7XG4gIGJvcmRlcjogMDtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApO1xuICBoZWlnaHQ6IDFweDtcbiAgbWFyZ2luOiAtMXB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nOiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHdpZHRoOiAxcHg7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4uc2xvdCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuLnNsb3QgPiAqIHtcbiAgcG9pbnRlci1ldmVudHM6IGluaXRpYWw7XG59XG5cbi5hbm5vdGF0aW9uLXdyYXBwZXIgOjpzbG90dGVkKCopIHtcbiAgb3BhY2l0eTogdmFyKC0tbWF4LWhvdHNwb3Qtb3BhY2l0eSwgMSk7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcztcbn1cblxuLnBvaW50ZXItdHVtYmxpbmcgLmFubm90YXRpb24td3JhcHBlciA6OnNsb3R0ZWQoKikge1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuLmFubm90YXRpb24td3JhcHBlciA6OnNsb3R0ZWQoKikge1xuICBwb2ludGVyLWV2ZW50czogaW5pdGlhbDtcbn1cblxuLmFubm90YXRpb24td3JhcHBlci5oaWRlIDo6c2xvdHRlZCgqKSB7XG4gIG9wYWNpdHk6IHZhcigtLW1pbi1ob3RzcG90LW9wYWNpdHksIDAuMjUpO1xufVxuXG4uc2xvdC5wb3N0ZXIge1xuICBkaXNwbGF5OiBub25lO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xufVxuXG4uc2xvdC5wb3N0ZXIuc2hvdyB7XG4gIGRpc3BsYXk6IGluaGVyaXQ7XG59XG5cbi5zbG90LnBvc3RlciA+ICoge1xuICBwb2ludGVyLWV2ZW50czogaW5pdGlhbDtcbn1cblxuLnNsb3QucG9zdGVyOm5vdCguc2hvdykgPiAqIHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbiNkZWZhdWx0LXBvc3RlciB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIC8qIFRoZSBkZWZhdWx0IHBvc3RlciBpcyBhIDxidXR0b24+IHNvIHdlIG5lZWQgdG8gc2V0IGRpc3BsYXlcbiAgICogdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGFmZmVjdGVkIGJ5IHRleHQtYWxpZ246ICovXG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvcmRlcjogbm9uZTtcbiAgcGFkZGluZzogMDtcbiAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmYwO1xufVxuXG4jZGVmYXVsdC1wcm9ncmVzcy1iYXIge1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuI2RlZmF1bHQtcHJvZ3Jlc3MtYmFyID4gLmJhciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiB2YXIoLS1wcm9ncmVzcy1iYXItaGVpZ2h0LCA1cHgpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcm9ncmVzcy1iYXItY29sb3IsIHJnYmEoMCwgMCwgMCwgMC40KSk7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjA5cztcbiAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XG4gIHRyYW5zZm9ybTogc2NhbGVYKDApO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4jZGVmYXVsdC1wcm9ncmVzcy1iYXIgPiAuYmFyLmhpZGUge1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgMXM7XG4gIG9wYWNpdHk6IDA7XG59XG5cbi5jZW50ZXJlZCB7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4uY292ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5zbG90LmludGVyYWN0aW9uLXByb21wdCB7XG4gIGRpc3BsYXk6IHZhcigtLWludGVyYWN0aW9uLXByb21wdC1kaXNwbGF5LCBmbGV4KTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgb3BhY2l0eTogMDtcbiAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcztcbn1cblxuLnNsb3QuaW50ZXJhY3Rpb24tcHJvbXB0LnZpc2libGUge1xuICBvcGFjaXR5OiAxO1xufVxuXG4uYW5pbWF0ZWQtY29udGFpbmVyIHtcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybSwgb3BhY2l0eTtcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xufVxuXG4uc2xvdC5pbnRlcmFjdGlvbi1wcm9tcHQgPiAqIHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5zbG90LmFyLWJ1dHRvbiB7XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuXG4gIGRpc3BsYXk6IHZhcigtLWFyLWJ1dHRvbi1kaXNwbGF5LCBibG9jayk7XG59XG5cbi5zbG90LmFyLWJ1dHRvbjpub3QoLmVuYWJsZWQpIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmZhYiB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3aWR0aDogNDBweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGJveC1zaGFkb3c6IDBweCAwcHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7XG4gIGJvcmRlci1yYWRpdXM6IDEwMHB4O1xufVxuXG4uZmFiID4gKiB7XG4gIG9wYWNpdHk6IDAuODc7XG59XG5cbiNkZWZhdWx0LWFyLWJ1dHRvbiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiAxNnB4O1xuICByaWdodDogMTZweDtcbiAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1hci1idXR0b24tc2NhbGUsIDEpKTtcbiAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIHJpZ2h0O1xufVxuXG4uc2xvdC5wYW4tdGFyZ2V0IHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2lkdGg6IDA7XG4gIGhlaWdodDogMDtcbiAgbGVmdDogNTAlO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtNTAlLCAtNTAlLCAwKTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcztcbn1cblxuI2RlZmF1bHQtcGFuLXRhcmdldCB7XG4gIHdpZHRoOiA2cHg7XG4gIGhlaWdodDogNnB4O1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xuICBib3gtc2hhZG93OiAwcHggMHB4IDJweCAxcHggcmdiYSgwLCAwLCAwLCAwLjgpO1xufVxuXG4uc2xvdC5kZWZhdWx0IHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5zbG90LnByb2dyZXNzLWJhciB7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4uc2xvdC5leGl0LXdlYnhyLWFyLWJ1dHRvbiB7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4uc2xvdC5leGl0LXdlYnhyLWFyLWJ1dHRvbjpub3QoLmVuYWJsZWQpIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuI2RlZmF1bHQtZXhpdC13ZWJ4ci1hci1idXR0b24ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IGVudihzYWZlLWFyZWEtaW5zZXQtdG9wLCAxNnB4KTtcbiAgcmlnaHQ6IDE2cHg7XG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbiNkZWZhdWx0LWV4aXQtd2VieHItYXItYnV0dG9uID4gc3ZnIHtcbiAgZmlsbDogI2ZmZjtcbn1cbjwvc3R5bGU+XG48ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gIDxkaXYgY2xhc3M9XCJ1c2VySW5wdXRcIiB0YWJpbmRleD1cIjBcIiByb2xlPVwiaW1nXCJcbiAgICAgIGFyaWEtbGFiZWw9XCIzRCBtb2RlbFwiPlxuICAgICAgPGRpdiBjbGFzcz1cInNsb3QgY2FudmFzXCI+XG4gICAgICAgIDxzbG90IG5hbWU9XCJjYW52YXNcIj5cbiAgICAgICAgICA8Y2FudmFzPjwvY2FudmFzPlxuICAgICAgICA8L3Nsb3Q+XG4gICAgICA8L2Rpdj5cblxuICA8L2Rpdj5cblxuICA8IS0tIE5PVEUoY2RhdGEpOiBXZSBuZWVkIHRvIHdyYXAgc2xvdHMgYmVjYXVzZSBicm93c2VycyB3aXRob3V0IFNoYWRvd0RPTVxuICAgICAgICB3aWxsIGhhdmUgdGhlaXIgPHNsb3Q+IGVsZW1lbnRzIHJlbW92ZWQgYnkgU2hhZHlDU1MgLS0+XG4gIDxkaXYgY2xhc3M9XCJzbG90IHBvc3RlclwiPlxuICAgIDxzbG90IG5hbWU9XCJwb3N0ZXJcIj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwiZGVmYXVsdC1wb3N0ZXJcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBhcmlhLWxhYmVsPVwiTG9hZGluZyAzRCBtb2RlbFwiPjwvYnV0dG9uPlxuICAgIDwvc2xvdD5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cInNsb3QgYXItYnV0dG9uXCI+XG4gICAgPHNsb3QgbmFtZT1cImFyLWJ1dHRvblwiPlxuICAgICAgPGEgaWQ9XCJkZWZhdWx0LWFyLWJ1dHRvblwiIHBhcnQ9XCJkZWZhdWx0LWFyLWJ1dHRvblwiIGNsYXNzPVwiZmFiXCJcbiAgICAgICAgICB0YWJpbmRleD1cIjJcIlxuICAgICAgICAgIGFyaWEtbGFiZWw9XCJWaWV3IGluIHlvdXIgc3BhY2VcIj5cbiAgICAgICAgJHtBUkdseXBofVxuICAgICAgPC9hPlxuICAgIDwvc2xvdD5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cInNsb3QgcGFuLXRhcmdldFwiPlxuICAgIDxzbG90IG5hbWU9XCJwYW4tdGFyZ2V0XCI+XG4gICAgICA8ZGl2IGlkPVwiZGVmYXVsdC1wYW4tdGFyZ2V0XCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L3Nsb3Q+XG4gIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJzbG90IGludGVyYWN0aW9uLXByb21wdCBjb3ZlciBjZW50ZXJlZFwiPlxuICAgIDxkaXYgaWQ9XCJwcm9tcHRcIiBjbGFzcz1cImFuaW1hdGVkLWNvbnRhaW5lclwiPlxuICAgICAgPHNsb3QgbmFtZT1cImludGVyYWN0aW9uLXByb21wdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICAke0NvbnRyb2xzUHJvbXB0fVxuICAgICAgPC9zbG90PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cblxuICA8ZGl2IGlkPVwiZmluZ2VyMFwiIGNsYXNzPVwiYW5pbWF0ZWQtY29udGFpbmVyIGNvdmVyXCI+XG4gICAgPHNsb3QgbmFtZT1cImZpbmdlcjBcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICA8L3Nsb3Q+XG4gIDwvZGl2PlxuICA8ZGl2IGlkPVwiZmluZ2VyMVwiIGNsYXNzPVwiYW5pbWF0ZWQtY29udGFpbmVyIGNvdmVyXCI+XG4gICAgPHNsb3QgbmFtZT1cImZpbmdlcjFcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICA8L3Nsb3Q+XG4gIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJzbG90IGRlZmF1bHRcIj5cbiAgICA8c2xvdD48L3Nsb3Q+XG5cbiAgICA8ZGl2IGNsYXNzPVwic2xvdCBwcm9ncmVzcy1iYXJcIj5cbiAgICAgIDxzbG90IG5hbWU9XCJwcm9ncmVzcy1iYXJcIj5cbiAgICAgICAgPGRpdiBpZD1cImRlZmF1bHQtcHJvZ3Jlc3MtYmFyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJhclwiIHBhcnQ9XCJkZWZhdWx0LXByb2dyZXNzLWJhclwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2xvdD5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJzbG90IGV4aXQtd2VieHItYXItYnV0dG9uXCI+XG4gICAgICA8c2xvdCBuYW1lPVwiZXhpdC13ZWJ4ci1hci1idXR0b25cIj5cbiAgICAgICAgPGEgaWQ9XCJkZWZhdWx0LWV4aXQtd2VieHItYXItYnV0dG9uXCIgcGFydD1cImRlZmF1bHQtZXhpdC13ZWJ4ci1hci1idXR0b25cIlxuICAgICAgICAgICAgdGFiaW5kZXg9XCIzXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJFeGl0IEFSXCJcbiAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICAgICR7Q2xvc2VJY29ufVxuICAgICAgICA8L2E+XG4gICAgICA8L3Nsb3Q+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwic2NyZWVuLXJlYWRlci1vbmx5XCIgcm9sZT1cInJlZ2lvblwiIGFyaWEtbGFiZWw9XCJMaXZlIGFubm91bmNlbWVudHNcIj5cbiAgPHNwYW4gaWQ9XCJzdGF0dXNcIiByb2xlPVwic3RhdHVzXCI+PC9zcGFuPlxuPC9kaXY+YDtcbmV4cG9ydCBjb25zdCBtYWtlVGVtcGxhdGUgPSAoc2hhZG93Um9vdCkgPT4ge1xuICAgIHJlbmRlcih0ZW1wbGF0ZVJlc3VsdCwgc2hhZG93Um9vdCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/template.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRenderer: () => (/* binding */ ARRenderer),\n/* harmony export */   ARStatus: () => (/* binding */ ARStatus),\n/* harmony export */   ARTracking: () => (/* binding */ ARTracking)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_webxr_XREstimatedLight_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/webxr/XREstimatedLight.js */ \"(ssr)/./node_modules/three/examples/jsm/webxr/XREstimatedLight.js\");\n/* harmony import */ var _features_environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/environment.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _Damper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* harmony import */ var _PlacementBox_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PlacementBox.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/PlacementBox.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n// number of initial null pose XRFrames allowed before we post not-tracking\nconst INIT_FRAMES = 30;\n// AR shadow is not user-configurable. This is to pave the way for AR lighting\n// estimation, which will be used once available in WebXR.\nconst AR_SHADOW_INTENSITY = 0.8;\nconst ROTATION_RATE = 1.5;\n// Angle down (towards bottom of screen) from camera center ray to use for hit\n// testing against the floor. This makes placement faster and more intuitive\n// assuming the phone is in portrait mode. This seems to be a reasonable\n// assumption for the start of the session and UI will lack landscape mode to\n// encourage upright use.\nconst HIT_ANGLE_DEG = 20;\nconst SCALE_SNAP_HIGH = 1.3;\nconst SCALE_SNAP_LOW = 1 / SCALE_SNAP_HIGH;\n// For automatic dynamic viewport scaling, don't let the scale drop below this\n// limit.\nconst MIN_VIEWPORT_SCALE = 0.25;\n// Furthest away you can move an object (meters).\nconst MAX_DISTANCE = 10;\nconst ARStatus = {\n    NOT_PRESENTING: 'not-presenting',\n    SESSION_STARTED: 'session-started',\n    OBJECT_PLACED: 'object-placed',\n    FAILED: 'failed'\n};\nconst ARTracking = {\n    TRACKING: 'tracking',\n    NOT_TRACKING: 'not-tracking'\n};\nconst vector3 = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\nconst matrix4 = new three__WEBPACK_IMPORTED_MODULE_5__.Matrix4();\nconst hitPosition = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\nconst camera = new three__WEBPACK_IMPORTED_MODULE_5__.PerspectiveCamera(45, 1, 0.1, 100);\nclass ARRenderer extends three__WEBPACK_IMPORTED_MODULE_5__.EventDispatcher {\n    constructor(renderer) {\n        super();\n        this.renderer = renderer;\n        this.currentSession = null;\n        this.placeOnWall = false;\n        this.placementBox = null;\n        this.lastTick = null;\n        this.turntableRotation = null;\n        this.oldShadowIntensity = null;\n        this.frame = null;\n        this.initialHitSource = null;\n        this.transientHitTestSource = null;\n        this.inputSource = null;\n        this._presentedScene = null;\n        this.resolveCleanup = null;\n        this.exitWebXRButtonContainer = null;\n        this.overlay = null;\n        this.xrLight = null;\n        this.tracking = true;\n        this.frames = 0;\n        this.initialized = false;\n        this.oldTarget = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\n        this.placementComplete = false;\n        this.isTranslating = false;\n        this.isRotating = false;\n        this.isTwoFingering = false;\n        this.lastDragPosition = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\n        this.firstRatio = 0;\n        this.lastAngle = 0;\n        this.goalPosition = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\n        this.goalYaw = 0;\n        this.goalScale = 1;\n        this.xDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.yDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.zDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.yawDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.scaleDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.onExitWebXRButtonContainerClick = () => this.stopPresenting();\n        this.onUpdateScene = () => {\n            if (this.placementBox != null && this.isPresenting) {\n                this.placementBox.dispose();\n                this.placementBox = new _PlacementBox_js__WEBPACK_IMPORTED_MODULE_4__.PlacementBox(this.presentedScene, this.placeOnWall ? 'back' : 'bottom');\n            }\n        };\n        this.onSelectStart = (event) => {\n            const hitSource = this.transientHitTestSource;\n            if (hitSource == null) {\n                return;\n            }\n            const fingers = this.frame.getHitTestResultsForTransientInput(hitSource);\n            const scene = this.presentedScene;\n            const box = this.placementBox;\n            if (fingers.length === 1) {\n                this.inputSource = event.inputSource;\n                const { axes } = this.inputSource.gamepad;\n                const hitPosition = box.getHit(this.presentedScene, axes[0], axes[1]);\n                box.show = true;\n                if (hitPosition != null) {\n                    this.isTranslating = true;\n                    this.lastDragPosition.copy(hitPosition);\n                }\n                else if (this.placeOnWall === false) {\n                    this.isRotating = true;\n                    this.lastAngle = axes[0] * ROTATION_RATE;\n                }\n            }\n            else if (fingers.length === 2) {\n                box.show = true;\n                this.isTwoFingering = true;\n                const { separation } = this.fingerPolar(fingers);\n                this.firstRatio = separation / scene.scale.x;\n            }\n        };\n        this.onSelectEnd = () => {\n            this.isTranslating = false;\n            this.isRotating = false;\n            this.isTwoFingering = false;\n            this.inputSource = null;\n            this.goalPosition.y +=\n                this.placementBox.offsetHeight * this.presentedScene.scale.x;\n            this.placementBox.show = false;\n        };\n        this.threeRenderer = renderer.threeRenderer;\n        this.threeRenderer.xr.enabled = true;\n    }\n    async resolveARSession() {\n        (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArCandidate)();\n        const session = await navigator.xr.requestSession('immersive-ar', {\n            requiredFeatures: ['hit-test'],\n            optionalFeatures: ['dom-overlay', 'light-estimation'],\n            domOverlay: this.overlay ? { root: this.overlay } : undefined\n        });\n        this.threeRenderer.xr.setReferenceSpaceType('local');\n        await this.threeRenderer.xr.setSession(session);\n        this.threeRenderer.xr.cameraAutoUpdate = false;\n        return session;\n    }\n    /**\n     * The currently presented scene, if any\n     */\n    get presentedScene() {\n        return this._presentedScene;\n    }\n    /**\n     * Resolves to true if the renderer has detected all the necessary qualities\n     * to support presentation in AR.\n     */\n    async supportsPresentation() {\n        try {\n            (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArCandidate)();\n            return await navigator.xr.isSessionSupported('immersive-ar');\n        }\n        catch (error) {\n            console.warn('Request to present in WebXR denied:');\n            console.warn(error);\n            console.warn('Falling back to next ar-mode');\n            return false;\n        }\n    }\n    /**\n     * Present a scene in AR\n     */\n    async present(scene, environmentEstimation = false) {\n        if (this.isPresenting) {\n            console.warn('Cannot present while a model is already presenting');\n        }\n        let waitForAnimationFrame = new Promise((resolve, _reject) => {\n            requestAnimationFrame(() => resolve());\n        });\n        scene.setHotspotsVisibility(false);\n        scene.queueRender();\n        // Render a frame to turn off the hotspots\n        await waitForAnimationFrame;\n        // This sets isPresenting to true\n        this._presentedScene = scene;\n        this.overlay = scene.element.shadowRoot.querySelector('div.default');\n        if (environmentEstimation === true) {\n            this.xrLight = new three_examples_jsm_webxr_XREstimatedLight_js__WEBPACK_IMPORTED_MODULE_6__.XREstimatedLight(this.threeRenderer);\n            this.xrLight.addEventListener('estimationstart', () => {\n                if (!this.isPresenting || this.xrLight == null) {\n                    return;\n                }\n                const scene = this.presentedScene;\n                scene.add(this.xrLight);\n                scene.environment = this.xrLight.environment;\n            });\n        }\n        const currentSession = await this.resolveARSession();\n        currentSession.addEventListener('end', () => {\n            this.postSessionCleanup();\n        }, { once: true });\n        const exitButton = scene.element.shadowRoot.querySelector('.slot.exit-webxr-ar-button');\n        exitButton.classList.add('enabled');\n        exitButton.addEventListener('click', this.onExitWebXRButtonContainerClick);\n        this.exitWebXRButtonContainer = exitButton;\n        const viewerRefSpace = await currentSession.requestReferenceSpace('viewer');\n        this.tracking = true;\n        this.frames = 0;\n        this.initialized = false;\n        this.turntableRotation = scene.yaw;\n        this.goalYaw = scene.yaw;\n        this.goalScale = 1;\n        scene.background = null;\n        this.oldShadowIntensity = scene.shadowIntensity;\n        scene.setShadowIntensity(0.01); // invisible, but not changing the shader\n        this.oldTarget.copy(scene.getTarget());\n        scene.element.addEventListener('load', this.onUpdateScene);\n        const radians = HIT_ANGLE_DEG * Math.PI / 180;\n        const ray = this.placeOnWall === true ?\n            undefined :\n            new XRRay(new DOMPoint(0, 0, 0), { x: 0, y: -Math.sin(radians), z: -Math.cos(radians) });\n        currentSession\n            .requestHitTestSource({ space: viewerRefSpace, offsetRay: ray }).then(hitTestSource => {\n            this.initialHitSource = hitTestSource;\n        });\n        this.currentSession = currentSession;\n        this.placementBox =\n            new _PlacementBox_js__WEBPACK_IMPORTED_MODULE_4__.PlacementBox(scene, this.placeOnWall ? 'back' : 'bottom');\n        this.placementComplete = false;\n        this.lastTick = performance.now();\n        this.dispatchEvent({ type: 'status', status: ARStatus.SESSION_STARTED });\n    }\n    /**\n     * If currently presenting a scene in AR, stops presentation and exits AR.\n     */\n    async stopPresenting() {\n        if (!this.isPresenting) {\n            return;\n        }\n        const cleanupPromise = new Promise((resolve) => {\n            this.resolveCleanup = resolve;\n        });\n        try {\n            await this.currentSession.end();\n            await cleanupPromise;\n        }\n        catch (error) {\n            console.warn('Error while trying to end WebXR AR session');\n            console.warn(error);\n            this.postSessionCleanup();\n        }\n    }\n    /**\n     * True if a scene is currently in the process of being presented in AR\n     */\n    get isPresenting() {\n        return this.presentedScene != null;\n    }\n    get target() {\n        return this.oldTarget;\n    }\n    updateTarget() {\n        const scene = this.presentedScene;\n        if (scene != null) {\n            const target = scene.getTarget();\n            this.oldTarget.copy(target);\n            if (this.placeOnWall) {\n                // Move the scene's target to the center of the back of the model's\n                // bounding box.\n                target.z = scene.boundingBox.min.z;\n            }\n            else {\n                // Move the scene's target to the model's floor height.\n                target.y = scene.boundingBox.min.y;\n            }\n            scene.setTarget(target.x, target.y, target.z);\n        }\n    }\n    postSessionCleanup() {\n        const session = this.currentSession;\n        if (session != null) {\n            session.removeEventListener('selectstart', this.onSelectStart);\n            session.removeEventListener('selectend', this.onSelectEnd);\n            this.currentSession = null;\n        }\n        const scene = this.presentedScene;\n        this._presentedScene = null;\n        if (scene != null) {\n            const { element } = scene;\n            if (this.xrLight != null) {\n                scene.remove(this.xrLight);\n                this.xrLight.dispose();\n                this.xrLight = null;\n            }\n            scene.position.set(0, 0, 0);\n            scene.scale.set(1, 1, 1);\n            scene.setShadowOffset(0);\n            const yaw = this.turntableRotation;\n            if (yaw != null) {\n                scene.yaw = yaw;\n            }\n            const intensity = this.oldShadowIntensity;\n            if (intensity != null) {\n                scene.setShadowIntensity(intensity);\n            }\n            scene.setEnvironmentAndSkybox(element[_features_environment_js__WEBPACK_IMPORTED_MODULE_0__.$currentEnvironmentMap], element[_features_environment_js__WEBPACK_IMPORTED_MODULE_0__.$currentBackground]);\n            const point = this.oldTarget;\n            scene.setTarget(point.x, point.y, point.z);\n            scene.xrCamera = null;\n            scene.element.removeEventListener('load', this.onUpdateScene);\n            scene.orientHotspots(0);\n            element.requestUpdate('cameraTarget');\n            element.requestUpdate('maxCameraOrbit');\n            element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onResize](element.getBoundingClientRect());\n        }\n        // Force the Renderer to update its size\n        this.renderer.height = 0;\n        const exitButton = this.exitWebXRButtonContainer;\n        if (exitButton != null) {\n            exitButton.classList.remove('enabled');\n            exitButton.removeEventListener('click', this.onExitWebXRButtonContainerClick);\n            this.exitWebXRButtonContainer = null;\n        }\n        const hitSource = this.transientHitTestSource;\n        if (hitSource != null) {\n            hitSource.cancel();\n            this.transientHitTestSource = null;\n        }\n        const hitSourceInitial = this.initialHitSource;\n        if (hitSourceInitial != null) {\n            hitSourceInitial.cancel();\n            this.initialHitSource = null;\n        }\n        if (this.placementBox != null) {\n            this.placementBox.dispose();\n            this.placementBox = null;\n        }\n        this.lastTick = null;\n        this.turntableRotation = null;\n        this.oldShadowIntensity = null;\n        this.frame = null;\n        this.inputSource = null;\n        this.overlay = null;\n        if (this.resolveCleanup != null) {\n            this.resolveCleanup();\n        }\n        this.dispatchEvent({ type: 'status', status: ARStatus.NOT_PRESENTING });\n    }\n    updateView(view) {\n        const scene = this.presentedScene;\n        const xr = this.threeRenderer.xr;\n        xr.updateCamera(camera);\n        scene.xrCamera = xr.getCamera();\n        const { elements } = scene.getCamera().matrixWorld;\n        scene.orientHotspots(Math.atan2(elements[1], elements[5]));\n        if (!this.initialized) {\n            this.placeInitially();\n            this.initialized = true;\n        }\n        // Use automatic dynamic viewport scaling if supported.\n        if (view.requestViewportScale && view.recommendedViewportScale) {\n            const scale = view.recommendedViewportScale;\n            view.requestViewportScale(Math.max(scale, MIN_VIEWPORT_SCALE));\n        }\n        const layer = this.currentSession.renderState.baseLayer;\n        const viewport = layer.getViewport(view);\n        this.threeRenderer.setViewport(viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n    placeInitially() {\n        const scene = this.presentedScene;\n        const { position, element } = scene;\n        const xrCamera = scene.getCamera();\n        const { width, height } = this.overlay.getBoundingClientRect();\n        scene.setSize(width, height);\n        xrCamera.projectionMatrixInverse.copy(xrCamera.projectionMatrix).invert();\n        const { theta, radius } = element\n            .getCameraOrbit();\n        // Orient model to match the 3D camera view\n        const cameraDirection = xrCamera.getWorldDirection(vector3);\n        scene.yaw = Math.atan2(-cameraDirection.x, -cameraDirection.z) - theta;\n        this.goalYaw = scene.yaw;\n        position.copy(xrCamera.position)\n            .add(cameraDirection.multiplyScalar(radius));\n        this.updateTarget();\n        const target = scene.getTarget();\n        position.add(target).sub(this.oldTarget);\n        this.goalPosition.copy(position);\n        scene.setHotspotsVisibility(true);\n        const { session } = this.frame;\n        session.addEventListener('selectstart', this.onSelectStart);\n        session.addEventListener('selectend', this.onSelectEnd);\n        session\n            .requestHitTestSourceForTransientInput({ profile: 'generic-touchscreen' }).then(hitTestSource => {\n            this.transientHitTestSource = hitTestSource;\n        });\n    }\n    getTouchLocation() {\n        const { axes } = this.inputSource.gamepad;\n        let location = this.placementBox.getExpandedHit(this.presentedScene, axes[0], axes[1]);\n        if (location != null) {\n            vector3.copy(location).sub(this.presentedScene.getCamera().position);\n            if (vector3.length() > MAX_DISTANCE)\n                return null;\n        }\n        return location;\n    }\n    getHitPoint(hitResult) {\n        const refSpace = this.threeRenderer.xr.getReferenceSpace();\n        const pose = hitResult.getPose(refSpace);\n        if (pose == null) {\n            return null;\n        }\n        const hitMatrix = matrix4.fromArray(pose.transform.matrix);\n        if (this.placeOnWall === true) {\n            // Orient the model to the wall's normal vector.\n            this.goalYaw = Math.atan2(hitMatrix.elements[4], hitMatrix.elements[6]);\n        }\n        // Check that the y-coordinate of the normal is large enough that the normal\n        // is pointing up for floor placement; opposite for wall placement.\n        return hitMatrix.elements[5] > 0.75 !== this.placeOnWall ?\n            hitPosition.setFromMatrixPosition(hitMatrix) :\n            null;\n    }\n    moveToFloor(frame) {\n        const hitSource = this.initialHitSource;\n        if (hitSource == null) {\n            return;\n        }\n        const hitTestResults = frame.getHitTestResults(hitSource);\n        if (hitTestResults.length == 0) {\n            return;\n        }\n        const hit = hitTestResults[0];\n        const hitPoint = this.getHitPoint(hit);\n        if (hitPoint == null) {\n            return;\n        }\n        this.placementBox.show = true;\n        // If the user is translating, let the finger hit-ray take precedence and\n        // ignore this hit result.\n        if (!this.isTranslating) {\n            if (this.placeOnWall) {\n                this.goalPosition.copy(hitPoint);\n            }\n            else {\n                this.goalPosition.y = hitPoint.y;\n            }\n        }\n        hitSource.cancel();\n        this.initialHitSource = null;\n        this.dispatchEvent({ type: 'status', status: ARStatus.OBJECT_PLACED });\n    }\n    fingerPolar(fingers) {\n        const fingerOne = fingers[0].inputSource.gamepad.axes;\n        const fingerTwo = fingers[1].inputSource.gamepad.axes;\n        const deltaX = fingerTwo[0] - fingerOne[0];\n        const deltaY = fingerTwo[1] - fingerOne[1];\n        const angle = Math.atan2(deltaY, deltaX);\n        let deltaYaw = this.lastAngle - angle;\n        if (deltaYaw > Math.PI) {\n            deltaYaw -= 2 * Math.PI;\n        }\n        else if (deltaYaw < -Math.PI) {\n            deltaYaw += 2 * Math.PI;\n        }\n        this.lastAngle = angle;\n        return {\n            separation: Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n            deltaYaw: deltaYaw\n        };\n    }\n    processInput(frame) {\n        const hitSource = this.transientHitTestSource;\n        if (hitSource == null) {\n            return;\n        }\n        if (!this.isTranslating && !this.isTwoFingering && !this.isRotating) {\n            return;\n        }\n        const fingers = frame.getHitTestResultsForTransientInput(hitSource);\n        const scene = this.presentedScene;\n        const scale = scene.scale.x;\n        // Rotating, translating and scaling are mutually exclusive operations; only\n        // one can happen at a time, but we can switch during a gesture.\n        if (this.isTwoFingering) {\n            if (fingers.length < 2) {\n                // If we lose the second finger, stop scaling (in fact, stop processing\n                // input altogether until a new gesture starts).\n                this.isTwoFingering = false;\n            }\n            else {\n                const { separation, deltaYaw } = this.fingerPolar(fingers);\n                if (this.placeOnWall === false) {\n                    this.goalYaw += deltaYaw;\n                }\n                if (scene.canScale) {\n                    const scale = separation / this.firstRatio;\n                    this.goalScale =\n                        (scale < SCALE_SNAP_HIGH && scale > SCALE_SNAP_LOW) ? 1 : scale;\n                }\n            }\n            return;\n        }\n        else if (fingers.length === 2) {\n            // If we were rotating or translating and we get a second finger, switch\n            // to scaling instead.\n            this.isTranslating = false;\n            this.isRotating = false;\n            this.isTwoFingering = true;\n            const { separation } = this.fingerPolar(fingers);\n            this.firstRatio = separation / scale;\n            return;\n        }\n        if (this.isRotating) {\n            const angle = this.inputSource.gamepad.axes[0] * ROTATION_RATE;\n            this.goalYaw += angle - this.lastAngle;\n            this.lastAngle = angle;\n        }\n        else if (this.isTranslating) {\n            fingers.forEach(finger => {\n                if (finger.inputSource !== this.inputSource) {\n                    return;\n                }\n                let hit = null;\n                if (finger.results.length > 0) {\n                    hit = this.getHitPoint(finger.results[0]);\n                }\n                if (hit == null) {\n                    hit = this.getTouchLocation();\n                }\n                if (hit == null) {\n                    return;\n                }\n                this.goalPosition.sub(this.lastDragPosition);\n                if (this.placeOnWall === false) {\n                    const offset = hit.y - this.lastDragPosition.y;\n                    // When a lower floor is found, keep the model at the same height, but\n                    // drop the placement box to the floor. The model falls on select end.\n                    if (offset < 0) {\n                        this.placementBox.offsetHeight = offset / scale;\n                        this.presentedScene.setShadowOffset(offset);\n                        // Interpolate hit ray up to drag plane\n                        const cameraPosition = vector3.copy(scene.getCamera().position);\n                        const alpha = -offset / (cameraPosition.y - hit.y);\n                        cameraPosition.multiplyScalar(alpha);\n                        hit.multiplyScalar(1 - alpha).add(cameraPosition);\n                    }\n                }\n                this.goalPosition.add(hit);\n                this.lastDragPosition.copy(hit);\n            });\n        }\n    }\n    moveScene(delta) {\n        const scene = this.presentedScene;\n        const { position, yaw } = scene;\n        const boundingRadius = scene.boundingSphere.radius;\n        const goal = this.goalPosition;\n        const oldScale = scene.scale.x;\n        const box = this.placementBox;\n        if (!goal.equals(position) || this.goalScale !== oldScale) {\n            let { x, y, z } = position;\n            x = this.xDamper.update(x, goal.x, delta, boundingRadius);\n            y = this.yDamper.update(y, goal.y, delta, boundingRadius);\n            z = this.zDamper.update(z, goal.z, delta, boundingRadius);\n            position.set(x, y, z);\n            const newScale = this.scaleDamper.update(oldScale, this.goalScale, delta, 1);\n            scene.scale.set(newScale, newScale, newScale);\n            if (!this.isTranslating) {\n                const offset = goal.y - y;\n                if (this.placementComplete && this.placeOnWall === false) {\n                    box.offsetHeight = offset / newScale;\n                    scene.setShadowOffset(offset);\n                }\n                else if (offset === 0) {\n                    this.placementComplete = true;\n                    box.show = false;\n                    scene.setShadowIntensity(AR_SHADOW_INTENSITY);\n                }\n            }\n        }\n        box.updateOpacity(delta);\n        scene.updateTarget(delta);\n        // yaw must be updated last, since this also updates the shadow position.\n        scene.yaw = this.yawDamper.update(yaw, this.goalYaw, delta, Math.PI);\n    }\n    /**\n     * Only public to make it testable.\n     */\n    onWebXRFrame(time, frame) {\n        this.frame = frame;\n        ++this.frames;\n        const refSpace = this.threeRenderer.xr.getReferenceSpace();\n        const pose = frame.getViewerPose(refSpace);\n        if (pose == null && this.tracking === true && this.frames > INIT_FRAMES) {\n            this.tracking = false;\n            this.dispatchEvent({ type: 'tracking', status: ARTracking.NOT_TRACKING });\n        }\n        const scene = this.presentedScene;\n        if (pose == null || scene == null || !scene.element.loaded) {\n            this.threeRenderer.clear();\n            return;\n        }\n        if (this.tracking === false) {\n            this.tracking = true;\n            this.dispatchEvent({ type: 'tracking', status: ARTracking.TRACKING });\n        }\n        // WebXR may return multiple views, i.e. for headset AR. This\n        // isn't really supported at this point, but make a best-effort\n        // attempt to render other views also, using the first view\n        // as the main viewpoint.\n        let isFirstView = true;\n        for (const view of pose.views) {\n            this.updateView(view);\n            if (isFirstView) {\n                this.moveToFloor(frame);\n                this.processInput(frame);\n                const delta = time - this.lastTick;\n                this.moveScene(delta);\n                this.renderer.preRender(scene, time, delta);\n                this.lastTick = time;\n                scene.renderShadow(this.threeRenderer);\n            }\n            this.threeRenderer.render(scene, scene.getCamera());\n            isFirstView = false;\n        }\n    }\n}\n//# sourceMappingURL=ARRenderer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $evictionPolicy: () => (/* binding */ $evictionPolicy),\n/* harmony export */   $loader: () => (/* binding */ $loader),\n/* harmony export */   CachingGLTFLoader: () => (/* binding */ CachingGLTFLoader),\n/* harmony export */   loadWithLoader: () => (/* binding */ loadWithLoader)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_loaders_DRACOLoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/loaders/DRACOLoader.js */ \"(ssr)/./node_modules/three/examples/jsm/loaders/DRACOLoader.js\");\n/* harmony import */ var three_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/loaders/GLTFLoader.js */ \"(ssr)/./node_modules/three/examples/jsm/loaders/GLTFLoader.js\");\n/* harmony import */ var three_examples_jsm_loaders_KTX2Loader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/loaders/KTX2Loader.js */ \"(ssr)/./node_modules/three/examples/jsm/loaders/KTX2Loader.js\");\n/* harmony import */ var _utilities_cache_eviction_policy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/cache-eviction-policy.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/cache-eviction-policy.js\");\n/* harmony import */ var _gltf_instance_VariantMaterialLoaderPlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gltf-instance/VariantMaterialLoaderPlugin */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialLoaderPlugin.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\n\n\n\n\n\n/**\n * A helper to Promise-ify a Three.js GLTFLoader\n */\nconst loadWithLoader = (url, loader, progressCallback = () => { }) => {\n    const onProgress = (event) => {\n        const fraction = event.loaded / event.total;\n        progressCallback(Math.max(0, Math.min(1, isFinite(fraction) ? fraction : 1)));\n    };\n    return new Promise((resolve, reject) => {\n        loader.load(url, resolve, onProgress, reject);\n    });\n};\n/** Helper to load a script tag. */\nconst fetchScript = (src) => {\n    return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        document.body.appendChild(script);\n        script.onload = resolve;\n        script.onerror = reject;\n        script.async = true;\n        script.src = src;\n    });\n};\nconst cache = new Map();\nconst preloaded = new Map();\nlet dracoDecoderLocation;\nconst dracoLoader = new three_examples_jsm_loaders_DRACOLoader_js__WEBPACK_IMPORTED_MODULE_2__.DRACOLoader();\nlet ktx2TranscoderLocation;\nconst ktx2Loader = new three_examples_jsm_loaders_KTX2Loader_js__WEBPACK_IMPORTED_MODULE_3__.KTX2Loader();\nlet meshoptDecoderLocation;\nlet meshoptDecoder;\nconst $loader = Symbol('loader');\nconst $evictionPolicy = Symbol('evictionPolicy');\nconst $GLTFInstance = Symbol('GLTFInstance');\nclass CachingGLTFLoader extends three__WEBPACK_IMPORTED_MODULE_4__.EventDispatcher {\n    constructor(GLTFInstance) {\n        super();\n        this[_b] = new three_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.GLTFLoader().register(parser => new _gltf_instance_VariantMaterialLoaderPlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"](parser));\n        this[$GLTFInstance] = GLTFInstance;\n        this[$loader].setDRACOLoader(dracoLoader);\n        this[$loader].setKTX2Loader(ktx2Loader);\n    }\n    static setDRACODecoderLocation(url) {\n        dracoDecoderLocation = url;\n        dracoLoader.setDecoderPath(url);\n    }\n    static getDRACODecoderLocation() {\n        return dracoDecoderLocation;\n    }\n    static setKTX2TranscoderLocation(url) {\n        ktx2TranscoderLocation = url;\n        ktx2Loader.setTranscoderPath(url);\n    }\n    static getKTX2TranscoderLocation() {\n        return ktx2TranscoderLocation;\n    }\n    static setMeshoptDecoderLocation(url) {\n        if (meshoptDecoderLocation !== url) {\n            meshoptDecoderLocation = url;\n            meshoptDecoder = fetchScript(url)\n                .then(() => MeshoptDecoder.ready)\n                .then(() => MeshoptDecoder);\n        }\n    }\n    static getMeshoptDecoderLocation() {\n        return meshoptDecoderLocation;\n    }\n    static initializeKTX2Loader(renderer) {\n        ktx2Loader.detectSupport(renderer);\n    }\n    static get cache() {\n        return cache;\n    }\n    /** @nocollapse */\n    static clearCache() {\n        cache.forEach((_value, url) => {\n            this.delete(url);\n        });\n        this[$evictionPolicy].reset();\n    }\n    static has(url) {\n        return cache.has(url);\n    }\n    /** @nocollapse */\n    static async delete(url) {\n        if (!this.has(url)) {\n            return;\n        }\n        const gltfLoads = cache.get(url);\n        preloaded.delete(url);\n        cache.delete(url);\n        const gltf = await gltfLoads;\n        // Dispose of the cached glTF's materials and geometries:\n        gltf.dispose();\n    }\n    /**\n     * Returns true if the model that corresponds to the specified url is\n     * available in our local cache.\n     */\n    static hasFinishedLoading(url) {\n        return !!preloaded.get(url);\n    }\n    get [(_a = $evictionPolicy, _b = $loader, $evictionPolicy)]() {\n        return this.constructor[$evictionPolicy];\n    }\n    /**\n     * Preloads a glTF, populating the cache. Returns a promise that resolves\n     * when the cache is populated.\n     */\n    async preload(url, element, progressCallback = () => { }) {\n        this[$loader].setWithCredentials(CachingGLTFLoader.withCredentials);\n        this.dispatchEvent({ type: 'preload', element: element, src: url });\n        if (!cache.has(url)) {\n            if (meshoptDecoder != null) {\n                this[$loader].setMeshoptDecoder(await meshoptDecoder);\n            }\n            const rawGLTFLoads = loadWithLoader(url, this[$loader], (progress) => {\n                progressCallback(progress * 0.8);\n            });\n            const GLTFInstance = this[$GLTFInstance];\n            const gltfInstanceLoads = rawGLTFLoads\n                .then((rawGLTF) => {\n                return GLTFInstance.prepare(rawGLTF);\n            })\n                .then((preparedGLTF) => {\n                progressCallback(0.9);\n                return new GLTFInstance(preparedGLTF);\n            })\n                .catch((reason => {\n                console.error(reason);\n                return new GLTFInstance();\n            }));\n            cache.set(url, gltfInstanceLoads);\n        }\n        await cache.get(url);\n        preloaded.set(url, true);\n        if (progressCallback) {\n            progressCallback(1.0);\n        }\n    }\n    /**\n     * Loads a glTF from the specified url and resolves a unique clone of the\n     * glTF. If the glTF has already been loaded, makes a clone of the cached\n     * copy.\n     */\n    async load(url, element, progressCallback = () => { }) {\n        await this.preload(url, element, progressCallback);\n        const gltf = await cache.get(url);\n        const clone = await gltf.clone();\n        this[$evictionPolicy].retain(url);\n        // Patch dispose so that we can properly account for instance use\n        // in the caching layer:\n        clone.dispose = () => {\n            this[$evictionPolicy].release(url);\n        };\n        return clone;\n    }\n}\nCachingGLTFLoader[_a] = new _utilities_cache_eviction_policy_js__WEBPACK_IMPORTED_MODULE_0__.CacheEvictionPolicy(CachingGLTFLoader);\n//# sourceMappingURL=CachingGLTFLoader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Damper.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DECAY_MILLISECONDS: () => (/* binding */ DECAY_MILLISECONDS),\n/* harmony export */   Damper: () => (/* binding */ Damper),\n/* harmony export */   SETTLING_TIME: () => (/* binding */ SETTLING_TIME)\n/* harmony export */ });\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SETTLING_TIME = 10000; // plenty long enough\nconst MIN_DECAY_MILLISECONDS = 0.001;\nconst DECAY_MILLISECONDS = 50;\n/**\n * The Damper class is a generic second-order critically damped system that does\n * one linear step of the desired length of time. The only parameter is\n * DECAY_MILLISECONDS. This common parameter makes all states converge at the\n * same rate regardless of scale. xNormalization is a number to provide the\n * rough scale of x, such that NIL_SPEED clamping also happens at roughly the\n * same convergence for all states.\n */\nclass Damper {\n    constructor(decayMilliseconds = DECAY_MILLISECONDS) {\n        this.velocity = 0;\n        this.naturalFrequency = 0;\n        this.setDecayTime(decayMilliseconds);\n    }\n    setDecayTime(decayMilliseconds) {\n        this.naturalFrequency =\n            1 / Math.max(MIN_DECAY_MILLISECONDS, decayMilliseconds);\n    }\n    update(x, xGoal, timeStepMilliseconds, xNormalization) {\n        const nilSpeed = 0.0002 * this.naturalFrequency;\n        if (x == null || xNormalization === 0) {\n            return xGoal;\n        }\n        if (x === xGoal && this.velocity === 0) {\n            return xGoal;\n        }\n        if (timeStepMilliseconds < 0) {\n            return x;\n        }\n        // Exact solution to a critically damped second-order system, where:\n        // acceleration = this.naturalFrequency * this.naturalFrequency * (xGoal\n        // - x) - 2 * this.naturalFrequency * this.velocity;\n        const deltaX = (x - xGoal);\n        const intermediateVelocity = this.velocity + this.naturalFrequency * deltaX;\n        const intermediateX = deltaX + timeStepMilliseconds * intermediateVelocity;\n        const decay = Math.exp(-this.naturalFrequency * timeStepMilliseconds);\n        const newVelocity = (intermediateVelocity - this.naturalFrequency * intermediateX) * decay;\n        const acceleration = -this.naturalFrequency * (newVelocity + intermediateVelocity * decay);\n        if (Math.abs(newVelocity) < nilSpeed * Math.abs(xNormalization) &&\n            acceleration * deltaX >= 0) {\n            // This ensures the controls settle and stop calling this function instead\n            // of asymptotically approaching their goal.\n            this.velocity = 0;\n            return xGoal;\n        }\n        else {\n            this.velocity = newVelocity;\n            return xGoal + intermediateX * decay;\n        }\n    }\n}\n//# sourceMappingURL=Damper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRGFtcGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkI7QUFDcEM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRGFtcGVyLmpzP2U2NzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNFVFRMSU5HX1RJTUUgPSAxMDAwMDsgLy8gcGxlbnR5IGxvbmcgZW5vdWdoXG5jb25zdCBNSU5fREVDQVlfTUlMTElTRUNPTkRTID0gMC4wMDE7XG5leHBvcnQgY29uc3QgREVDQVlfTUlMTElTRUNPTkRTID0gNTA7XG4vKipcbiAqIFRoZSBEYW1wZXIgY2xhc3MgaXMgYSBnZW5lcmljIHNlY29uZC1vcmRlciBjcml0aWNhbGx5IGRhbXBlZCBzeXN0ZW0gdGhhdCBkb2VzXG4gKiBvbmUgbGluZWFyIHN0ZXAgb2YgdGhlIGRlc2lyZWQgbGVuZ3RoIG9mIHRpbWUuIFRoZSBvbmx5IHBhcmFtZXRlciBpc1xuICogREVDQVlfTUlMTElTRUNPTkRTLiBUaGlzIGNvbW1vbiBwYXJhbWV0ZXIgbWFrZXMgYWxsIHN0YXRlcyBjb252ZXJnZSBhdCB0aGVcbiAqIHNhbWUgcmF0ZSByZWdhcmRsZXNzIG9mIHNjYWxlLiB4Tm9ybWFsaXphdGlvbiBpcyBhIG51bWJlciB0byBwcm92aWRlIHRoZVxuICogcm91Z2ggc2NhbGUgb2YgeCwgc3VjaCB0aGF0IE5JTF9TUEVFRCBjbGFtcGluZyBhbHNvIGhhcHBlbnMgYXQgcm91Z2hseSB0aGVcbiAqIHNhbWUgY29udmVyZ2VuY2UgZm9yIGFsbCBzdGF0ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBEYW1wZXIge1xuICAgIGNvbnN0cnVjdG9yKGRlY2F5TWlsbGlzZWNvbmRzID0gREVDQVlfTUlMTElTRUNPTkRTKSB7XG4gICAgICAgIHRoaXMudmVsb2NpdHkgPSAwO1xuICAgICAgICB0aGlzLm5hdHVyYWxGcmVxdWVuY3kgPSAwO1xuICAgICAgICB0aGlzLnNldERlY2F5VGltZShkZWNheU1pbGxpc2Vjb25kcyk7XG4gICAgfVxuICAgIHNldERlY2F5VGltZShkZWNheU1pbGxpc2Vjb25kcykge1xuICAgICAgICB0aGlzLm5hdHVyYWxGcmVxdWVuY3kgPVxuICAgICAgICAgICAgMSAvIE1hdGgubWF4KE1JTl9ERUNBWV9NSUxMSVNFQ09ORFMsIGRlY2F5TWlsbGlzZWNvbmRzKTtcbiAgICB9XG4gICAgdXBkYXRlKHgsIHhHb2FsLCB0aW1lU3RlcE1pbGxpc2Vjb25kcywgeE5vcm1hbGl6YXRpb24pIHtcbiAgICAgICAgY29uc3QgbmlsU3BlZWQgPSAwLjAwMDIgKiB0aGlzLm5hdHVyYWxGcmVxdWVuY3k7XG4gICAgICAgIGlmICh4ID09IG51bGwgfHwgeE5vcm1hbGl6YXRpb24gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB4R29hbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeCA9PT0geEdvYWwgJiYgdGhpcy52ZWxvY2l0eSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHhHb2FsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lU3RlcE1pbGxpc2Vjb25kcyA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4YWN0IHNvbHV0aW9uIHRvIGEgY3JpdGljYWxseSBkYW1wZWQgc2Vjb25kLW9yZGVyIHN5c3RlbSwgd2hlcmU6XG4gICAgICAgIC8vIGFjY2VsZXJhdGlvbiA9IHRoaXMubmF0dXJhbEZyZXF1ZW5jeSAqIHRoaXMubmF0dXJhbEZyZXF1ZW5jeSAqICh4R29hbFxuICAgICAgICAvLyAtIHgpIC0gMiAqIHRoaXMubmF0dXJhbEZyZXF1ZW5jeSAqIHRoaXMudmVsb2NpdHk7XG4gICAgICAgIGNvbnN0IGRlbHRhWCA9ICh4IC0geEdvYWwpO1xuICAgICAgICBjb25zdCBpbnRlcm1lZGlhdGVWZWxvY2l0eSA9IHRoaXMudmVsb2NpdHkgKyB0aGlzLm5hdHVyYWxGcmVxdWVuY3kgKiBkZWx0YVg7XG4gICAgICAgIGNvbnN0IGludGVybWVkaWF0ZVggPSBkZWx0YVggKyB0aW1lU3RlcE1pbGxpc2Vjb25kcyAqIGludGVybWVkaWF0ZVZlbG9jaXR5O1xuICAgICAgICBjb25zdCBkZWNheSA9IE1hdGguZXhwKC10aGlzLm5hdHVyYWxGcmVxdWVuY3kgKiB0aW1lU3RlcE1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGNvbnN0IG5ld1ZlbG9jaXR5ID0gKGludGVybWVkaWF0ZVZlbG9jaXR5IC0gdGhpcy5uYXR1cmFsRnJlcXVlbmN5ICogaW50ZXJtZWRpYXRlWCkgKiBkZWNheTtcbiAgICAgICAgY29uc3QgYWNjZWxlcmF0aW9uID0gLXRoaXMubmF0dXJhbEZyZXF1ZW5jeSAqIChuZXdWZWxvY2l0eSArIGludGVybWVkaWF0ZVZlbG9jaXR5ICogZGVjYXkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobmV3VmVsb2NpdHkpIDwgbmlsU3BlZWQgKiBNYXRoLmFicyh4Tm9ybWFsaXphdGlvbikgJiZcbiAgICAgICAgICAgIGFjY2VsZXJhdGlvbiAqIGRlbHRhWCA+PSAwKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGVuc3VyZXMgdGhlIGNvbnRyb2xzIHNldHRsZSBhbmQgc3RvcCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gaW5zdGVhZFxuICAgICAgICAgICAgLy8gb2YgYXN5bXB0b3RpY2FsbHkgYXBwcm9hY2hpbmcgdGhlaXIgZ29hbC5cbiAgICAgICAgICAgIHRoaXMudmVsb2NpdHkgPSAwO1xuICAgICAgICAgICAgcmV0dXJuIHhHb2FsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52ZWxvY2l0eSA9IG5ld1ZlbG9jaXR5O1xuICAgICAgICAgICAgcmV0dXJuIHhHb2FsICsgaW50ZXJtZWRpYXRlWCAqIGRlY2F5O1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGFtcGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Debugger.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Debugger.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Debugger: () => (/* binding */ Debugger)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This Debugger exposes internal details of the <model-viewer> rendering\n * substructure so that external tools can more easily inspect and operate on\n * them.\n *\n * It also activates shader debugging on the associated GL context. Shader\n * debugging trades performance for useful error information, so it is not\n * recommended to activate this unless needed.\n */\nclass Debugger {\n    constructor(renderer) {\n        // Force WebGL shader debugging on:\n        renderer.threeRenderer.debug = { checkShaderErrors: true };\n        // Announce debug details at microtask timing to give the `Renderer`\n        // constructor time to complete its initialization, just to be on the safe\n        // side:\n        Promise.resolve().then(() => {\n            self.dispatchEvent(new CustomEvent('model-viewer-renderer-debug', {\n                detail: {\n                    renderer,\n                    THREE: {\n                        ShaderMaterial: three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial,\n                        Texture: three__WEBPACK_IMPORTED_MODULE_0__.Texture,\n                        Mesh: three__WEBPACK_IMPORTED_MODULE_0__.Mesh,\n                        Scene: three__WEBPACK_IMPORTED_MODULE_0__.Scene,\n                        PlaneGeometry: three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry,\n                        OrthographicCamera: three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera,\n                        WebGLRenderTarget: three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget\n                    }\n                }\n            }));\n        });\n    }\n    addScene(scene) {\n        self.dispatchEvent(new CustomEvent('model-viewer-scene-added-debug', { detail: { scene } }));\n    }\n    removeScene(scene) {\n        self.dispatchEvent(new CustomEvent('model-viewer-scene-removed-debug', { detail: { scene } }));\n    }\n}\n//# sourceMappingURL=Debugger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRGVidWdnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ21IO0FBQ25IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLCtCQUErQjtBQUMvQiw0QkFBNEI7QUFDNUIsNkJBQTZCO0FBQzdCLHFDQUFxQztBQUNyQywwQ0FBMEM7QUFDMUMseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSwrRUFBK0UsVUFBVSxTQUFTO0FBQ2xHO0FBQ0E7QUFDQSxpRkFBaUYsVUFBVSxTQUFTO0FBQ3BHO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25mdC1taW50aW5nLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi90aHJlZS1jb21wb25lbnRzL0RlYnVnZ2VyLmpzPzdiMDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgTWVzaCwgT3J0aG9ncmFwaGljQ2FtZXJhLCBQbGFuZUdlb21ldHJ5LCBTY2VuZSwgU2hhZGVyTWF0ZXJpYWwsIFRleHR1cmUsIFdlYkdMUmVuZGVyVGFyZ2V0IH0gZnJvbSAndGhyZWUnO1xuLyoqXG4gKiBUaGlzIERlYnVnZ2VyIGV4cG9zZXMgaW50ZXJuYWwgZGV0YWlscyBvZiB0aGUgPG1vZGVsLXZpZXdlcj4gcmVuZGVyaW5nXG4gKiBzdWJzdHJ1Y3R1cmUgc28gdGhhdCBleHRlcm5hbCB0b29scyBjYW4gbW9yZSBlYXNpbHkgaW5zcGVjdCBhbmQgb3BlcmF0ZSBvblxuICogdGhlbS5cbiAqXG4gKiBJdCBhbHNvIGFjdGl2YXRlcyBzaGFkZXIgZGVidWdnaW5nIG9uIHRoZSBhc3NvY2lhdGVkIEdMIGNvbnRleHQuIFNoYWRlclxuICogZGVidWdnaW5nIHRyYWRlcyBwZXJmb3JtYW5jZSBmb3IgdXNlZnVsIGVycm9yIGluZm9ybWF0aW9uLCBzbyBpdCBpcyBub3RcbiAqIHJlY29tbWVuZGVkIHRvIGFjdGl2YXRlIHRoaXMgdW5sZXNzIG5lZWRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIERlYnVnZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgICAgICAvLyBGb3JjZSBXZWJHTCBzaGFkZXIgZGVidWdnaW5nIG9uOlxuICAgICAgICByZW5kZXJlci50aHJlZVJlbmRlcmVyLmRlYnVnID0geyBjaGVja1NoYWRlckVycm9yczogdHJ1ZSB9O1xuICAgICAgICAvLyBBbm5vdW5jZSBkZWJ1ZyBkZXRhaWxzIGF0IG1pY3JvdGFzayB0aW1pbmcgdG8gZ2l2ZSB0aGUgYFJlbmRlcmVyYFxuICAgICAgICAvLyBjb25zdHJ1Y3RvciB0aW1lIHRvIGNvbXBsZXRlIGl0cyBpbml0aWFsaXphdGlvbiwganVzdCB0byBiZSBvbiB0aGUgc2FmZVxuICAgICAgICAvLyBzaWRlOlxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ21vZGVsLXZpZXdlci1yZW5kZXJlci1kZWJ1ZycsIHtcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIsXG4gICAgICAgICAgICAgICAgICAgIFRIUkVFOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTaGFkZXJNYXRlcmlhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRleHR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBNZXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgU2NlbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBQbGFuZUdlb21ldHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgT3J0aG9ncmFwaGljQ2FtZXJhLFxuICAgICAgICAgICAgICAgICAgICAgICAgV2ViR0xSZW5kZXJUYXJnZXRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFkZFNjZW5lKHNjZW5lKSB7XG4gICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ21vZGVsLXZpZXdlci1zY2VuZS1hZGRlZC1kZWJ1ZycsIHsgZGV0YWlsOiB7IHNjZW5lIH0gfSkpO1xuICAgIH1cbiAgICByZW1vdmVTY2VuZShzY2VuZSkge1xuICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdtb2RlbC12aWV3ZXItc2NlbmUtcmVtb3ZlZC1kZWJ1ZycsIHsgZGV0YWlsOiB7IHNjZW5lIH0gfSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlYnVnZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Debugger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentScene.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/EnvironmentScene.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EnvironmentScene)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass EnvironmentScene extends three__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    constructor() {\n        super();\n        this.position.y = -3.5;\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry();\n        geometry.deleteAttribute('uv');\n        const roomMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ metalness: 0, side: three__WEBPACK_IMPORTED_MODULE_0__.BackSide });\n        const boxMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ metalness: 0 });\n        const mainLight = new three__WEBPACK_IMPORTED_MODULE_0__.PointLight(0xffffff, 500.0, 28, 2);\n        mainLight.position.set(0.418, 16.199, 0.300);\n        this.add(mainLight);\n        const room = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, roomMaterial);\n        room.position.set(-0.757, 13.219, 0.717);\n        room.scale.set(31.713, 28.305, 28.591);\n        this.add(room);\n        const box1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box1.position.set(-10.906, 2.009, 1.846);\n        box1.rotation.set(0, -0.195, 0);\n        box1.scale.set(2.328, 7.905, 4.651);\n        this.add(box1);\n        const box2 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box2.position.set(-5.607, -0.754, -0.758);\n        box2.rotation.set(0, 0.994, 0);\n        box2.scale.set(1.970, 1.534, 3.955);\n        this.add(box2);\n        const box3 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box3.position.set(6.167, 0.857, 7.803);\n        box3.rotation.set(0, 0.561, 0);\n        box3.scale.set(3.927, 6.285, 3.687);\n        this.add(box3);\n        const box4 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box4.position.set(-2.017, 0.018, 6.124);\n        box4.rotation.set(0, 0.333, 0);\n        box4.scale.set(2.002, 4.566, 2.064);\n        this.add(box4);\n        const box5 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box5.position.set(2.291, -0.756, -2.621);\n        box5.rotation.set(0, -0.286, 0);\n        box5.scale.set(1.546, 1.552, 1.496);\n        this.add(box5);\n        const box6 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box6.position.set(-2.193, -0.369, -5.547);\n        box6.rotation.set(0, 0.516, 0);\n        box6.scale.set(3.875, 3.487, 2.986);\n        this.add(box6);\n        // -x right\n        const light1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(50));\n        light1.position.set(-16.116, 14.37, 8.208);\n        light1.scale.set(0.1, 2.428, 2.739);\n        this.add(light1);\n        // -x left\n        const light2 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(50));\n        light2.position.set(-16.109, 18.021, -8.207);\n        light2.scale.set(0.1, 2.425, 2.751);\n        this.add(light2);\n        // +x\n        const light3 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(17));\n        light3.position.set(14.904, 12.198, -1.832);\n        light3.scale.set(0.15, 4.265, 6.331);\n        this.add(light3);\n        // +z\n        const light4 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(43));\n        light4.position.set(-0.462, 8.89, 14.520);\n        light4.scale.set(4.38, 5.441, 0.088);\n        this.add(light4);\n        // -z\n        const light5 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(20));\n        light5.position.set(3.235, 11.486, -12.541);\n        light5.scale.set(2.5, 2.0, 0.1);\n        this.add(light5);\n        // +y\n        const light6 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(100));\n        light6.position.set(0.0, 20.0, 0.0);\n        light6.scale.set(1.0, 0.1, 1.0);\n        this.add(light6);\n    }\n    createAreaLightMaterial(intensity) {\n        const material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial();\n        material.color.setScalar(intensity);\n        return material;\n    }\n}\n//# sourceMappingURL=EnvironmentScene.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRW52aXJvbm1lbnRTY2VuZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0g7QUFDakcsK0JBQStCLHdDQUFLO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw4Q0FBVztBQUN4QztBQUNBLGlDQUFpQyx1REFBb0IsR0FBRyxvQkFBb0IsMkNBQVEsRUFBRTtBQUN0RixnQ0FBZ0MsdURBQW9CLEdBQUcsY0FBYztBQUNyRSw4QkFBOEIsNkNBQVU7QUFDeEM7QUFDQTtBQUNBLHlCQUF5Qix1Q0FBSTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9EQUFpQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRW52aXJvbm1lbnRTY2VuZS5qcz83MGYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEJhY2tTaWRlLCBCb3hHZW9tZXRyeSwgTWVzaCwgTWVzaEJhc2ljTWF0ZXJpYWwsIE1lc2hTdGFuZGFyZE1hdGVyaWFsLCBQb2ludExpZ2h0LCBTY2VuZSB9IGZyb20gJ3RocmVlJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudmlyb25tZW50U2NlbmUgZXh0ZW5kcyBTY2VuZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24ueSA9IC0zLjU7XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KCk7XG4gICAgICAgIGdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSgndXYnKTtcbiAgICAgICAgY29uc3Qgcm9vbU1hdGVyaWFsID0gbmV3IE1lc2hTdGFuZGFyZE1hdGVyaWFsKHsgbWV0YWxuZXNzOiAwLCBzaWRlOiBCYWNrU2lkZSB9KTtcbiAgICAgICAgY29uc3QgYm94TWF0ZXJpYWwgPSBuZXcgTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBtZXRhbG5lc3M6IDAgfSk7XG4gICAgICAgIGNvbnN0IG1haW5MaWdodCA9IG5ldyBQb2ludExpZ2h0KDB4ZmZmZmZmLCA1MDAuMCwgMjgsIDIpO1xuICAgICAgICBtYWluTGlnaHQucG9zaXRpb24uc2V0KDAuNDE4LCAxNi4xOTksIDAuMzAwKTtcbiAgICAgICAgdGhpcy5hZGQobWFpbkxpZ2h0KTtcbiAgICAgICAgY29uc3Qgcm9vbSA9IG5ldyBNZXNoKGdlb21ldHJ5LCByb29tTWF0ZXJpYWwpO1xuICAgICAgICByb29tLnBvc2l0aW9uLnNldCgtMC43NTcsIDEzLjIxOSwgMC43MTcpO1xuICAgICAgICByb29tLnNjYWxlLnNldCgzMS43MTMsIDI4LjMwNSwgMjguNTkxKTtcbiAgICAgICAgdGhpcy5hZGQocm9vbSk7XG4gICAgICAgIGNvbnN0IGJveDEgPSBuZXcgTWVzaChnZW9tZXRyeSwgYm94TWF0ZXJpYWwpO1xuICAgICAgICBib3gxLnBvc2l0aW9uLnNldCgtMTAuOTA2LCAyLjAwOSwgMS44NDYpO1xuICAgICAgICBib3gxLnJvdGF0aW9uLnNldCgwLCAtMC4xOTUsIDApO1xuICAgICAgICBib3gxLnNjYWxlLnNldCgyLjMyOCwgNy45MDUsIDQuNjUxKTtcbiAgICAgICAgdGhpcy5hZGQoYm94MSk7XG4gICAgICAgIGNvbnN0IGJveDIgPSBuZXcgTWVzaChnZW9tZXRyeSwgYm94TWF0ZXJpYWwpO1xuICAgICAgICBib3gyLnBvc2l0aW9uLnNldCgtNS42MDcsIC0wLjc1NCwgLTAuNzU4KTtcbiAgICAgICAgYm94Mi5yb3RhdGlvbi5zZXQoMCwgMC45OTQsIDApO1xuICAgICAgICBib3gyLnNjYWxlLnNldCgxLjk3MCwgMS41MzQsIDMuOTU1KTtcbiAgICAgICAgdGhpcy5hZGQoYm94Mik7XG4gICAgICAgIGNvbnN0IGJveDMgPSBuZXcgTWVzaChnZW9tZXRyeSwgYm94TWF0ZXJpYWwpO1xuICAgICAgICBib3gzLnBvc2l0aW9uLnNldCg2LjE2NywgMC44NTcsIDcuODAzKTtcbiAgICAgICAgYm94My5yb3RhdGlvbi5zZXQoMCwgMC41NjEsIDApO1xuICAgICAgICBib3gzLnNjYWxlLnNldCgzLjkyNywgNi4yODUsIDMuNjg3KTtcbiAgICAgICAgdGhpcy5hZGQoYm94Myk7XG4gICAgICAgIGNvbnN0IGJveDQgPSBuZXcgTWVzaChnZW9tZXRyeSwgYm94TWF0ZXJpYWwpO1xuICAgICAgICBib3g0LnBvc2l0aW9uLnNldCgtMi4wMTcsIDAuMDE4LCA2LjEyNCk7XG4gICAgICAgIGJveDQucm90YXRpb24uc2V0KDAsIDAuMzMzLCAwKTtcbiAgICAgICAgYm94NC5zY2FsZS5zZXQoMi4wMDIsIDQuNTY2LCAyLjA2NCk7XG4gICAgICAgIHRoaXMuYWRkKGJveDQpO1xuICAgICAgICBjb25zdCBib3g1ID0gbmV3IE1lc2goZ2VvbWV0cnksIGJveE1hdGVyaWFsKTtcbiAgICAgICAgYm94NS5wb3NpdGlvbi5zZXQoMi4yOTEsIC0wLjc1NiwgLTIuNjIxKTtcbiAgICAgICAgYm94NS5yb3RhdGlvbi5zZXQoMCwgLTAuMjg2LCAwKTtcbiAgICAgICAgYm94NS5zY2FsZS5zZXQoMS41NDYsIDEuNTUyLCAxLjQ5Nik7XG4gICAgICAgIHRoaXMuYWRkKGJveDUpO1xuICAgICAgICBjb25zdCBib3g2ID0gbmV3IE1lc2goZ2VvbWV0cnksIGJveE1hdGVyaWFsKTtcbiAgICAgICAgYm94Ni5wb3NpdGlvbi5zZXQoLTIuMTkzLCAtMC4zNjksIC01LjU0Nyk7XG4gICAgICAgIGJveDYucm90YXRpb24uc2V0KDAsIDAuNTE2LCAwKTtcbiAgICAgICAgYm94Ni5zY2FsZS5zZXQoMy44NzUsIDMuNDg3LCAyLjk4Nik7XG4gICAgICAgIHRoaXMuYWRkKGJveDYpO1xuICAgICAgICAvLyAteCByaWdodFxuICAgICAgICBjb25zdCBsaWdodDEgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCg1MCkpO1xuICAgICAgICBsaWdodDEucG9zaXRpb24uc2V0KC0xNi4xMTYsIDE0LjM3LCA4LjIwOCk7XG4gICAgICAgIGxpZ2h0MS5zY2FsZS5zZXQoMC4xLCAyLjQyOCwgMi43MzkpO1xuICAgICAgICB0aGlzLmFkZChsaWdodDEpO1xuICAgICAgICAvLyAteCBsZWZ0XG4gICAgICAgIGNvbnN0IGxpZ2h0MiA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDUwKSk7XG4gICAgICAgIGxpZ2h0Mi5wb3NpdGlvbi5zZXQoLTE2LjEwOSwgMTguMDIxLCAtOC4yMDcpO1xuICAgICAgICBsaWdodDIuc2NhbGUuc2V0KDAuMSwgMi40MjUsIDIuNzUxKTtcbiAgICAgICAgdGhpcy5hZGQobGlnaHQyKTtcbiAgICAgICAgLy8gK3hcbiAgICAgICAgY29uc3QgbGlnaHQzID0gbmV3IE1lc2goZ2VvbWV0cnksIHRoaXMuY3JlYXRlQXJlYUxpZ2h0TWF0ZXJpYWwoMTcpKTtcbiAgICAgICAgbGlnaHQzLnBvc2l0aW9uLnNldCgxNC45MDQsIDEyLjE5OCwgLTEuODMyKTtcbiAgICAgICAgbGlnaHQzLnNjYWxlLnNldCgwLjE1LCA0LjI2NSwgNi4zMzEpO1xuICAgICAgICB0aGlzLmFkZChsaWdodDMpO1xuICAgICAgICAvLyArelxuICAgICAgICBjb25zdCBsaWdodDQgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCg0MykpO1xuICAgICAgICBsaWdodDQucG9zaXRpb24uc2V0KC0wLjQ2MiwgOC44OSwgMTQuNTIwKTtcbiAgICAgICAgbGlnaHQ0LnNjYWxlLnNldCg0LjM4LCA1LjQ0MSwgMC4wODgpO1xuICAgICAgICB0aGlzLmFkZChsaWdodDQpO1xuICAgICAgICAvLyAtelxuICAgICAgICBjb25zdCBsaWdodDUgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCgyMCkpO1xuICAgICAgICBsaWdodDUucG9zaXRpb24uc2V0KDMuMjM1LCAxMS40ODYsIC0xMi41NDEpO1xuICAgICAgICBsaWdodDUuc2NhbGUuc2V0KDIuNSwgMi4wLCAwLjEpO1xuICAgICAgICB0aGlzLmFkZChsaWdodDUpO1xuICAgICAgICAvLyAreVxuICAgICAgICBjb25zdCBsaWdodDYgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCgxMDApKTtcbiAgICAgICAgbGlnaHQ2LnBvc2l0aW9uLnNldCgwLjAsIDIwLjAsIDAuMCk7XG4gICAgICAgIGxpZ2h0Ni5zY2FsZS5zZXQoMS4wLCAwLjEsIDEuMCk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0Nik7XG4gICAgfVxuICAgIGNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKGludGVuc2l0eSkge1xuICAgICAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgpO1xuICAgICAgICBtYXRlcmlhbC5jb2xvci5zZXRTY2FsYXIoaW50ZW5zaXR5KTtcbiAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVudmlyb25tZW50U2NlbmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentScene.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentSceneAlt.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/EnvironmentSceneAlt.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EnvironmentSceneAlt)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass EnvironmentSceneAlt extends three__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    constructor() {\n        super();\n        this.position.y = -3.5;\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry();\n        geometry.deleteAttribute('uv');\n        const roomMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ metalness: 0, side: three__WEBPACK_IMPORTED_MODULE_0__.BackSide });\n        const boxMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ metalness: 0 });\n        const mainLight = new three__WEBPACK_IMPORTED_MODULE_0__.PointLight(0xffffff, 400.0, 28, 2);\n        mainLight.position.set(0.5, 14.0, 0.5);\n        this.add(mainLight);\n        const room = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, roomMaterial);\n        room.position.set(0.0, 13.2, 0.0);\n        room.scale.set(31.5, 28.5, 31.5);\n        this.add(room);\n        const box1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box1.position.set(-10.906, -1.0, 1.846);\n        box1.rotation.set(0, -0.195, 0);\n        box1.scale.set(2.328, 7.905, 4.651);\n        this.add(box1);\n        const box2 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box2.position.set(-5.607, -0.754, -0.758);\n        box2.rotation.set(0, 0.994, 0);\n        box2.scale.set(1.970, 1.534, 3.955);\n        this.add(box2);\n        const box3 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box3.position.set(6.167, -0.16, 7.803);\n        box3.rotation.set(0, 0.561, 0);\n        box3.scale.set(3.927, 6.285, 3.687);\n        this.add(box3);\n        const box4 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box4.position.set(-2.017, 0.018, 6.124);\n        box4.rotation.set(0, 0.333, 0);\n        box4.scale.set(2.002, 4.566, 2.064);\n        this.add(box4);\n        const box5 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box5.position.set(2.291, -0.756, -2.621);\n        box5.rotation.set(0, -0.286, 0);\n        box5.scale.set(1.546, 1.552, 1.496);\n        this.add(box5);\n        const box6 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box6.position.set(-2.193, -0.369, -5.547);\n        box6.rotation.set(0, 0.516, 0);\n        box6.scale.set(3.875, 3.487, 2.986);\n        this.add(box6);\n        // -x_left\n        const light1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(80));\n        light1.position.set(-14.0, 10.0, 8.0);\n        light1.scale.set(0.1, 2.5, 2.5);\n        this.add(light1);\n        // -x_right\n        const light2 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(80));\n        light2.position.set(-14.0, 14.0, -4.0);\n        light2.scale.set(0.1, 2.5, 2.5);\n        this.add(light2);\n        // +x only on light\n        const light3 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(23));\n        light3.position.set(14.0, 12.0, 0.0);\n        light3.scale.set(0.1, 5.0, 5.0);\n        this.add(light3);\n        // +z\n        const light4 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(16));\n        light4.position.set(0.0, 9.0, 14.0);\n        light4.scale.set(5.0, 5.0, 0.1);\n        this.add(light4);\n        // -z right\n        const light5 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(80));\n        light5.position.set(7.0, 8.0, -14.0);\n        light5.scale.set(2.5, 2.5, 0.1);\n        this.add(light5);\n        // -z left\n        const light6 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(80));\n        light6.position.set(-7.0, 16.0, -14.0);\n        light6.scale.set(2.5, 2.5, 0.1);\n        this.add(light6);\n        // +y\n        const light7 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(1));\n        light7.position.set(0.0, 20.0, 0.0);\n        light7.scale.set(0.1, 0.1, 0.1);\n        this.add(light7);\n    }\n    createAreaLightMaterial(intensity) {\n        const material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial();\n        material.color.setScalar(intensity);\n        return material;\n    }\n}\n//# sourceMappingURL=EnvironmentSceneAlt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRW52aXJvbm1lbnRTY2VuZUFsdC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0g7QUFDakcsa0NBQWtDLHdDQUFLO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw4Q0FBVztBQUN4QztBQUNBLGlDQUFpQyx1REFBb0IsR0FBRyxvQkFBb0IsMkNBQVEsRUFBRTtBQUN0RixnQ0FBZ0MsdURBQW9CLEdBQUcsY0FBYztBQUNyRSw4QkFBOEIsNkNBQVU7QUFDeEM7QUFDQTtBQUNBLHlCQUF5Qix1Q0FBSTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9EQUFpQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRW52aXJvbm1lbnRTY2VuZUFsdC5qcz82MzYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEJhY2tTaWRlLCBCb3hHZW9tZXRyeSwgTWVzaCwgTWVzaEJhc2ljTWF0ZXJpYWwsIE1lc2hTdGFuZGFyZE1hdGVyaWFsLCBQb2ludExpZ2h0LCBTY2VuZSB9IGZyb20gJ3RocmVlJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudmlyb25tZW50U2NlbmVBbHQgZXh0ZW5kcyBTY2VuZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24ueSA9IC0zLjU7XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KCk7XG4gICAgICAgIGdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSgndXYnKTtcbiAgICAgICAgY29uc3Qgcm9vbU1hdGVyaWFsID0gbmV3IE1lc2hTdGFuZGFyZE1hdGVyaWFsKHsgbWV0YWxuZXNzOiAwLCBzaWRlOiBCYWNrU2lkZSB9KTtcbiAgICAgICAgY29uc3QgYm94TWF0ZXJpYWwgPSBuZXcgTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBtZXRhbG5lc3M6IDAgfSk7XG4gICAgICAgIGNvbnN0IG1haW5MaWdodCA9IG5ldyBQb2ludExpZ2h0KDB4ZmZmZmZmLCA0MDAuMCwgMjgsIDIpO1xuICAgICAgICBtYWluTGlnaHQucG9zaXRpb24uc2V0KDAuNSwgMTQuMCwgMC41KTtcbiAgICAgICAgdGhpcy5hZGQobWFpbkxpZ2h0KTtcbiAgICAgICAgY29uc3Qgcm9vbSA9IG5ldyBNZXNoKGdlb21ldHJ5LCByb29tTWF0ZXJpYWwpO1xuICAgICAgICByb29tLnBvc2l0aW9uLnNldCgwLjAsIDEzLjIsIDAuMCk7XG4gICAgICAgIHJvb20uc2NhbGUuc2V0KDMxLjUsIDI4LjUsIDMxLjUpO1xuICAgICAgICB0aGlzLmFkZChyb29tKTtcbiAgICAgICAgY29uc3QgYm94MSA9IG5ldyBNZXNoKGdlb21ldHJ5LCBib3hNYXRlcmlhbCk7XG4gICAgICAgIGJveDEucG9zaXRpb24uc2V0KC0xMC45MDYsIC0xLjAsIDEuODQ2KTtcbiAgICAgICAgYm94MS5yb3RhdGlvbi5zZXQoMCwgLTAuMTk1LCAwKTtcbiAgICAgICAgYm94MS5zY2FsZS5zZXQoMi4zMjgsIDcuOTA1LCA0LjY1MSk7XG4gICAgICAgIHRoaXMuYWRkKGJveDEpO1xuICAgICAgICBjb25zdCBib3gyID0gbmV3IE1lc2goZ2VvbWV0cnksIGJveE1hdGVyaWFsKTtcbiAgICAgICAgYm94Mi5wb3NpdGlvbi5zZXQoLTUuNjA3LCAtMC43NTQsIC0wLjc1OCk7XG4gICAgICAgIGJveDIucm90YXRpb24uc2V0KDAsIDAuOTk0LCAwKTtcbiAgICAgICAgYm94Mi5zY2FsZS5zZXQoMS45NzAsIDEuNTM0LCAzLjk1NSk7XG4gICAgICAgIHRoaXMuYWRkKGJveDIpO1xuICAgICAgICBjb25zdCBib3gzID0gbmV3IE1lc2goZ2VvbWV0cnksIGJveE1hdGVyaWFsKTtcbiAgICAgICAgYm94My5wb3NpdGlvbi5zZXQoNi4xNjcsIC0wLjE2LCA3LjgwMyk7XG4gICAgICAgIGJveDMucm90YXRpb24uc2V0KDAsIDAuNTYxLCAwKTtcbiAgICAgICAgYm94My5zY2FsZS5zZXQoMy45MjcsIDYuMjg1LCAzLjY4Nyk7XG4gICAgICAgIHRoaXMuYWRkKGJveDMpO1xuICAgICAgICBjb25zdCBib3g0ID0gbmV3IE1lc2goZ2VvbWV0cnksIGJveE1hdGVyaWFsKTtcbiAgICAgICAgYm94NC5wb3NpdGlvbi5zZXQoLTIuMDE3LCAwLjAxOCwgNi4xMjQpO1xuICAgICAgICBib3g0LnJvdGF0aW9uLnNldCgwLCAwLjMzMywgMCk7XG4gICAgICAgIGJveDQuc2NhbGUuc2V0KDIuMDAyLCA0LjU2NiwgMi4wNjQpO1xuICAgICAgICB0aGlzLmFkZChib3g0KTtcbiAgICAgICAgY29uc3QgYm94NSA9IG5ldyBNZXNoKGdlb21ldHJ5LCBib3hNYXRlcmlhbCk7XG4gICAgICAgIGJveDUucG9zaXRpb24uc2V0KDIuMjkxLCAtMC43NTYsIC0yLjYyMSk7XG4gICAgICAgIGJveDUucm90YXRpb24uc2V0KDAsIC0wLjI4NiwgMCk7XG4gICAgICAgIGJveDUuc2NhbGUuc2V0KDEuNTQ2LCAxLjU1MiwgMS40OTYpO1xuICAgICAgICB0aGlzLmFkZChib3g1KTtcbiAgICAgICAgY29uc3QgYm94NiA9IG5ldyBNZXNoKGdlb21ldHJ5LCBib3hNYXRlcmlhbCk7XG4gICAgICAgIGJveDYucG9zaXRpb24uc2V0KC0yLjE5MywgLTAuMzY5LCAtNS41NDcpO1xuICAgICAgICBib3g2LnJvdGF0aW9uLnNldCgwLCAwLjUxNiwgMCk7XG4gICAgICAgIGJveDYuc2NhbGUuc2V0KDMuODc1LCAzLjQ4NywgMi45ODYpO1xuICAgICAgICB0aGlzLmFkZChib3g2KTtcbiAgICAgICAgLy8gLXhfbGVmdFxuICAgICAgICBjb25zdCBsaWdodDEgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCg4MCkpO1xuICAgICAgICBsaWdodDEucG9zaXRpb24uc2V0KC0xNC4wLCAxMC4wLCA4LjApO1xuICAgICAgICBsaWdodDEuc2NhbGUuc2V0KDAuMSwgMi41LCAyLjUpO1xuICAgICAgICB0aGlzLmFkZChsaWdodDEpO1xuICAgICAgICAvLyAteF9yaWdodFxuICAgICAgICBjb25zdCBsaWdodDIgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCg4MCkpO1xuICAgICAgICBsaWdodDIucG9zaXRpb24uc2V0KC0xNC4wLCAxNC4wLCAtNC4wKTtcbiAgICAgICAgbGlnaHQyLnNjYWxlLnNldCgwLjEsIDIuNSwgMi41KTtcbiAgICAgICAgdGhpcy5hZGQobGlnaHQyKTtcbiAgICAgICAgLy8gK3ggb25seSBvbiBsaWdodFxuICAgICAgICBjb25zdCBsaWdodDMgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCgyMykpO1xuICAgICAgICBsaWdodDMucG9zaXRpb24uc2V0KDE0LjAsIDEyLjAsIDAuMCk7XG4gICAgICAgIGxpZ2h0My5zY2FsZS5zZXQoMC4xLCA1LjAsIDUuMCk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0Myk7XG4gICAgICAgIC8vICt6XG4gICAgICAgIGNvbnN0IGxpZ2h0NCA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDE2KSk7XG4gICAgICAgIGxpZ2h0NC5wb3NpdGlvbi5zZXQoMC4wLCA5LjAsIDE0LjApO1xuICAgICAgICBsaWdodDQuc2NhbGUuc2V0KDUuMCwgNS4wLCAwLjEpO1xuICAgICAgICB0aGlzLmFkZChsaWdodDQpO1xuICAgICAgICAvLyAteiByaWdodFxuICAgICAgICBjb25zdCBsaWdodDUgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCg4MCkpO1xuICAgICAgICBsaWdodDUucG9zaXRpb24uc2V0KDcuMCwgOC4wLCAtMTQuMCk7XG4gICAgICAgIGxpZ2h0NS5zY2FsZS5zZXQoMi41LCAyLjUsIDAuMSk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0NSk7XG4gICAgICAgIC8vIC16IGxlZnRcbiAgICAgICAgY29uc3QgbGlnaHQ2ID0gbmV3IE1lc2goZ2VvbWV0cnksIHRoaXMuY3JlYXRlQXJlYUxpZ2h0TWF0ZXJpYWwoODApKTtcbiAgICAgICAgbGlnaHQ2LnBvc2l0aW9uLnNldCgtNy4wLCAxNi4wLCAtMTQuMCk7XG4gICAgICAgIGxpZ2h0Ni5zY2FsZS5zZXQoMi41LCAyLjUsIDAuMSk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0Nik7XG4gICAgICAgIC8vICt5XG4gICAgICAgIGNvbnN0IGxpZ2h0NyA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDEpKTtcbiAgICAgICAgbGlnaHQ3LnBvc2l0aW9uLnNldCgwLjAsIDIwLjAsIDAuMCk7XG4gICAgICAgIGxpZ2h0Ny5zY2FsZS5zZXQoMC4xLCAwLjEsIDAuMSk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0Nyk7XG4gICAgfVxuICAgIGNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKGludGVuc2l0eSkge1xuICAgICAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgpO1xuICAgICAgICBtYXRlcmlhbC5jb2xvci5zZXRTY2FsYXIoaW50ZW5zaXR5KTtcbiAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVudmlyb25tZW50U2NlbmVBbHQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentSceneAlt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/GLTFInstance.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/GLTFInstance.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $clone: () => (/* binding */ $clone),\n/* harmony export */   $prepare: () => (/* binding */ $prepare),\n/* harmony export */   $prepared: () => (/* binding */ $prepared),\n/* harmony export */   $preparedGLTF: () => (/* binding */ $preparedGLTF),\n/* harmony export */   GLTFInstance: () => (/* binding */ GLTFInstance)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_utils_SkeletonUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/examples/jsm/utils/SkeletonUtils.js */ \"(ssr)/./node_modules/three/examples/jsm/utils/SkeletonUtils.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst $prepared = Symbol('prepared');\nconst $prepare = Symbol('prepare');\nconst $preparedGLTF = Symbol('preparedGLTF');\nconst $clone = Symbol('clone');\n/**\n * Represents the preparation and enhancement of the output of a Three.js\n * GLTFLoader (a Three.js-flavor \"GLTF\"), to make it suitable for optimal,\n * correct viewing in a given presentation context and also make the cloning\n * process more explicit and legible.\n *\n * A GLTFInstance is API-compatible with a Three.js-flavor \"GLTF\", so it should\n * be considered to be interchangeable with the loaded result of a GLTFLoader.\n *\n * This basic implementation only implements trivial preparation and enhancement\n * of a GLTF. These operations are intended to be enhanced by inheriting\n * classes.\n */\nclass GLTFInstance {\n    constructor(preparedGLTF) {\n        this[$preparedGLTF] = preparedGLTF;\n    }\n    /**\n     * Prepares a given GLTF for presentation and future cloning. A GLTF that is\n     * prepared can safely have this method invoked on it multiple times; it will\n     * only be prepared once, including after being cloned.\n     */\n    static prepare(source) {\n        if (source.scene == null) {\n            throw new Error('Model does not have a scene');\n        }\n        if (source[$prepared]) {\n            return source;\n        }\n        const prepared = this[$prepare](source);\n        // NOTE: ES5 Symbol polyfill is not compatible with spread operator\n        // so {...prepared, [$prepared]: true} does not work\n        prepared[$prepared] = true;\n        return prepared;\n    }\n    /**\n     * Override in an inheriting class to apply specialty one-time preparations\n     * for a given input GLTF.\n     */\n    static [$prepare](source) {\n        // TODO(#195,#1003): We don't currently support multiple scenes, so we don't\n        // bother preparing extra scenes for now:\n        const { scene } = source;\n        const scenes = [scene];\n        return Object.assign(Object.assign({}, source), { scene, scenes });\n    }\n    get parser() {\n        return this[$preparedGLTF].parser;\n    }\n    get animations() {\n        return this[$preparedGLTF].animations;\n    }\n    get scene() {\n        return this[$preparedGLTF].scene;\n    }\n    get scenes() {\n        return this[$preparedGLTF].scenes;\n    }\n    get cameras() {\n        return this[$preparedGLTF].cameras;\n    }\n    get asset() {\n        return this[$preparedGLTF].asset;\n    }\n    get userData() {\n        return this[$preparedGLTF].userData;\n    }\n    /**\n     * Creates and returns a copy of this instance.\n     */\n    clone() {\n        const GLTFInstanceConstructor = this.constructor;\n        const clonedGLTF = this[$clone]();\n        return new GLTFInstanceConstructor(clonedGLTF);\n    }\n    /**\n     * Cleans up any retained memory that might not otherwise be released when\n     * this instance is done being used.\n     */\n    dispose() {\n        this.scenes.forEach((scene) => {\n            scene.traverse((object) => {\n                if (!object.isMesh) {\n                    return;\n                }\n                const mesh = object;\n                const materials = Array.isArray(mesh.material) ? mesh.material : [mesh.material];\n                materials.forEach(material => {\n                    // Explicitly dispose any textures assigned to this material\n                    for (const propertyName in material) {\n                        const texture = material[propertyName];\n                        if (texture instanceof three__WEBPACK_IMPORTED_MODULE_0__.Texture) {\n                            const image = texture.source.data;\n                            if (image.close != null) {\n                                image.close();\n                            }\n                            texture.dispose();\n                        }\n                    }\n                    material.dispose();\n                });\n                mesh.geometry.dispose();\n            });\n        });\n    }\n    /**\n     * Override in an inheriting class to implement specialized cloning strategies\n     */\n    [$clone]() {\n        const source = this[$preparedGLTF];\n        // TODO(#195,#1003): We don't currently support multiple scenes, so we don't\n        // bother cloning extra scenes for now:\n        const scene = three_examples_jsm_utils_SkeletonUtils_js__WEBPACK_IMPORTED_MODULE_1__.clone(this.scene);\n        cloneVariantMaterials(scene, this.scene);\n        const scenes = [scene];\n        const userData = source.userData ? Object.assign({}, source.userData) : {};\n        return Object.assign(Object.assign({}, source), { scene, scenes, userData });\n    }\n}\n// Variant materials and original material instances are stored under\n// object.userData.variantMaterials/originalMaterial.\n// Three.js Object3D.clone() doesn't clone Three.js objects under\n// .userData so this function is a workaround.\nconst cloneVariantMaterials = (dst, src) => {\n    traversePair(dst, src, (dst, src) => {\n        if (src.userData.variantMaterials !== undefined) {\n            dst.userData.variantMaterials = new Map(src.userData.variantMaterials);\n        }\n        if (src.userData.variantData !== undefined) {\n            dst.userData.variantData = src.userData.variantData;\n        }\n        if (src.userData.originalMaterial !== undefined) {\n            dst.userData.originalMaterial = src.userData.originalMaterial;\n        }\n    });\n};\nconst traversePair = (obj1, obj2, callback) => {\n    callback(obj1, obj2);\n    // Assume obj1 and obj2 have the same tree structure\n    for (let i = 0; i < obj1.children.length; i++) {\n        traversePair(obj1.children[i], obj2.children[i], callback);\n    }\n};\n//# sourceMappingURL=GLTFInstance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/GLTFInstance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Hotspot.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Hotspot.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hotspot: () => (/* binding */ Hotspot)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/renderers/CSS2DRenderer.js */ \"(ssr)/./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js\");\n/* harmony import */ var _styles_conversions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../styles/conversions.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _styles_parsers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * The Hotspot object is a reference-counted slot. If decrement() returns true,\n * it should be removed from the tree so it can be garbage-collected.\n */\nclass Hotspot extends three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_2__.CSS2DObject {\n    constructor(config) {\n        super(document.createElement('div'));\n        this.normal = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 1, 0);\n        this.initialized = false;\n        this.referenceCount = 1;\n        this.pivot = document.createElement('div');\n        this.slot = document.createElement('slot');\n        this.element.classList.add('annotation-wrapper');\n        this.slot.name = config.name;\n        this.element.appendChild(this.pivot);\n        this.pivot.appendChild(this.slot);\n        this.updatePosition(config.position);\n        this.updateNormal(config.normal);\n    }\n    get facingCamera() {\n        return !this.element.classList.contains('hide');\n    }\n    /**\n     * Sets the hotspot to be in the highly visible foreground state.\n     */\n    show() {\n        if (!this.facingCamera || !this.initialized) {\n            this.updateVisibility(true);\n        }\n    }\n    /**\n     * Sets the hotspot to be in the diminished background state.\n     */\n    hide() {\n        if (this.facingCamera || !this.initialized) {\n            this.updateVisibility(false);\n        }\n    }\n    /**\n     * Call this when adding elements to the same slot to keep track.\n     */\n    increment() {\n        this.referenceCount++;\n    }\n    /**\n     * Call this when removing elements from the slot; returns true when the slot\n     * is unused.\n     */\n    decrement() {\n        if (this.referenceCount > 0) {\n            --this.referenceCount;\n        }\n        return this.referenceCount === 0;\n    }\n    /**\n     * Change the position of the hotspot to the input string, in the same format\n     * as the data-position attribute.\n     */\n    updatePosition(position) {\n        if (position == null)\n            return;\n        const positionNodes = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_1__.parseExpressions)(position)[0].terms;\n        for (let i = 0; i < 3; ++i) {\n            this.position.setComponent(i, (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(positionNodes[i]).number);\n        }\n        this.updateMatrixWorld();\n    }\n    /**\n     * Change the hotspot's normal to the input string, in the same format as the\n     * data-normal attribute.\n     */\n    updateNormal(normal) {\n        if (normal == null)\n            return;\n        const normalNodes = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_1__.parseExpressions)(normal)[0].terms;\n        for (let i = 0; i < 3; ++i) {\n            this.normal.setComponent(i, (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(normalNodes[i]).number);\n        }\n    }\n    orient(radians) {\n        this.pivot.style.transform = `rotate(${radians}rad)`;\n    }\n    updateVisibility(show) {\n        // NOTE: IE11 doesn't support a second arg for classList.toggle\n        if (show) {\n            this.element.classList.remove('hide');\n        }\n        else {\n            this.element.classList.add('hide');\n        }\n        // NOTE: ShadyDOM doesn't support slot.assignedElements, otherwise we could\n        // use that here.\n        this.slot.assignedNodes().forEach((node) => {\n            if (node.nodeType !== Node.ELEMENT_NODE) {\n                return;\n            }\n            const element = node;\n            // Visibility attribute can be configured per-node in the hotspot:\n            const visibilityAttribute = element.dataset.visibilityAttribute;\n            if (visibilityAttribute != null) {\n                const attributeName = `data-${visibilityAttribute}`;\n                // NOTE: IE11 doesn't support toggleAttribute\n                if (show) {\n                    element.setAttribute(attributeName, '');\n                }\n                else {\n                    element.removeAttribute(attributeName);\n                }\n            }\n            element.dispatchEvent(new CustomEvent('hotspot-visibility', {\n                detail: {\n                    visible: show,\n                },\n            }));\n        });\n        this.initialized = true;\n    }\n}\n//# sourceMappingURL=Hotspot.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Hotspot.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelScene.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/ModelScene.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IlluminationRole: () => (/* binding */ IlluminationRole),\n/* harmony export */   ModelScene: () => (/* binding */ ModelScene)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! three/examples/jsm/renderers/CSS2DRenderer.js */ \"(ssr)/./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js\");\n/* harmony import */ var _features_scene_graph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/scene-graph.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _styles_conversions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../styles/conversions.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _styles_parsers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _Damper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* harmony import */ var _Hotspot_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Hotspot.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Hotspot.js\");\n/* harmony import */ var _ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ModelUtils.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelUtils.js\");\n/* harmony import */ var _Shadow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Shadow.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Shadow.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\nconst MIN_SHADOW_RATIO = 100;\nconst IlluminationRole = {\n    Primary: 'primary',\n    Secondary: 'secondary'\n};\nconst view = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\nconst target = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\nconst normalWorld = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\nconst raycaster = new three__WEBPACK_IMPORTED_MODULE_9__.Raycaster();\nconst vector3 = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\nconst ndc = new three__WEBPACK_IMPORTED_MODULE_9__.Vector2();\n/**\n * A THREE.Scene object that takes a Model and CanvasHTMLElement and\n * constructs a framed scene based off of the canvas dimensions.\n * Provides lights and cameras to be used in a renderer.\n */\nclass ModelScene extends three__WEBPACK_IMPORTED_MODULE_9__.Scene {\n    constructor({ canvas, element, width, height }) {\n        super();\n        this.annotationRenderer = new three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_10__.CSS2DRenderer();\n        this.schemaElement = document.createElement('script');\n        this.width = 1;\n        this.height = 1;\n        this.aspect = 1;\n        this.scaleStep = 0;\n        this.renderCount = 0;\n        this.externalRenderer = null;\n        // These default camera values are never used, as they are reset once the\n        // model is loaded and framing is computed.\n        this.camera = new three__WEBPACK_IMPORTED_MODULE_9__.PerspectiveCamera(45, 1, 0.1, 100);\n        this.xrCamera = null;\n        this.url = null;\n        this.target = new three__WEBPACK_IMPORTED_MODULE_9__.Object3D();\n        this.animationNames = [];\n        this.boundingBox = new three__WEBPACK_IMPORTED_MODULE_9__.Box3();\n        this.boundingSphere = new three__WEBPACK_IMPORTED_MODULE_9__.Sphere();\n        this.size = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\n        this.idealAspect = 0;\n        this.framedFoVDeg = 0;\n        this.shadow = null;\n        this.shadowIntensity = 0;\n        this.shadowSoftness = 1;\n        this.bakedShadows = new Set();\n        this.exposure = 1;\n        this.canScale = true;\n        this.isDirty = false;\n        this.goalTarget = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\n        this.targetDamperX = new _Damper_js__WEBPACK_IMPORTED_MODULE_5__.Damper();\n        this.targetDamperY = new _Damper_js__WEBPACK_IMPORTED_MODULE_5__.Damper();\n        this.targetDamperZ = new _Damper_js__WEBPACK_IMPORTED_MODULE_5__.Damper();\n        this._currentGLTF = null;\n        this._model = null;\n        this.cancelPendingSourceChange = null;\n        this.animationsByName = new Map();\n        this.currentAnimationAction = null;\n        this.name = 'ModelScene';\n        this.element = element;\n        this.canvas = canvas;\n        // These default camera values are never used, as they are reset once the\n        // model is loaded and framing is computed.\n        this.camera = new three__WEBPACK_IMPORTED_MODULE_9__.PerspectiveCamera(45, 1, 0.1, 100);\n        this.camera.name = 'MainCamera';\n        this.add(this.target);\n        this.setSize(width, height);\n        this.target.name = 'Target';\n        this.mixer = new three__WEBPACK_IMPORTED_MODULE_9__.AnimationMixer(this.target);\n        const { domElement } = this.annotationRenderer;\n        const { style } = domElement;\n        style.display = 'none';\n        style.pointerEvents = 'none';\n        style.position = 'absolute';\n        style.top = '0';\n        this.element.shadowRoot.querySelector('.default').appendChild(domElement);\n        this.schemaElement.setAttribute('type', 'application/ld+json');\n    }\n    /**\n     * Function to create the context lazily, as when there is only one\n     * <model-viewer> element, the renderer's 3D context can be displayed\n     * directly. This extra context is necessary to copy the renderings into when\n     * there are more than one.\n     */\n    get context() {\n        return this.canvas.getContext('2d');\n    }\n    getCamera() {\n        return this.xrCamera != null ? this.xrCamera : this.camera;\n    }\n    queueRender() {\n        this.isDirty = true;\n    }\n    shouldRender() {\n        return this.isDirty;\n    }\n    hasRendered() {\n        this.isDirty = false;\n    }\n    forceRescale() {\n        this.scaleStep = -1;\n        this.queueRender();\n    }\n    /**\n     * Pass in a THREE.Object3D to be controlled\n     * by this model.\n     */\n    async setObject(model) {\n        this.reset();\n        this._model = model;\n        this.target.add(model);\n        await this.setupScene();\n    }\n    /**\n     * Sets the model via URL.\n     */\n    async setSource(url, progressCallback = () => { }) {\n        if (!url || url === this.url) {\n            progressCallback(1);\n            return;\n        }\n        this.reset();\n        this.url = url;\n        if (this.externalRenderer != null) {\n            const framingInfo = await this.externalRenderer.load(progressCallback);\n            this.boundingSphere.radius = framingInfo.framedRadius;\n            this.idealAspect = framingInfo.fieldOfViewAspect;\n            return;\n        }\n        // If we have pending work due to a previous source change in progress,\n        // cancel it so that we do not incur a race condition:\n        if (this.cancelPendingSourceChange != null) {\n            this.cancelPendingSourceChange();\n            this.cancelPendingSourceChange = null;\n        }\n        let gltf;\n        try {\n            gltf = await new Promise(async (resolve, reject) => {\n                this.cancelPendingSourceChange = () => reject();\n                try {\n                    const result = await this.element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer].loader.load(url, this.element, progressCallback);\n                    resolve(result);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            });\n        }\n        catch (error) {\n            if (error == null) {\n                // Loading was cancelled, so silently return\n                return;\n            }\n            throw error;\n        }\n        this.cancelPendingSourceChange = null;\n        this.reset();\n        this.url = url;\n        this._currentGLTF = gltf;\n        if (gltf != null) {\n            this._model = gltf.scene;\n            this.target.add(gltf.scene);\n        }\n        const { animations } = gltf;\n        const animationsByName = new Map();\n        const animationNames = [];\n        for (const animation of animations) {\n            animationsByName.set(animation.name, animation);\n            animationNames.push(animation.name);\n        }\n        this.animations = animations;\n        this.animationsByName = animationsByName;\n        this.animationNames = animationNames;\n        await this.setupScene();\n    }\n    async setupScene() {\n        this.applyTransform();\n        this.updateBoundingBox();\n        await this.updateFraming();\n        this.updateShadow();\n        this.setShadowIntensity(this.shadowIntensity);\n    }\n    reset() {\n        this.url = null;\n        this.queueRender();\n        if (this.shadow != null) {\n            this.shadow.setIntensity(0);\n        }\n        this.bakedShadows.clear();\n        const { _model } = this;\n        if (_model != null) {\n            _model.removeFromParent();\n            this._model = null;\n        }\n        const gltf = this._currentGLTF;\n        if (gltf != null) {\n            gltf.dispose();\n            this._currentGLTF = null;\n        }\n        if (this.currentAnimationAction != null) {\n            this.currentAnimationAction.stop();\n            this.currentAnimationAction = null;\n        }\n        this.mixer.stopAllAction();\n        this.mixer.uncacheRoot(this);\n    }\n    dispose() {\n        this.reset();\n        if (this.shadow != null) {\n            this.shadow.dispose();\n            this.shadow = null;\n        }\n        this.element[_features_scene_graph_js__WEBPACK_IMPORTED_MODULE_0__.$currentGLTF] = null;\n        this.element[_features_scene_graph_js__WEBPACK_IMPORTED_MODULE_0__.$originalGltfJson] = null;\n        this.element[_features_scene_graph_js__WEBPACK_IMPORTED_MODULE_0__.$model] = null;\n    }\n    get currentGLTF() {\n        return this._currentGLTF;\n    }\n    /**\n     * Updates the ModelScene for a new container size in CSS pixels.\n     */\n    setSize(width, height) {\n        if (this.width === width && this.height === height) {\n            return;\n        }\n        this.width = Math.max(width, 1);\n        this.height = Math.max(height, 1);\n        this.annotationRenderer.setSize(width, height);\n        this.aspect = this.width / this.height;\n        if (this.externalRenderer != null) {\n            const dpr = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.resolveDpr)();\n            this.externalRenderer.resize(width * dpr, height * dpr);\n        }\n        this.queueRender();\n    }\n    markBakedShadow(mesh) {\n        mesh.userData.shadow = true;\n        this.bakedShadows.add(mesh);\n    }\n    unmarkBakedShadow(mesh) {\n        mesh.userData.shadow = false;\n        mesh.visible = true;\n        this.bakedShadows.delete(mesh);\n        this.boundingBox.expandByObject(mesh);\n    }\n    findBakedShadows(group) {\n        const boundingBox = new three__WEBPACK_IMPORTED_MODULE_9__.Box3();\n        group.traverse((object) => {\n            const mesh = object;\n            if (!mesh.isMesh) {\n                return;\n            }\n            const material = mesh.material;\n            if (!material.transparent) {\n                return;\n            }\n            boundingBox.setFromObject(mesh);\n            const size = boundingBox.getSize(vector3);\n            const minDim = Math.min(size.x, size.y, size.z);\n            const maxDim = Math.max(size.x, size.y, size.z);\n            if (maxDim < MIN_SHADOW_RATIO * minDim) {\n                return;\n            }\n            this.markBakedShadow(mesh);\n        });\n    }\n    checkBakedShadows() {\n        const { min, max } = this.boundingBox;\n        const shadowBox = new three__WEBPACK_IMPORTED_MODULE_9__.Box3();\n        this.boundingBox.getSize(this.size);\n        for (const mesh of this.bakedShadows) {\n            shadowBox.setFromObject(mesh);\n            if (shadowBox.min.y < min.y + this.size.y / MIN_SHADOW_RATIO &&\n                shadowBox.min.x <= min.x && shadowBox.max.x >= max.x &&\n                shadowBox.min.z <= min.z && shadowBox.max.z >= max.z) {\n                // floor shadow\n                continue;\n            }\n            if (shadowBox.min.z < min.z + this.size.z / MIN_SHADOW_RATIO &&\n                shadowBox.min.x <= min.x && shadowBox.max.x >= max.x &&\n                shadowBox.min.y <= min.y && shadowBox.max.y >= max.y) {\n                // wall shadow\n                continue;\n            }\n            this.unmarkBakedShadow(mesh);\n        }\n    }\n    applyTransform() {\n        const { model } = this;\n        if (model == null) {\n            return;\n        }\n        const orientation = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_3__.parseExpressions)(this.element.orientation)[0]\n            .terms;\n        const roll = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_2__.normalizeUnit)(orientation[0]).number;\n        const pitch = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_2__.normalizeUnit)(orientation[1]).number;\n        const yaw = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_2__.normalizeUnit)(orientation[2]).number;\n        model.quaternion.setFromEuler(new three__WEBPACK_IMPORTED_MODULE_9__.Euler(pitch, yaw, roll, 'YXZ'));\n        const scale = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_3__.parseExpressions)(this.element.scale)[0]\n            .terms;\n        model.scale.set(scale[0].number, scale[1].number, scale[2].number);\n    }\n    updateBoundingBox() {\n        const { model } = this;\n        if (model == null) {\n            return;\n        }\n        this.target.remove(model);\n        this.findBakedShadows(model);\n        const bound = (box, vertex) => {\n            return box.expandByPoint(vertex);\n        };\n        this.setBakedShadowVisibility(false);\n        this.boundingBox = (0,_ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__.reduceVertices)(model, bound, new three__WEBPACK_IMPORTED_MODULE_9__.Box3());\n        // If there's nothing but the baked shadow, then it's not a baked shadow.\n        if (this.boundingBox.isEmpty()) {\n            this.setBakedShadowVisibility(true);\n            this.bakedShadows.forEach((mesh) => this.unmarkBakedShadow(mesh));\n            this.boundingBox = (0,_ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__.reduceVertices)(model, bound, new three__WEBPACK_IMPORTED_MODULE_9__.Box3());\n        }\n        this.checkBakedShadows();\n        this.setBakedShadowVisibility();\n        this.boundingBox.getSize(this.size);\n        this.target.add(model);\n    }\n    /**\n     * Calculates the boundingSphere and idealAspect that allows the 3D\n     * object to be framed tightly in a 2D window of any aspect ratio without\n     * clipping at any camera orbit. The camera's center target point can be\n     * optionally specified. If no center is specified, it defaults to the center\n     * of the bounding box, which means asymmetric models will tend to be tight on\n     * one side instead of both. Proper choice of center can correct this.\n     */\n    async updateFraming() {\n        const { model } = this;\n        if (model == null) {\n            return;\n        }\n        this.target.remove(model);\n        this.setBakedShadowVisibility(false);\n        const { center } = this.boundingSphere;\n        this.element.requestUpdate('cameraTarget');\n        await this.element.updateComplete;\n        center.copy(this.getTarget());\n        const radiusSquared = (value, vertex) => {\n            return Math.max(value, center.distanceToSquared(vertex));\n        };\n        this.boundingSphere.radius =\n            Math.sqrt((0,_ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__.reduceVertices)(model, radiusSquared, 0));\n        const horizontalTanFov = (value, vertex) => {\n            vertex.sub(center);\n            const radiusXZ = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n            return Math.max(value, radiusXZ / (this.idealCameraDistance() - Math.abs(vertex.y)));\n        };\n        this.idealAspect = (0,_ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__.reduceVertices)(model, horizontalTanFov, 0) /\n            Math.tan((this.framedFoVDeg / 2) * Math.PI / 180);\n        this.setBakedShadowVisibility();\n        this.target.add(model);\n    }\n    setBakedShadowVisibility(visible = this.shadowIntensity <= 0) {\n        for (const shadow of this.bakedShadows) {\n            shadow.visible = visible;\n        }\n    }\n    idealCameraDistance() {\n        const halfFovRad = (this.framedFoVDeg / 2) * Math.PI / 180;\n        return this.boundingSphere.radius / Math.sin(halfFovRad);\n    }\n    /**\n     * Set's the framedFieldOfView based on the aspect ratio of the window in\n     * order to keep the model fully visible at any camera orientation.\n     */\n    adjustedFoV(fovDeg) {\n        const vertical = Math.tan((fovDeg / 2) * Math.PI / 180) *\n            Math.max(1, this.idealAspect / this.aspect);\n        return 2 * Math.atan(vertical) * 180 / Math.PI;\n    }\n    getNDC(clientX, clientY) {\n        if (this.xrCamera != null) {\n            ndc.set(clientX / window.screen.width, clientY / window.screen.height);\n        }\n        else {\n            const rect = this.element.getBoundingClientRect();\n            ndc.set((clientX - rect.x) / this.width, (clientY - rect.y) / this.height);\n        }\n        ndc.multiplyScalar(2).subScalar(1);\n        ndc.y *= -1;\n        return ndc;\n    }\n    /**\n     * Returns the size of the corresponding canvas element.\n     */\n    getSize() {\n        return { width: this.width, height: this.height };\n    }\n    setEnvironmentAndSkybox(environment, skybox) {\n        if (this.element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer].arRenderer.presentedScene === this) {\n            return;\n        }\n        this.environment = environment;\n        this.background = skybox;\n        this.queueRender();\n    }\n    /**\n     * Sets the point in model coordinates the model should orbit/pivot around.\n     */\n    setTarget(modelX, modelY, modelZ) {\n        this.goalTarget.set(-modelX, -modelY, -modelZ);\n    }\n    /**\n     * Set the decay time of, affects the speed of target transitions.\n     */\n    setTargetDamperDecayTime(decayMilliseconds) {\n        this.targetDamperX.setDecayTime(decayMilliseconds);\n        this.targetDamperY.setDecayTime(decayMilliseconds);\n        this.targetDamperZ.setDecayTime(decayMilliseconds);\n    }\n    /**\n     * Gets the point in model coordinates the model should orbit/pivot around.\n     */\n    getTarget() {\n        return this.goalTarget.clone().multiplyScalar(-1);\n    }\n    /**\n     * Shifts the model to the target point immediately instead of easing in.\n     */\n    jumpToGoal() {\n        this.updateTarget(_Damper_js__WEBPACK_IMPORTED_MODULE_5__.SETTLING_TIME);\n    }\n    /**\n     * This should be called every frame with the frame delta to cause the target\n     * to transition to its set point.\n     */\n    updateTarget(delta) {\n        const goal = this.goalTarget;\n        const target = this.target.position;\n        if (!goal.equals(target)) {\n            const normalization = this.boundingSphere.radius / 10;\n            let { x, y, z } = target;\n            x = this.targetDamperX.update(x, goal.x, delta, normalization);\n            y = this.targetDamperY.update(y, goal.y, delta, normalization);\n            z = this.targetDamperZ.update(z, goal.z, delta, normalization);\n            this.target.position.set(x, y, z);\n            this.target.updateMatrixWorld();\n            this.queueRender();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Yaw the +z (front) of the model toward the indicated world coordinates.\n     */\n    pointTowards(worldX, worldZ) {\n        const { x, z } = this.position;\n        this.yaw = Math.atan2(worldX - x, worldZ - z);\n    }\n    get model() {\n        return this._model;\n    }\n    /**\n     * Yaw is the scene's orientation about the y-axis, around the rotation\n     * center.\n     */\n    set yaw(radiansY) {\n        this.rotation.y = radiansY;\n        this.queueRender();\n    }\n    get yaw() {\n        return this.rotation.y;\n    }\n    set animationTime(value) {\n        this.mixer.setTime(value);\n        this.queueShadowRender();\n    }\n    get animationTime() {\n        if (this.currentAnimationAction != null) {\n            const loopCount = Math.max(this.currentAnimationAction._loopCount, 0);\n            if (this.currentAnimationAction.loop === three__WEBPACK_IMPORTED_MODULE_9__.LoopPingPong &&\n                (loopCount & 1) === 1) {\n                return this.duration - this.currentAnimationAction.time;\n            }\n            else {\n                return this.currentAnimationAction.time;\n            }\n        }\n        return 0;\n    }\n    set animationTimeScale(value) {\n        this.mixer.timeScale = value;\n    }\n    get animationTimeScale() {\n        return this.mixer.timeScale;\n    }\n    get duration() {\n        if (this.currentAnimationAction != null &&\n            this.currentAnimationAction.getClip()) {\n            return this.currentAnimationAction.getClip().duration;\n        }\n        return 0;\n    }\n    get hasActiveAnimation() {\n        return this.currentAnimationAction != null;\n    }\n    /**\n     * Plays an animation if there are any associated with the current model.\n     * Accepts an optional string name of an animation to play. If no name is\n     * provided, or if no animation is found by the given name, always falls back\n     * to playing the first animation.\n     */\n    playAnimation(name = null, crossfadeTime = 0, loopMode = three__WEBPACK_IMPORTED_MODULE_9__.LoopRepeat, repetitionCount = Infinity) {\n        if (this._currentGLTF == null) {\n            return;\n        }\n        const { animations } = this;\n        if (animations == null || animations.length === 0) {\n            console.warn(`Cannot play animation (model does not have any animations)`);\n            return;\n        }\n        let animationClip = null;\n        if (name != null) {\n            animationClip = this.animationsByName.get(name);\n            if (animationClip == null) {\n                const parsedAnimationIndex = parseInt(name);\n                if (!isNaN(parsedAnimationIndex) && parsedAnimationIndex >= 0 &&\n                    parsedAnimationIndex < animations.length) {\n                    animationClip = animations[parsedAnimationIndex];\n                }\n            }\n        }\n        if (animationClip == null) {\n            animationClip = animations[0];\n        }\n        try {\n            const { currentAnimationAction: lastAnimationAction } = this;\n            const action = this.mixer.clipAction(animationClip, this);\n            this.currentAnimationAction = action;\n            if (this.element.paused) {\n                this.mixer.stopAllAction();\n            }\n            else {\n                action.paused = false;\n                if (lastAnimationAction != null && action !== lastAnimationAction) {\n                    action.crossFadeFrom(lastAnimationAction, crossfadeTime, false);\n                }\n                else if (this.animationTimeScale > 0 &&\n                    this.animationTime == this.duration) {\n                    // This is a workaround for what I believe is a three.js bug.\n                    this.animationTime = 0;\n                }\n            }\n            action.setLoop(loopMode, repetitionCount);\n            action.enabled = true;\n            action.clampWhenFinished = true;\n            action.play();\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n    stopAnimation() {\n        this.currentAnimationAction = null;\n        this.mixer.stopAllAction();\n    }\n    updateAnimation(step) {\n        this.mixer.update(step);\n        this.queueShadowRender();\n    }\n    subscribeMixerEvent(event, callback) {\n        this.mixer.addEventListener(event, callback);\n    }\n    /**\n     * Call if the object has been changed in such a way that the shadow's shape\n     * has changed (not a rotation about the Y axis).\n     */\n    updateShadow() {\n        const shadow = this.shadow;\n        if (shadow != null) {\n            const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n            shadow.setScene(this, this.shadowSoftness, side);\n            shadow.needsUpdate = true;\n        }\n    }\n    renderShadow(renderer) {\n        const shadow = this.shadow;\n        if (shadow != null && shadow.needsUpdate == true) {\n            shadow.render(renderer, this);\n            shadow.needsUpdate = false;\n        }\n    }\n    queueShadowRender() {\n        if (this.shadow != null) {\n            this.shadow.needsUpdate = true;\n        }\n    }\n    /**\n     * Sets the shadow's intensity, lazily creating the shadow as necessary.\n     */\n    setShadowIntensity(shadowIntensity) {\n        this.shadowIntensity = shadowIntensity;\n        if (this._currentGLTF == null) {\n            return;\n        }\n        this.setBakedShadowVisibility();\n        if (shadowIntensity <= 0 && this.shadow == null) {\n            return;\n        }\n        if (this.shadow == null) {\n            const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n            this.shadow = new _Shadow_js__WEBPACK_IMPORTED_MODULE_8__.Shadow(this, this.shadowSoftness, side);\n        }\n        this.shadow.setIntensity(shadowIntensity);\n    }\n    /**\n     * Sets the shadow's softness by mapping a [0, 1] softness parameter to the\n     * shadow's resolution. This involves reallocation, so it should not be\n     * changed frequently. Softer shadows are cheaper to render.\n     */\n    setShadowSoftness(softness) {\n        this.shadowSoftness = softness;\n        const shadow = this.shadow;\n        if (shadow != null) {\n            shadow.setSoftness(softness);\n        }\n    }\n    /**\n     * Shift the floor vertically from the bottom of the model's bounding box by\n     * offset (should generally be negative).\n     */\n    setShadowOffset(offset) {\n        const shadow = this.shadow;\n        if (shadow != null) {\n            shadow.setOffset(offset);\n        }\n    }\n    get raycaster() {\n        return raycaster;\n    }\n    /**\n     * This method returns the world position, model-space normal and texture\n     * coordinate of the point on the mesh corresponding to the input pixel\n     * coordinates given relative to the model-viewer element. If the mesh\n     * is not hit, the result is null.\n     */\n    positionAndNormalFromPoint(ndcPosition, object = this) {\n        this.raycaster.setFromCamera(ndcPosition, this.getCamera());\n        const hits = this.raycaster.intersectObject(object, true);\n        const hit = hits.find((hit) => hit.object.visible && !hit.object.userData.shadow);\n        if (hit == null || hit.face == null) {\n            return null;\n        }\n        if (hit.uv == null) {\n            return { position: hit.point, normal: hit.face.normal, uv: null };\n        }\n        hit.face.normal.applyNormalMatrix(new three__WEBPACK_IMPORTED_MODULE_9__.Matrix3().getNormalMatrix(hit.object.matrixWorld));\n        return { position: hit.point, normal: hit.face.normal, uv: hit.uv };\n    }\n    /**\n     * The following methods are for operating on the set of Hotspot objects\n     * attached to the scene. These come from DOM elements, provided to slots by\n     * the Annotation Mixin.\n     */\n    addHotspot(hotspot) {\n        this.target.add(hotspot);\n        // This happens automatically in render(), but we do it early so that\n        // the slots appear in the shadow DOM and the elements get attached,\n        // allowing us to dispatch events on them.\n        this.annotationRenderer.domElement.appendChild(hotspot.element);\n    }\n    removeHotspot(hotspot) {\n        this.target.remove(hotspot);\n    }\n    /**\n     * Helper method to apply a function to all hotspots.\n     */\n    forHotspots(func) {\n        const { children } = this.target;\n        for (let i = 0, l = children.length; i < l; i++) {\n            const hotspot = children[i];\n            if (hotspot instanceof _Hotspot_js__WEBPACK_IMPORTED_MODULE_6__.Hotspot) {\n                func(hotspot);\n            }\n        }\n    }\n    /**\n     * Update the CSS visibility of the hotspots based on whether their normals\n     * point toward the camera.\n     */\n    updateHotspots(viewerPosition) {\n        this.forHotspots((hotspot) => {\n            view.copy(viewerPosition);\n            target.setFromMatrixPosition(hotspot.matrixWorld);\n            view.sub(target);\n            normalWorld.copy(hotspot.normal)\n                .transformDirection(this.target.matrixWorld);\n            if (view.dot(normalWorld) < 0) {\n                hotspot.hide();\n            }\n            else {\n                hotspot.show();\n            }\n        });\n    }\n    /**\n     * Rotate all hotspots to an absolute orientation given by the input number of\n     * radians. Zero returns them to upright.\n     */\n    orientHotspots(radians) {\n        this.forHotspots((hotspot) => {\n            hotspot.orient(radians);\n        });\n    }\n    /**\n     * Set the rendering visibility of all hotspots. This is used to hide them\n     * during transitions and such.\n     */\n    setHotspotsVisibility(visible) {\n        this.forHotspots((hotspot) => {\n            hotspot.visible = visible;\n        });\n    }\n    updateSchema(src) {\n        var _a;\n        const { schemaElement, element } = this;\n        const { alt, poster, iosSrc } = element;\n        if (src != null) {\n            const encoding = [{\n                    '@type': 'MediaObject',\n                    contentUrl: src,\n                    encodingFormat: ((_a = src.split('.').pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'gltf' ?\n                        'model/gltf+json' :\n                        'model/gltf-binary'\n                }];\n            if (iosSrc) {\n                encoding.push({\n                    '@type': 'MediaObject',\n                    contentUrl: iosSrc,\n                    encodingFormat: 'model/vnd.usdz+zip'\n                });\n            }\n            const structuredData = {\n                '@context': 'http://schema.org/',\n                '@type': '3DModel',\n                image: poster !== null && poster !== void 0 ? poster : undefined,\n                name: alt !== null && alt !== void 0 ? alt : undefined,\n                encoding\n            };\n            schemaElement.textContent = JSON.stringify(structuredData);\n            document.head.appendChild(schemaElement);\n        }\n        else if (schemaElement.parentElement != null) {\n            schemaElement.parentElement.removeChild(schemaElement);\n        }\n    }\n}\n//# sourceMappingURL=ModelScene.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvTW9kZWxTY2VuZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnSztBQUNsRjtBQUNPO0FBQ2pDO0FBQ0s7QUFDRDtBQUNYO0FBQ087QUFDYjtBQUNVO0FBQ1o7QUFDckM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwwQ0FBTztBQUN4QixtQkFBbUIsMENBQU87QUFDMUIsd0JBQXdCLDBDQUFPO0FBQy9CLHNCQUFzQiw0Q0FBUztBQUMvQixvQkFBb0IsMENBQU87QUFDM0IsZ0JBQWdCLDBDQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx5QkFBeUIsd0NBQUs7QUFDckMsa0JBQWtCLGdDQUFnQztBQUNsRDtBQUNBLHNDQUFzQyx5RkFBYTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsb0RBQWlCO0FBQzNDO0FBQ0E7QUFDQSwwQkFBMEIsMkNBQVE7QUFDbEM7QUFDQSwrQkFBK0IsdUNBQUk7QUFDbkMsa0NBQWtDLHlDQUFNO0FBQ3hDLHdCQUF3QiwwQ0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMENBQU87QUFDckMsaUNBQWlDLDhDQUFNO0FBQ3ZDLGlDQUFpQyw4Q0FBTTtBQUN2QyxpQ0FBaUMsOENBQU07QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsb0RBQWlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlEQUFjO0FBQ3ZDLGdCQUFnQixhQUFhO0FBQzdCLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELDREQUFTO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGtFQUFZO0FBQ2pDLHFCQUFxQix1RUFBaUI7QUFDdEMscUJBQXFCLDREQUFNO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlEQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx1Q0FBSTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQiw4QkFBOEIsdUNBQUk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0VBQWdCO0FBQzVDO0FBQ0EscUJBQXFCLHFFQUFhO0FBQ2xDLHNCQUFzQixxRUFBYTtBQUNuQyxvQkFBb0IscUVBQWE7QUFDakMsMENBQTBDLHdDQUFLO0FBQy9DLHNCQUFzQixvRUFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsOERBQWMsbUJBQW1CLHVDQUFJO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDhEQUFjLG1CQUFtQix1Q0FBSTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsOERBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw4REFBYztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSx5QkFBeUIsNERBQVM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHFEQUFhO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFVBQVU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELCtDQUFZO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELDZDQUFVO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDhDQUE4QztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDhDQUFNO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLDhDQUE4QywwQ0FBTztBQUNyRCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixXQUFXO0FBQzNCLDZDQUE2QyxPQUFPO0FBQ3BEO0FBQ0EsbUNBQW1DLGdEQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHlCQUF5QjtBQUN6QyxnQkFBZ0Isc0JBQXNCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25mdC1taW50aW5nLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi90aHJlZS1jb21wb25lbnRzL01vZGVsU2NlbmUuanM/N2Y2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBBbmltYXRpb25NaXhlciwgQm94MywgRXVsZXIsIExvb3BQaW5nUG9uZywgTG9vcFJlcGVhdCwgTWF0cml4MywgT2JqZWN0M0QsIFBlcnNwZWN0aXZlQ2FtZXJhLCBSYXljYXN0ZXIsIFNjZW5lLCBTcGhlcmUsIFZlY3RvcjIsIFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBDU1MyRFJlbmRlcmVyIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL3JlbmRlcmVycy9DU1MyRFJlbmRlcmVyLmpzJztcbmltcG9ydCB7ICRjdXJyZW50R0xURiwgJG1vZGVsLCAkb3JpZ2luYWxHbHRmSnNvbiB9IGZyb20gJy4uL2ZlYXR1cmVzL3NjZW5lLWdyYXBoLmpzJztcbmltcG9ydCB7ICRyZW5kZXJlciB9IGZyb20gJy4uL21vZGVsLXZpZXdlci1iYXNlLmpzJztcbmltcG9ydCB7IG5vcm1hbGl6ZVVuaXQgfSBmcm9tICcuLi9zdHlsZXMvY29udmVyc2lvbnMuanMnO1xuaW1wb3J0IHsgcGFyc2VFeHByZXNzaW9ucyB9IGZyb20gJy4uL3N0eWxlcy9wYXJzZXJzLmpzJztcbmltcG9ydCB7IHJlc29sdmVEcHIgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnO1xuaW1wb3J0IHsgRGFtcGVyLCBTRVRUTElOR19USU1FIH0gZnJvbSAnLi9EYW1wZXIuanMnO1xuaW1wb3J0IHsgSG90c3BvdCB9IGZyb20gJy4vSG90c3BvdC5qcyc7XG5pbXBvcnQgeyByZWR1Y2VWZXJ0aWNlcyB9IGZyb20gJy4vTW9kZWxVdGlscy5qcyc7XG5pbXBvcnQgeyBTaGFkb3cgfSBmcm9tICcuL1NoYWRvdy5qcyc7XG5jb25zdCBNSU5fU0hBRE9XX1JBVElPID0gMTAwO1xuZXhwb3J0IGNvbnN0IElsbHVtaW5hdGlvblJvbGUgPSB7XG4gICAgUHJpbWFyeTogJ3ByaW1hcnknLFxuICAgIFNlY29uZGFyeTogJ3NlY29uZGFyeSdcbn07XG5jb25zdCB2aWV3ID0gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBub3JtYWxXb3JsZCA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCByYXljYXN0ZXIgPSBuZXcgUmF5Y2FzdGVyKCk7XG5jb25zdCB2ZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IG5kYyA9IG5ldyBWZWN0b3IyKCk7XG4vKipcbiAqIEEgVEhSRUUuU2NlbmUgb2JqZWN0IHRoYXQgdGFrZXMgYSBNb2RlbCBhbmQgQ2FudmFzSFRNTEVsZW1lbnQgYW5kXG4gKiBjb25zdHJ1Y3RzIGEgZnJhbWVkIHNjZW5lIGJhc2VkIG9mZiBvZiB0aGUgY2FudmFzIGRpbWVuc2lvbnMuXG4gKiBQcm92aWRlcyBsaWdodHMgYW5kIGNhbWVyYXMgdG8gYmUgdXNlZCBpbiBhIHJlbmRlcmVyLlxuICovXG5leHBvcnQgY2xhc3MgTW9kZWxTY2VuZSBleHRlbmRzIFNjZW5lIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGNhbnZhcywgZWxlbWVudCwgd2lkdGgsIGhlaWdodCB9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYW5ub3RhdGlvblJlbmRlcmVyID0gbmV3IENTUzJEUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5zY2hlbWFFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHRoaXMud2lkdGggPSAxO1xuICAgICAgICB0aGlzLmhlaWdodCA9IDE7XG4gICAgICAgIHRoaXMuYXNwZWN0ID0gMTtcbiAgICAgICAgdGhpcy5zY2FsZVN0ZXAgPSAwO1xuICAgICAgICB0aGlzLnJlbmRlckNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5leHRlcm5hbFJlbmRlcmVyID0gbnVsbDtcbiAgICAgICAgLy8gVGhlc2UgZGVmYXVsdCBjYW1lcmEgdmFsdWVzIGFyZSBuZXZlciB1c2VkLCBhcyB0aGV5IGFyZSByZXNldCBvbmNlIHRoZVxuICAgICAgICAvLyBtb2RlbCBpcyBsb2FkZWQgYW5kIGZyYW1pbmcgaXMgY29tcHV0ZWQuXG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCAxLCAwLjEsIDEwMCk7XG4gICAgICAgIHRoaXMueHJDYW1lcmEgPSBudWxsO1xuICAgICAgICB0aGlzLnVybCA9IG51bGw7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gbmV3IE9iamVjdDNEKCk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uTmFtZXMgPSBbXTtcbiAgICAgICAgdGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG4gICAgICAgIHRoaXMuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICAgIHRoaXMuaWRlYWxBc3BlY3QgPSAwO1xuICAgICAgICB0aGlzLmZyYW1lZEZvVkRlZyA9IDA7XG4gICAgICAgIHRoaXMuc2hhZG93ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zaGFkb3dJbnRlbnNpdHkgPSAwO1xuICAgICAgICB0aGlzLnNoYWRvd1NvZnRuZXNzID0gMTtcbiAgICAgICAgdGhpcy5iYWtlZFNoYWRvd3MgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuZXhwb3N1cmUgPSAxO1xuICAgICAgICB0aGlzLmNhblNjYWxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ29hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICAgIHRoaXMudGFyZ2V0RGFtcGVyWCA9IG5ldyBEYW1wZXIoKTtcbiAgICAgICAgdGhpcy50YXJnZXREYW1wZXJZID0gbmV3IERhbXBlcigpO1xuICAgICAgICB0aGlzLnRhcmdldERhbXBlclogPSBuZXcgRGFtcGVyKCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRHTFRGID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgICAgICB0aGlzLmNhbmNlbFBlbmRpbmdTb3VyY2VDaGFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnNCeU5hbWUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbkFjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMubmFtZSA9ICdNb2RlbFNjZW5lJztcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIC8vIFRoZXNlIGRlZmF1bHQgY2FtZXJhIHZhbHVlcyBhcmUgbmV2ZXIgdXNlZCwgYXMgdGhleSBhcmUgcmVzZXQgb25jZSB0aGVcbiAgICAgICAgLy8gbW9kZWwgaXMgbG9hZGVkIGFuZCBmcmFtaW5nIGlzIGNvbXB1dGVkLlxuICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSg0NSwgMSwgMC4xLCAxMDApO1xuICAgICAgICB0aGlzLmNhbWVyYS5uYW1lID0gJ01haW5DYW1lcmEnO1xuICAgICAgICB0aGlzLmFkZCh0aGlzLnRhcmdldCk7XG4gICAgICAgIHRoaXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy50YXJnZXQubmFtZSA9ICdUYXJnZXQnO1xuICAgICAgICB0aGlzLm1peGVyID0gbmV3IEFuaW1hdGlvbk1peGVyKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgY29uc3QgeyBkb21FbGVtZW50IH0gPSB0aGlzLmFubm90YXRpb25SZW5kZXJlcjtcbiAgICAgICAgY29uc3QgeyBzdHlsZSB9ID0gZG9tRWxlbWVudDtcbiAgICAgICAgc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcbiAgICAgICAgc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBzdHlsZS50b3AgPSAnMCc7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5kZWZhdWx0JykuYXBwZW5kQ2hpbGQoZG9tRWxlbWVudCk7XG4gICAgICAgIHRoaXMuc2NoZW1hRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYXBwbGljYXRpb24vbGQranNvbicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0byBjcmVhdGUgdGhlIGNvbnRleHQgbGF6aWx5LCBhcyB3aGVuIHRoZXJlIGlzIG9ubHkgb25lXG4gICAgICogPG1vZGVsLXZpZXdlcj4gZWxlbWVudCwgdGhlIHJlbmRlcmVyJ3MgM0QgY29udGV4dCBjYW4gYmUgZGlzcGxheWVkXG4gICAgICogZGlyZWN0bHkuIFRoaXMgZXh0cmEgY29udGV4dCBpcyBuZWNlc3NhcnkgdG8gY29weSB0aGUgcmVuZGVyaW5ncyBpbnRvIHdoZW5cbiAgICAgKiB0aGVyZSBhcmUgbW9yZSB0aGFuIG9uZS5cbiAgICAgKi9cbiAgICBnZXQgY29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgfVxuICAgIGdldENhbWVyYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueHJDYW1lcmEgIT0gbnVsbCA/IHRoaXMueHJDYW1lcmEgOiB0aGlzLmNhbWVyYTtcbiAgICB9XG4gICAgcXVldWVSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IHRydWU7XG4gICAgfVxuICAgIHNob3VsZFJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNEaXJ0eTtcbiAgICB9XG4gICAgaGFzUmVuZGVyZWQoKSB7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IGZhbHNlO1xuICAgIH1cbiAgICBmb3JjZVJlc2NhbGUoKSB7XG4gICAgICAgIHRoaXMuc2NhbGVTdGVwID0gLTE7XG4gICAgICAgIHRoaXMucXVldWVSZW5kZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFzcyBpbiBhIFRIUkVFLk9iamVjdDNEIHRvIGJlIGNvbnRyb2xsZWRcbiAgICAgKiBieSB0aGlzIG1vZGVsLlxuICAgICAqL1xuICAgIGFzeW5jIHNldE9iamVjdChtb2RlbCkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMudGFyZ2V0LmFkZChtb2RlbCk7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0dXBTY2VuZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtb2RlbCB2aWEgVVJMLlxuICAgICAqL1xuICAgIGFzeW5jIHNldFNvdXJjZSh1cmwsIHByb2dyZXNzQ2FsbGJhY2sgPSAoKSA9PiB7IH0pIHtcbiAgICAgICAgaWYgKCF1cmwgfHwgdXJsID09PSB0aGlzLnVybCkge1xuICAgICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjaygxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICBpZiAodGhpcy5leHRlcm5hbFJlbmRlcmVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGZyYW1pbmdJbmZvID0gYXdhaXQgdGhpcy5leHRlcm5hbFJlbmRlcmVyLmxvYWQocHJvZ3Jlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICB0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyA9IGZyYW1pbmdJbmZvLmZyYW1lZFJhZGl1cztcbiAgICAgICAgICAgIHRoaXMuaWRlYWxBc3BlY3QgPSBmcmFtaW5nSW5mby5maWVsZE9mVmlld0FzcGVjdDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBoYXZlIHBlbmRpbmcgd29yayBkdWUgdG8gYSBwcmV2aW91cyBzb3VyY2UgY2hhbmdlIGluIHByb2dyZXNzLFxuICAgICAgICAvLyBjYW5jZWwgaXQgc28gdGhhdCB3ZSBkbyBub3QgaW5jdXIgYSByYWNlIGNvbmRpdGlvbjpcbiAgICAgICAgaWYgKHRoaXMuY2FuY2VsUGVuZGluZ1NvdXJjZUNoYW5nZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbFBlbmRpbmdTb3VyY2VDaGFuZ2UoKTtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsUGVuZGluZ1NvdXJjZUNoYW5nZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGdsdGY7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBnbHRmID0gYXdhaXQgbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsUGVuZGluZ1NvdXJjZUNoYW5nZSA9ICgpID0+IHJlamVjdCgpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZWxlbWVudFskcmVuZGVyZXJdLmxvYWRlci5sb2FkKHVybCwgdGhpcy5lbGVtZW50LCBwcm9ncmVzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gTG9hZGluZyB3YXMgY2FuY2VsbGVkLCBzbyBzaWxlbnRseSByZXR1cm5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmNlbFBlbmRpbmdTb3VyY2VDaGFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLl9jdXJyZW50R0xURiA9IGdsdGY7XG4gICAgICAgIGlmIChnbHRmICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX21vZGVsID0gZ2x0Zi5zY2VuZTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmFkZChnbHRmLnNjZW5lKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFuaW1hdGlvbnMgfSA9IGdsdGY7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnNCeU5hbWUgPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk5hbWVzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgYW5pbWF0aW9uIG9mIGFuaW1hdGlvbnMpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnNCeU5hbWUuc2V0KGFuaW1hdGlvbi5uYW1lLCBhbmltYXRpb24pO1xuICAgICAgICAgICAgYW5pbWF0aW9uTmFtZXMucHVzaChhbmltYXRpb24ubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0gYW5pbWF0aW9ucztcbiAgICAgICAgdGhpcy5hbmltYXRpb25zQnlOYW1lID0gYW5pbWF0aW9uc0J5TmFtZTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25OYW1lcyA9IGFuaW1hdGlvbk5hbWVzO1xuICAgICAgICBhd2FpdCB0aGlzLnNldHVwU2NlbmUoKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0dXBTY2VuZSgpIHtcbiAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZUJvdW5kaW5nQm94KCk7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlRnJhbWluZygpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNoYWRvdygpO1xuICAgICAgICB0aGlzLnNldFNoYWRvd0ludGVuc2l0eSh0aGlzLnNoYWRvd0ludGVuc2l0eSk7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnVybCA9IG51bGw7XG4gICAgICAgIHRoaXMucXVldWVSZW5kZXIoKTtcbiAgICAgICAgaWYgKHRoaXMuc2hhZG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93LnNldEludGVuc2l0eSgwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJha2VkU2hhZG93cy5jbGVhcigpO1xuICAgICAgICBjb25zdCB7IF9tb2RlbCB9ID0gdGhpcztcbiAgICAgICAgaWYgKF9tb2RlbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBfbW9kZWwucmVtb3ZlRnJvbVBhcmVudCgpO1xuICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdsdGYgPSB0aGlzLl9jdXJyZW50R0xURjtcbiAgICAgICAgaWYgKGdsdGYgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2x0Zi5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50R0xURiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEFuaW1hdGlvbkFjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb25BY3Rpb24uc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uQWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1peGVyLnN0b3BBbGxBY3Rpb24oKTtcbiAgICAgICAgdGhpcy5taXhlci51bmNhY2hlUm9vdCh0aGlzKTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICBpZiAodGhpcy5zaGFkb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zaGFkb3cuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5zaGFkb3cgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxlbWVudFskY3VycmVudEdMVEZdID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbGVtZW50WyRvcmlnaW5hbEdsdGZKc29uXSA9IG51bGw7XG4gICAgICAgIHRoaXMuZWxlbWVudFskbW9kZWxdID0gbnVsbDtcbiAgICB9XG4gICAgZ2V0IGN1cnJlbnRHTFRGKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudEdMVEY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIE1vZGVsU2NlbmUgZm9yIGEgbmV3IGNvbnRhaW5lciBzaXplIGluIENTUyBwaXhlbHMuXG4gICAgICovXG4gICAgc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGlmICh0aGlzLndpZHRoID09PSB3aWR0aCAmJiB0aGlzLmhlaWdodCA9PT0gaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53aWR0aCA9IE1hdGgubWF4KHdpZHRoLCAxKTtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1heChoZWlnaHQsIDEpO1xuICAgICAgICB0aGlzLmFubm90YXRpb25SZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmFzcGVjdCA9IHRoaXMud2lkdGggLyB0aGlzLmhlaWdodDtcbiAgICAgICAgaWYgKHRoaXMuZXh0ZXJuYWxSZW5kZXJlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBkcHIgPSByZXNvbHZlRHByKCk7XG4gICAgICAgICAgICB0aGlzLmV4dGVybmFsUmVuZGVyZXIucmVzaXplKHdpZHRoICogZHByLCBoZWlnaHQgKiBkcHIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucXVldWVSZW5kZXIoKTtcbiAgICB9XG4gICAgbWFya0Jha2VkU2hhZG93KG1lc2gpIHtcbiAgICAgICAgbWVzaC51c2VyRGF0YS5zaGFkb3cgPSB0cnVlO1xuICAgICAgICB0aGlzLmJha2VkU2hhZG93cy5hZGQobWVzaCk7XG4gICAgfVxuICAgIHVubWFya0Jha2VkU2hhZG93KG1lc2gpIHtcbiAgICAgICAgbWVzaC51c2VyRGF0YS5zaGFkb3cgPSBmYWxzZTtcbiAgICAgICAgbWVzaC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5iYWtlZFNoYWRvd3MuZGVsZXRlKG1lc2gpO1xuICAgICAgICB0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5T2JqZWN0KG1lc2gpO1xuICAgIH1cbiAgICBmaW5kQmFrZWRTaGFkb3dzKGdyb3VwKSB7XG4gICAgICAgIGNvbnN0IGJvdW5kaW5nQm94ID0gbmV3IEJveDMoKTtcbiAgICAgICAgZ3JvdXAudHJhdmVyc2UoKG9iamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWVzaCA9IG9iamVjdDtcbiAgICAgICAgICAgIGlmICghbWVzaC5pc01lc2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IG1lc2gubWF0ZXJpYWw7XG4gICAgICAgICAgICBpZiAoIW1hdGVyaWFsLnRyYW5zcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm91bmRpbmdCb3guc2V0RnJvbU9iamVjdChtZXNoKTtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBib3VuZGluZ0JveC5nZXRTaXplKHZlY3RvcjMpO1xuICAgICAgICAgICAgY29uc3QgbWluRGltID0gTWF0aC5taW4oc2l6ZS54LCBzaXplLnksIHNpemUueik7XG4gICAgICAgICAgICBjb25zdCBtYXhEaW0gPSBNYXRoLm1heChzaXplLngsIHNpemUueSwgc2l6ZS56KTtcbiAgICAgICAgICAgIGlmIChtYXhEaW0gPCBNSU5fU0hBRE9XX1JBVElPICogbWluRGltKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXJrQmFrZWRTaGFkb3cobWVzaCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjaGVja0Jha2VkU2hhZG93cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy5ib3VuZGluZ0JveDtcbiAgICAgICAgY29uc3Qgc2hhZG93Qm94ID0gbmV3IEJveDMoKTtcbiAgICAgICAgdGhpcy5ib3VuZGluZ0JveC5nZXRTaXplKHRoaXMuc2l6ZSk7XG4gICAgICAgIGZvciAoY29uc3QgbWVzaCBvZiB0aGlzLmJha2VkU2hhZG93cykge1xuICAgICAgICAgICAgc2hhZG93Qm94LnNldEZyb21PYmplY3QobWVzaCk7XG4gICAgICAgICAgICBpZiAoc2hhZG93Qm94Lm1pbi55IDwgbWluLnkgKyB0aGlzLnNpemUueSAvIE1JTl9TSEFET1dfUkFUSU8gJiZcbiAgICAgICAgICAgICAgICBzaGFkb3dCb3gubWluLnggPD0gbWluLnggJiYgc2hhZG93Qm94Lm1heC54ID49IG1heC54ICYmXG4gICAgICAgICAgICAgICAgc2hhZG93Qm94Lm1pbi56IDw9IG1pbi56ICYmIHNoYWRvd0JveC5tYXgueiA+PSBtYXgueikge1xuICAgICAgICAgICAgICAgIC8vIGZsb29yIHNoYWRvd1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNoYWRvd0JveC5taW4ueiA8IG1pbi56ICsgdGhpcy5zaXplLnogLyBNSU5fU0hBRE9XX1JBVElPICYmXG4gICAgICAgICAgICAgICAgc2hhZG93Qm94Lm1pbi54IDw9IG1pbi54ICYmIHNoYWRvd0JveC5tYXgueCA+PSBtYXgueCAmJlxuICAgICAgICAgICAgICAgIHNoYWRvd0JveC5taW4ueSA8PSBtaW4ueSAmJiBzaGFkb3dCb3gubWF4LnkgPj0gbWF4LnkpIHtcbiAgICAgICAgICAgICAgICAvLyB3YWxsIHNoYWRvd1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51bm1hcmtCYWtlZFNoYWRvdyhtZXNoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhcHBseVRyYW5zZm9ybSgpIHtcbiAgICAgICAgY29uc3QgeyBtb2RlbCB9ID0gdGhpcztcbiAgICAgICAgaWYgKG1vZGVsID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9IHBhcnNlRXhwcmVzc2lvbnModGhpcy5lbGVtZW50Lm9yaWVudGF0aW9uKVswXVxuICAgICAgICAgICAgLnRlcm1zO1xuICAgICAgICBjb25zdCByb2xsID0gbm9ybWFsaXplVW5pdChvcmllbnRhdGlvblswXSkubnVtYmVyO1xuICAgICAgICBjb25zdCBwaXRjaCA9IG5vcm1hbGl6ZVVuaXQob3JpZW50YXRpb25bMV0pLm51bWJlcjtcbiAgICAgICAgY29uc3QgeWF3ID0gbm9ybWFsaXplVW5pdChvcmllbnRhdGlvblsyXSkubnVtYmVyO1xuICAgICAgICBtb2RlbC5xdWF0ZXJuaW9uLnNldEZyb21FdWxlcihuZXcgRXVsZXIocGl0Y2gsIHlhdywgcm9sbCwgJ1lYWicpKTtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBwYXJzZUV4cHJlc3Npb25zKHRoaXMuZWxlbWVudC5zY2FsZSlbMF1cbiAgICAgICAgICAgIC50ZXJtcztcbiAgICAgICAgbW9kZWwuc2NhbGUuc2V0KHNjYWxlWzBdLm51bWJlciwgc2NhbGVbMV0ubnVtYmVyLCBzY2FsZVsyXS5udW1iZXIpO1xuICAgIH1cbiAgICB1cGRhdGVCb3VuZGluZ0JveCgpIHtcbiAgICAgICAgY29uc3QgeyBtb2RlbCB9ID0gdGhpcztcbiAgICAgICAgaWYgKG1vZGVsID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhcmdldC5yZW1vdmUobW9kZWwpO1xuICAgICAgICB0aGlzLmZpbmRCYWtlZFNoYWRvd3MobW9kZWwpO1xuICAgICAgICBjb25zdCBib3VuZCA9IChib3gsIHZlcnRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGJveC5leHBhbmRCeVBvaW50KHZlcnRleCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2V0QmFrZWRTaGFkb3dWaXNpYmlsaXR5KGZhbHNlKTtcbiAgICAgICAgdGhpcy5ib3VuZGluZ0JveCA9IHJlZHVjZVZlcnRpY2VzKG1vZGVsLCBib3VuZCwgbmV3IEJveDMoKSk7XG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm90aGluZyBidXQgdGhlIGJha2VkIHNoYWRvdywgdGhlbiBpdCdzIG5vdCBhIGJha2VkIHNoYWRvdy5cbiAgICAgICAgaWYgKHRoaXMuYm91bmRpbmdCb3guaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJha2VkU2hhZG93VmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuYmFrZWRTaGFkb3dzLmZvckVhY2goKG1lc2gpID0+IHRoaXMudW5tYXJrQmFrZWRTaGFkb3cobWVzaCkpO1xuICAgICAgICAgICAgdGhpcy5ib3VuZGluZ0JveCA9IHJlZHVjZVZlcnRpY2VzKG1vZGVsLCBib3VuZCwgbmV3IEJveDMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGVja0Jha2VkU2hhZG93cygpO1xuICAgICAgICB0aGlzLnNldEJha2VkU2hhZG93VmlzaWJpbGl0eSgpO1xuICAgICAgICB0aGlzLmJvdW5kaW5nQm94LmdldFNpemUodGhpcy5zaXplKTtcbiAgICAgICAgdGhpcy50YXJnZXQuYWRkKG1vZGVsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgYm91bmRpbmdTcGhlcmUgYW5kIGlkZWFsQXNwZWN0IHRoYXQgYWxsb3dzIHRoZSAzRFxuICAgICAqIG9iamVjdCB0byBiZSBmcmFtZWQgdGlnaHRseSBpbiBhIDJEIHdpbmRvdyBvZiBhbnkgYXNwZWN0IHJhdGlvIHdpdGhvdXRcbiAgICAgKiBjbGlwcGluZyBhdCBhbnkgY2FtZXJhIG9yYml0LiBUaGUgY2FtZXJhJ3MgY2VudGVyIHRhcmdldCBwb2ludCBjYW4gYmVcbiAgICAgKiBvcHRpb25hbGx5IHNwZWNpZmllZC4gSWYgbm8gY2VudGVyIGlzIHNwZWNpZmllZCwgaXQgZGVmYXVsdHMgdG8gdGhlIGNlbnRlclxuICAgICAqIG9mIHRoZSBib3VuZGluZyBib3gsIHdoaWNoIG1lYW5zIGFzeW1tZXRyaWMgbW9kZWxzIHdpbGwgdGVuZCB0byBiZSB0aWdodCBvblxuICAgICAqIG9uZSBzaWRlIGluc3RlYWQgb2YgYm90aC4gUHJvcGVyIGNob2ljZSBvZiBjZW50ZXIgY2FuIGNvcnJlY3QgdGhpcy5cbiAgICAgKi9cbiAgICBhc3luYyB1cGRhdGVGcmFtaW5nKCkge1xuICAgICAgICBjb25zdCB7IG1vZGVsIH0gPSB0aGlzO1xuICAgICAgICBpZiAobW9kZWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFyZ2V0LnJlbW92ZShtb2RlbCk7XG4gICAgICAgIHRoaXMuc2V0QmFrZWRTaGFkb3dWaXNpYmlsaXR5KGZhbHNlKTtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIgfSA9IHRoaXMuYm91bmRpbmdTcGhlcmU7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZXF1ZXN0VXBkYXRlKCdjYW1lcmFUYXJnZXQnKTtcbiAgICAgICAgYXdhaXQgdGhpcy5lbGVtZW50LnVwZGF0ZUNvbXBsZXRlO1xuICAgICAgICBjZW50ZXIuY29weSh0aGlzLmdldFRhcmdldCgpKTtcbiAgICAgICAgY29uc3QgcmFkaXVzU3F1YXJlZCA9ICh2YWx1ZSwgdmVydGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgodmFsdWUsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCh2ZXJ0ZXgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPVxuICAgICAgICAgICAgTWF0aC5zcXJ0KHJlZHVjZVZlcnRpY2VzKG1vZGVsLCByYWRpdXNTcXVhcmVkLCAwKSk7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWxUYW5Gb3YgPSAodmFsdWUsIHZlcnRleCkgPT4ge1xuICAgICAgICAgICAgdmVydGV4LnN1YihjZW50ZXIpO1xuICAgICAgICAgICAgY29uc3QgcmFkaXVzWFogPSBNYXRoLnNxcnQodmVydGV4LnggKiB2ZXJ0ZXgueCArIHZlcnRleC56ICogdmVydGV4LnopO1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KHZhbHVlLCByYWRpdXNYWiAvICh0aGlzLmlkZWFsQ2FtZXJhRGlzdGFuY2UoKSAtIE1hdGguYWJzKHZlcnRleC55KSkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlkZWFsQXNwZWN0ID0gcmVkdWNlVmVydGljZXMobW9kZWwsIGhvcml6b250YWxUYW5Gb3YsIDApIC9cbiAgICAgICAgICAgIE1hdGgudGFuKCh0aGlzLmZyYW1lZEZvVkRlZyAvIDIpICogTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgIHRoaXMuc2V0QmFrZWRTaGFkb3dWaXNpYmlsaXR5KCk7XG4gICAgICAgIHRoaXMudGFyZ2V0LmFkZChtb2RlbCk7XG4gICAgfVxuICAgIHNldEJha2VkU2hhZG93VmlzaWJpbGl0eSh2aXNpYmxlID0gdGhpcy5zaGFkb3dJbnRlbnNpdHkgPD0gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IHNoYWRvdyBvZiB0aGlzLmJha2VkU2hhZG93cykge1xuICAgICAgICAgICAgc2hhZG93LnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlkZWFsQ2FtZXJhRGlzdGFuY2UoKSB7XG4gICAgICAgIGNvbnN0IGhhbGZGb3ZSYWQgPSAodGhpcy5mcmFtZWRGb1ZEZWcgLyAyKSAqIE1hdGguUEkgLyAxODA7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyAvIE1hdGguc2luKGhhbGZGb3ZSYWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQncyB0aGUgZnJhbWVkRmllbGRPZlZpZXcgYmFzZWQgb24gdGhlIGFzcGVjdCByYXRpbyBvZiB0aGUgd2luZG93IGluXG4gICAgICogb3JkZXIgdG8ga2VlcCB0aGUgbW9kZWwgZnVsbHkgdmlzaWJsZSBhdCBhbnkgY2FtZXJhIG9yaWVudGF0aW9uLlxuICAgICAqL1xuICAgIGFkanVzdGVkRm9WKGZvdkRlZykge1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IE1hdGgudGFuKChmb3ZEZWcgLyAyKSAqIE1hdGguUEkgLyAxODApICpcbiAgICAgICAgICAgIE1hdGgubWF4KDEsIHRoaXMuaWRlYWxBc3BlY3QgLyB0aGlzLmFzcGVjdCk7XG4gICAgICAgIHJldHVybiAyICogTWF0aC5hdGFuKHZlcnRpY2FsKSAqIDE4MCAvIE1hdGguUEk7XG4gICAgfVxuICAgIGdldE5EQyhjbGllbnRYLCBjbGllbnRZKSB7XG4gICAgICAgIGlmICh0aGlzLnhyQ2FtZXJhICE9IG51bGwpIHtcbiAgICAgICAgICAgIG5kYy5zZXQoY2xpZW50WCAvIHdpbmRvdy5zY3JlZW4ud2lkdGgsIGNsaWVudFkgLyB3aW5kb3cuc2NyZWVuLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgbmRjLnNldCgoY2xpZW50WCAtIHJlY3QueCkgLyB0aGlzLndpZHRoLCAoY2xpZW50WSAtIHJlY3QueSkgLyB0aGlzLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgbmRjLm11bHRpcGx5U2NhbGFyKDIpLnN1YlNjYWxhcigxKTtcbiAgICAgICAgbmRjLnkgKj0gLTE7XG4gICAgICAgIHJldHVybiBuZGM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNpemUgb2YgdGhlIGNvcnJlc3BvbmRpbmcgY2FudmFzIGVsZW1lbnQuXG4gICAgICovXG4gICAgZ2V0U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHRoaXMud2lkdGgsIGhlaWdodDogdGhpcy5oZWlnaHQgfTtcbiAgICB9XG4gICAgc2V0RW52aXJvbm1lbnRBbmRTa3lib3goZW52aXJvbm1lbnQsIHNreWJveCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50WyRyZW5kZXJlcl0uYXJSZW5kZXJlci5wcmVzZW50ZWRTY2VuZSA9PT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gc2t5Ym94O1xuICAgICAgICB0aGlzLnF1ZXVlUmVuZGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBvaW50IGluIG1vZGVsIGNvb3JkaW5hdGVzIHRoZSBtb2RlbCBzaG91bGQgb3JiaXQvcGl2b3QgYXJvdW5kLlxuICAgICAqL1xuICAgIHNldFRhcmdldChtb2RlbFgsIG1vZGVsWSwgbW9kZWxaKSB7XG4gICAgICAgIHRoaXMuZ29hbFRhcmdldC5zZXQoLW1vZGVsWCwgLW1vZGVsWSwgLW1vZGVsWik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGVjYXkgdGltZSBvZiwgYWZmZWN0cyB0aGUgc3BlZWQgb2YgdGFyZ2V0IHRyYW5zaXRpb25zLlxuICAgICAqL1xuICAgIHNldFRhcmdldERhbXBlckRlY2F5VGltZShkZWNheU1pbGxpc2Vjb25kcykge1xuICAgICAgICB0aGlzLnRhcmdldERhbXBlclguc2V0RGVjYXlUaW1lKGRlY2F5TWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy50YXJnZXREYW1wZXJZLnNldERlY2F5VGltZShkZWNheU1pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMudGFyZ2V0RGFtcGVyWi5zZXREZWNheVRpbWUoZGVjYXlNaWxsaXNlY29uZHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwb2ludCBpbiBtb2RlbCBjb29yZGluYXRlcyB0aGUgbW9kZWwgc2hvdWxkIG9yYml0L3Bpdm90IGFyb3VuZC5cbiAgICAgKi9cbiAgICBnZXRUYXJnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdvYWxUYXJnZXQuY2xvbmUoKS5tdWx0aXBseVNjYWxhcigtMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNoaWZ0cyB0aGUgbW9kZWwgdG8gdGhlIHRhcmdldCBwb2ludCBpbW1lZGlhdGVseSBpbnN0ZWFkIG9mIGVhc2luZyBpbi5cbiAgICAgKi9cbiAgICBqdW1wVG9Hb2FsKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRhcmdldChTRVRUTElOR19USU1FKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIGV2ZXJ5IGZyYW1lIHdpdGggdGhlIGZyYW1lIGRlbHRhIHRvIGNhdXNlIHRoZSB0YXJnZXRcbiAgICAgKiB0byB0cmFuc2l0aW9uIHRvIGl0cyBzZXQgcG9pbnQuXG4gICAgICovXG4gICAgdXBkYXRlVGFyZ2V0KGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IGdvYWwgPSB0aGlzLmdvYWxUYXJnZXQ7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0LnBvc2l0aW9uO1xuICAgICAgICBpZiAoIWdvYWwuZXF1YWxzKHRhcmdldCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6YXRpb24gPSB0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyAvIDEwO1xuICAgICAgICAgICAgbGV0IHsgeCwgeSwgeiB9ID0gdGFyZ2V0O1xuICAgICAgICAgICAgeCA9IHRoaXMudGFyZ2V0RGFtcGVyWC51cGRhdGUoeCwgZ29hbC54LCBkZWx0YSwgbm9ybWFsaXphdGlvbik7XG4gICAgICAgICAgICB5ID0gdGhpcy50YXJnZXREYW1wZXJZLnVwZGF0ZSh5LCBnb2FsLnksIGRlbHRhLCBub3JtYWxpemF0aW9uKTtcbiAgICAgICAgICAgIHogPSB0aGlzLnRhcmdldERhbXBlcloudXBkYXRlKHosIGdvYWwueiwgZGVsdGEsIG5vcm1hbGl6YXRpb24pO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQucG9zaXRpb24uc2V0KHgsIHksIHopO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQudXBkYXRlTWF0cml4V29ybGQoKTtcbiAgICAgICAgICAgIHRoaXMucXVldWVSZW5kZXIoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFlhdyB0aGUgK3ogKGZyb250KSBvZiB0aGUgbW9kZWwgdG93YXJkIHRoZSBpbmRpY2F0ZWQgd29ybGQgY29vcmRpbmF0ZXMuXG4gICAgICovXG4gICAgcG9pbnRUb3dhcmRzKHdvcmxkWCwgd29ybGRaKSB7XG4gICAgICAgIGNvbnN0IHsgeCwgeiB9ID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgdGhpcy55YXcgPSBNYXRoLmF0YW4yKHdvcmxkWCAtIHgsIHdvcmxkWiAtIHopO1xuICAgIH1cbiAgICBnZXQgbW9kZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogWWF3IGlzIHRoZSBzY2VuZSdzIG9yaWVudGF0aW9uIGFib3V0IHRoZSB5LWF4aXMsIGFyb3VuZCB0aGUgcm90YXRpb25cbiAgICAgKiBjZW50ZXIuXG4gICAgICovXG4gICAgc2V0IHlhdyhyYWRpYW5zWSkge1xuICAgICAgICB0aGlzLnJvdGF0aW9uLnkgPSByYWRpYW5zWTtcbiAgICAgICAgdGhpcy5xdWV1ZVJlbmRlcigpO1xuICAgIH1cbiAgICBnZXQgeWF3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3RhdGlvbi55O1xuICAgIH1cbiAgICBzZXQgYW5pbWF0aW9uVGltZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLm1peGVyLnNldFRpbWUodmFsdWUpO1xuICAgICAgICB0aGlzLnF1ZXVlU2hhZG93UmVuZGVyKCk7XG4gICAgfVxuICAgIGdldCBhbmltYXRpb25UaW1lKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50QW5pbWF0aW9uQWN0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvb3BDb3VudCA9IE1hdGgubWF4KHRoaXMuY3VycmVudEFuaW1hdGlvbkFjdGlvbi5fbG9vcENvdW50LCAwKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRBbmltYXRpb25BY3Rpb24ubG9vcCA9PT0gTG9vcFBpbmdQb25nICYmXG4gICAgICAgICAgICAgICAgKGxvb3BDb3VudCAmIDEpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb24gLSB0aGlzLmN1cnJlbnRBbmltYXRpb25BY3Rpb24udGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRBbmltYXRpb25BY3Rpb24udGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgc2V0IGFuaW1hdGlvblRpbWVTY2FsZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLm1peGVyLnRpbWVTY2FsZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgYW5pbWF0aW9uVGltZVNjYWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taXhlci50aW1lU2NhbGU7XG4gICAgfVxuICAgIGdldCBkdXJhdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEFuaW1hdGlvbkFjdGlvbiAhPSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb25BY3Rpb24uZ2V0Q2xpcCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50QW5pbWF0aW9uQWN0aW9uLmdldENsaXAoKS5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZ2V0IGhhc0FjdGl2ZUFuaW1hdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEFuaW1hdGlvbkFjdGlvbiAhPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQbGF5cyBhbiBhbmltYXRpb24gaWYgdGhlcmUgYXJlIGFueSBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgbW9kZWwuXG4gICAgICogQWNjZXB0cyBhbiBvcHRpb25hbCBzdHJpbmcgbmFtZSBvZiBhbiBhbmltYXRpb24gdG8gcGxheS4gSWYgbm8gbmFtZSBpc1xuICAgICAqIHByb3ZpZGVkLCBvciBpZiBubyBhbmltYXRpb24gaXMgZm91bmQgYnkgdGhlIGdpdmVuIG5hbWUsIGFsd2F5cyBmYWxscyBiYWNrXG4gICAgICogdG8gcGxheWluZyB0aGUgZmlyc3QgYW5pbWF0aW9uLlxuICAgICAqL1xuICAgIHBsYXlBbmltYXRpb24obmFtZSA9IG51bGwsIGNyb3NzZmFkZVRpbWUgPSAwLCBsb29wTW9kZSA9IExvb3BSZXBlYXQsIHJlcGV0aXRpb25Db3VudCA9IEluZmluaXR5KSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50R0xURiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBhbmltYXRpb25zIH0gPSB0aGlzO1xuICAgICAgICBpZiAoYW5pbWF0aW9ucyA9PSBudWxsIHx8IGFuaW1hdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYENhbm5vdCBwbGF5IGFuaW1hdGlvbiAobW9kZWwgZG9lcyBub3QgaGF2ZSBhbnkgYW5pbWF0aW9ucylgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYW5pbWF0aW9uQ2xpcCA9IG51bGw7XG4gICAgICAgIGlmIChuYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbkNsaXAgPSB0aGlzLmFuaW1hdGlvbnNCeU5hbWUuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNsaXAgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFuaW1hdGlvbkluZGV4ID0gcGFyc2VJbnQobmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZWRBbmltYXRpb25JbmRleCkgJiYgcGFyc2VkQW5pbWF0aW9uSW5kZXggPj0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRBbmltYXRpb25JbmRleCA8IGFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNsaXAgPSBhbmltYXRpb25zW3BhcnNlZEFuaW1hdGlvbkluZGV4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGlvbkNsaXAgPT0gbnVsbCkge1xuICAgICAgICAgICAgYW5pbWF0aW9uQ2xpcCA9IGFuaW1hdGlvbnNbMF07XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgY3VycmVudEFuaW1hdGlvbkFjdGlvbjogbGFzdEFuaW1hdGlvbkFjdGlvbiB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMubWl4ZXIuY2xpcEFjdGlvbihhbmltYXRpb25DbGlwLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbkFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnQucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5taXhlci5zdG9wQWxsQWN0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RBbmltYXRpb25BY3Rpb24gIT0gbnVsbCAmJiBhY3Rpb24gIT09IGxhc3RBbmltYXRpb25BY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmNyb3NzRmFkZUZyb20obGFzdEFuaW1hdGlvbkFjdGlvbiwgY3Jvc3NmYWRlVGltZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFuaW1hdGlvblRpbWVTY2FsZSA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25UaW1lID09IHRoaXMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIHdoYXQgSSBiZWxpZXZlIGlzIGEgdGhyZWUuanMgYnVnLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblRpbWUgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjdGlvbi5zZXRMb29wKGxvb3BNb2RlLCByZXBldGl0aW9uQ291bnQpO1xuICAgICAgICAgICAgYWN0aW9uLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgYWN0aW9uLmNsYW1wV2hlbkZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGFjdGlvbi5wbGF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdG9wQW5pbWF0aW9uKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb25BY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm1peGVyLnN0b3BBbGxBY3Rpb24oKTtcbiAgICB9XG4gICAgdXBkYXRlQW5pbWF0aW9uKHN0ZXApIHtcbiAgICAgICAgdGhpcy5taXhlci51cGRhdGUoc3RlcCk7XG4gICAgICAgIHRoaXMucXVldWVTaGFkb3dSZW5kZXIoKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlTWl4ZXJFdmVudChldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5taXhlci5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgaWYgdGhlIG9iamVjdCBoYXMgYmVlbiBjaGFuZ2VkIGluIHN1Y2ggYSB3YXkgdGhhdCB0aGUgc2hhZG93J3Mgc2hhcGVcbiAgICAgKiBoYXMgY2hhbmdlZCAobm90IGEgcm90YXRpb24gYWJvdXQgdGhlIFkgYXhpcykuXG4gICAgICovXG4gICAgdXBkYXRlU2hhZG93KCkge1xuICAgICAgICBjb25zdCBzaGFkb3cgPSB0aGlzLnNoYWRvdztcbiAgICAgICAgaWYgKHNoYWRvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBzaWRlID0gdGhpcy5lbGVtZW50LmFyUGxhY2VtZW50ID09PSAnd2FsbCcgPyAnYmFjaycgOiAnYm90dG9tJztcbiAgICAgICAgICAgIHNoYWRvdy5zZXRTY2VuZSh0aGlzLCB0aGlzLnNoYWRvd1NvZnRuZXNzLCBzaWRlKTtcbiAgICAgICAgICAgIHNoYWRvdy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVuZGVyU2hhZG93KHJlbmRlcmVyKSB7XG4gICAgICAgIGNvbnN0IHNoYWRvdyA9IHRoaXMuc2hhZG93O1xuICAgICAgICBpZiAoc2hhZG93ICE9IG51bGwgJiYgc2hhZG93Lm5lZWRzVXBkYXRlID09IHRydWUpIHtcbiAgICAgICAgICAgIHNoYWRvdy5yZW5kZXIocmVuZGVyZXIsIHRoaXMpO1xuICAgICAgICAgICAgc2hhZG93Lm5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWVTaGFkb3dSZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnNoYWRvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNoYWRvdy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc2hhZG93J3MgaW50ZW5zaXR5LCBsYXppbHkgY3JlYXRpbmcgdGhlIHNoYWRvdyBhcyBuZWNlc3NhcnkuXG4gICAgICovXG4gICAgc2V0U2hhZG93SW50ZW5zaXR5KHNoYWRvd0ludGVuc2l0eSkge1xuICAgICAgICB0aGlzLnNoYWRvd0ludGVuc2l0eSA9IHNoYWRvd0ludGVuc2l0eTtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRHTFRGID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEJha2VkU2hhZG93VmlzaWJpbGl0eSgpO1xuICAgICAgICBpZiAoc2hhZG93SW50ZW5zaXR5IDw9IDAgJiYgdGhpcy5zaGFkb3cgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNoYWRvdyA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBzaWRlID0gdGhpcy5lbGVtZW50LmFyUGxhY2VtZW50ID09PSAnd2FsbCcgPyAnYmFjaycgOiAnYm90dG9tJztcbiAgICAgICAgICAgIHRoaXMuc2hhZG93ID0gbmV3IFNoYWRvdyh0aGlzLCB0aGlzLnNoYWRvd1NvZnRuZXNzLCBzaWRlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNoYWRvdy5zZXRJbnRlbnNpdHkoc2hhZG93SW50ZW5zaXR5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc2hhZG93J3Mgc29mdG5lc3MgYnkgbWFwcGluZyBhIFswLCAxXSBzb2Z0bmVzcyBwYXJhbWV0ZXIgdG8gdGhlXG4gICAgICogc2hhZG93J3MgcmVzb2x1dGlvbi4gVGhpcyBpbnZvbHZlcyByZWFsbG9jYXRpb24sIHNvIGl0IHNob3VsZCBub3QgYmVcbiAgICAgKiBjaGFuZ2VkIGZyZXF1ZW50bHkuIFNvZnRlciBzaGFkb3dzIGFyZSBjaGVhcGVyIHRvIHJlbmRlci5cbiAgICAgKi9cbiAgICBzZXRTaGFkb3dTb2Z0bmVzcyhzb2Z0bmVzcykge1xuICAgICAgICB0aGlzLnNoYWRvd1NvZnRuZXNzID0gc29mdG5lc3M7XG4gICAgICAgIGNvbnN0IHNoYWRvdyA9IHRoaXMuc2hhZG93O1xuICAgICAgICBpZiAoc2hhZG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNoYWRvdy5zZXRTb2Z0bmVzcyhzb2Z0bmVzcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hpZnQgdGhlIGZsb29yIHZlcnRpY2FsbHkgZnJvbSB0aGUgYm90dG9tIG9mIHRoZSBtb2RlbCdzIGJvdW5kaW5nIGJveCBieVxuICAgICAqIG9mZnNldCAoc2hvdWxkIGdlbmVyYWxseSBiZSBuZWdhdGl2ZSkuXG4gICAgICovXG4gICAgc2V0U2hhZG93T2Zmc2V0KG9mZnNldCkge1xuICAgICAgICBjb25zdCBzaGFkb3cgPSB0aGlzLnNoYWRvdztcbiAgICAgICAgaWYgKHNoYWRvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBzaGFkb3cuc2V0T2Zmc2V0KG9mZnNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHJheWNhc3RlcigpIHtcbiAgICAgICAgcmV0dXJuIHJheWNhc3RlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgd29ybGQgcG9zaXRpb24sIG1vZGVsLXNwYWNlIG5vcm1hbCBhbmQgdGV4dHVyZVxuICAgICAqIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IG9uIHRoZSBtZXNoIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGlucHV0IHBpeGVsXG4gICAgICogY29vcmRpbmF0ZXMgZ2l2ZW4gcmVsYXRpdmUgdG8gdGhlIG1vZGVsLXZpZXdlciBlbGVtZW50LiBJZiB0aGUgbWVzaFxuICAgICAqIGlzIG5vdCBoaXQsIHRoZSByZXN1bHQgaXMgbnVsbC5cbiAgICAgKi9cbiAgICBwb3NpdGlvbkFuZE5vcm1hbEZyb21Qb2ludChuZGNQb3NpdGlvbiwgb2JqZWN0ID0gdGhpcykge1xuICAgICAgICB0aGlzLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKG5kY1Bvc2l0aW9uLCB0aGlzLmdldENhbWVyYSgpKTtcbiAgICAgICAgY29uc3QgaGl0cyA9IHRoaXMucmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdChvYmplY3QsIHRydWUpO1xuICAgICAgICBjb25zdCBoaXQgPSBoaXRzLmZpbmQoKGhpdCkgPT4gaGl0Lm9iamVjdC52aXNpYmxlICYmICFoaXQub2JqZWN0LnVzZXJEYXRhLnNoYWRvdyk7XG4gICAgICAgIGlmIChoaXQgPT0gbnVsbCB8fCBoaXQuZmFjZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGl0LnV2ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBvc2l0aW9uOiBoaXQucG9pbnQsIG5vcm1hbDogaGl0LmZhY2Uubm9ybWFsLCB1djogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGhpdC5mYWNlLm5vcm1hbC5hcHBseU5vcm1hbE1hdHJpeChuZXcgTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeChoaXQub2JqZWN0Lm1hdHJpeFdvcmxkKSk7XG4gICAgICAgIHJldHVybiB7IHBvc2l0aW9uOiBoaXQucG9pbnQsIG5vcm1hbDogaGl0LmZhY2Uubm9ybWFsLCB1djogaGl0LnV2IH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgZm9yIG9wZXJhdGluZyBvbiB0aGUgc2V0IG9mIEhvdHNwb3Qgb2JqZWN0c1xuICAgICAqIGF0dGFjaGVkIHRvIHRoZSBzY2VuZS4gVGhlc2UgY29tZSBmcm9tIERPTSBlbGVtZW50cywgcHJvdmlkZWQgdG8gc2xvdHMgYnlcbiAgICAgKiB0aGUgQW5ub3RhdGlvbiBNaXhpbi5cbiAgICAgKi9cbiAgICBhZGRIb3RzcG90KGhvdHNwb3QpIHtcbiAgICAgICAgdGhpcy50YXJnZXQuYWRkKGhvdHNwb3QpO1xuICAgICAgICAvLyBUaGlzIGhhcHBlbnMgYXV0b21hdGljYWxseSBpbiByZW5kZXIoKSwgYnV0IHdlIGRvIGl0IGVhcmx5IHNvIHRoYXRcbiAgICAgICAgLy8gdGhlIHNsb3RzIGFwcGVhciBpbiB0aGUgc2hhZG93IERPTSBhbmQgdGhlIGVsZW1lbnRzIGdldCBhdHRhY2hlZCxcbiAgICAgICAgLy8gYWxsb3dpbmcgdXMgdG8gZGlzcGF0Y2ggZXZlbnRzIG9uIHRoZW0uXG4gICAgICAgIHRoaXMuYW5ub3RhdGlvblJlbmRlcmVyLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQoaG90c3BvdC5lbGVtZW50KTtcbiAgICB9XG4gICAgcmVtb3ZlSG90c3BvdChob3RzcG90KSB7XG4gICAgICAgIHRoaXMudGFyZ2V0LnJlbW92ZShob3RzcG90KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGVscGVyIG1ldGhvZCB0byBhcHBseSBhIGZ1bmN0aW9uIHRvIGFsbCBob3RzcG90cy5cbiAgICAgKi9cbiAgICBmb3JIb3RzcG90cyhmdW5jKSB7XG4gICAgICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMudGFyZ2V0O1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaG90c3BvdCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgaWYgKGhvdHNwb3QgaW5zdGFuY2VvZiBIb3RzcG90KSB7XG4gICAgICAgICAgICAgICAgZnVuYyhob3RzcG90KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIENTUyB2aXNpYmlsaXR5IG9mIHRoZSBob3RzcG90cyBiYXNlZCBvbiB3aGV0aGVyIHRoZWlyIG5vcm1hbHNcbiAgICAgKiBwb2ludCB0b3dhcmQgdGhlIGNhbWVyYS5cbiAgICAgKi9cbiAgICB1cGRhdGVIb3RzcG90cyh2aWV3ZXJQb3NpdGlvbikge1xuICAgICAgICB0aGlzLmZvckhvdHNwb3RzKChob3RzcG90KSA9PiB7XG4gICAgICAgICAgICB2aWV3LmNvcHkodmlld2VyUG9zaXRpb24pO1xuICAgICAgICAgICAgdGFyZ2V0LnNldEZyb21NYXRyaXhQb3NpdGlvbihob3RzcG90Lm1hdHJpeFdvcmxkKTtcbiAgICAgICAgICAgIHZpZXcuc3ViKHRhcmdldCk7XG4gICAgICAgICAgICBub3JtYWxXb3JsZC5jb3B5KGhvdHNwb3Qubm9ybWFsKVxuICAgICAgICAgICAgICAgIC50cmFuc2Zvcm1EaXJlY3Rpb24odGhpcy50YXJnZXQubWF0cml4V29ybGQpO1xuICAgICAgICAgICAgaWYgKHZpZXcuZG90KG5vcm1hbFdvcmxkKSA8IDApIHtcbiAgICAgICAgICAgICAgICBob3RzcG90LmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvdHNwb3Quc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUm90YXRlIGFsbCBob3RzcG90cyB0byBhbiBhYnNvbHV0ZSBvcmllbnRhdGlvbiBnaXZlbiBieSB0aGUgaW5wdXQgbnVtYmVyIG9mXG4gICAgICogcmFkaWFucy4gWmVybyByZXR1cm5zIHRoZW0gdG8gdXByaWdodC5cbiAgICAgKi9cbiAgICBvcmllbnRIb3RzcG90cyhyYWRpYW5zKSB7XG4gICAgICAgIHRoaXMuZm9ySG90c3BvdHMoKGhvdHNwb3QpID0+IHtcbiAgICAgICAgICAgIGhvdHNwb3Qub3JpZW50KHJhZGlhbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSByZW5kZXJpbmcgdmlzaWJpbGl0eSBvZiBhbGwgaG90c3BvdHMuIFRoaXMgaXMgdXNlZCB0byBoaWRlIHRoZW1cbiAgICAgKiBkdXJpbmcgdHJhbnNpdGlvbnMgYW5kIHN1Y2guXG4gICAgICovXG4gICAgc2V0SG90c3BvdHNWaXNpYmlsaXR5KHZpc2libGUpIHtcbiAgICAgICAgdGhpcy5mb3JIb3RzcG90cygoaG90c3BvdCkgPT4ge1xuICAgICAgICAgICAgaG90c3BvdC52aXNpYmxlID0gdmlzaWJsZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZVNjaGVtYShzcmMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IHNjaGVtYUVsZW1lbnQsIGVsZW1lbnQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgYWx0LCBwb3N0ZXIsIGlvc1NyYyB9ID0gZWxlbWVudDtcbiAgICAgICAgaWYgKHNyYyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBlbmNvZGluZyA9IFt7XG4gICAgICAgICAgICAgICAgICAgICdAdHlwZSc6ICdNZWRpYU9iamVjdCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRVcmw6IHNyYyxcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RpbmdGb3JtYXQ6ICgoX2EgPSBzcmMuc3BsaXQoJy4nKS5wb3AoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvTG93ZXJDYXNlKCkpID09PSAnZ2x0ZicgP1xuICAgICAgICAgICAgICAgICAgICAgICAgJ21vZGVsL2dsdGYranNvbicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgJ21vZGVsL2dsdGYtYmluYXJ5J1xuICAgICAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgaWYgKGlvc1NyYykge1xuICAgICAgICAgICAgICAgIGVuY29kaW5nLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAnQHR5cGUnOiAnTWVkaWFPYmplY3QnLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VXJsOiBpb3NTcmMsXG4gICAgICAgICAgICAgICAgICAgIGVuY29kaW5nRm9ybWF0OiAnbW9kZWwvdm5kLnVzZHoremlwJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RydWN0dXJlZERhdGEgPSB7XG4gICAgICAgICAgICAgICAgJ0Bjb250ZXh0JzogJ2h0dHA6Ly9zY2hlbWEub3JnLycsXG4gICAgICAgICAgICAgICAgJ0B0eXBlJzogJzNETW9kZWwnLFxuICAgICAgICAgICAgICAgIGltYWdlOiBwb3N0ZXIgIT09IG51bGwgJiYgcG9zdGVyICE9PSB2b2lkIDAgPyBwb3N0ZXIgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbmFtZTogYWx0ICE9PSBudWxsICYmIGFsdCAhPT0gdm9pZCAwID8gYWx0IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGVuY29kaW5nXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2NoZW1hRWxlbWVudC50ZXh0Q29udGVudCA9IEpTT04uc3RyaW5naWZ5KHN0cnVjdHVyZWREYXRhKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NoZW1hRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2NoZW1hRWxlbWVudC5wYXJlbnRFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNjaGVtYUVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChzY2hlbWFFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vZGVsU2NlbmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelScene.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelUtils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/ModelUtils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   moveChildren: () => (/* binding */ moveChildren),\n/* harmony export */   reduceVertices: () => (/* binding */ reduceVertices)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Moves Three.js objects from one parent to another\n */\nconst moveChildren = (from, to) => {\n    while (from.children.length) {\n        to.add(from.children.shift());\n    }\n};\n/**\n * Performs a reduction across all the vertices of the input model and all its\n * children. The supplied function takes the reduced value and a vertex and\n * returns the newly reduced value. The value is initialized as zero.\n *\n * Adapted from Three.js, @see https://github.com/mrdoob/three.js/blob/7e0a78beb9317e580d7fa4da9b5b12be051c6feb/src/math/Box3.js#L241\n */\nconst reduceVertices = (model, func, initialValue) => {\n    let value = initialValue;\n    const vertex = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    model.traverseVisible((object) => {\n        let i, l;\n        object.updateWorldMatrix(false, false);\n        const geometry = object.geometry;\n        if (geometry !== undefined) {\n            if (geometry.isGeometry) {\n                const vertices = geometry.vertices;\n                for (i = 0, l = vertices.length; i < l; i++) {\n                    vertex.copy(vertices[i]);\n                    if (object.isSkinnedMesh) {\n                        object.boneTransform(i, vertex);\n                    }\n                    else {\n                        vertex.applyMatrix4(object.matrixWorld);\n                    }\n                    value = func(value, vertex);\n                }\n            }\n            else if (geometry.isBufferGeometry) {\n                const { position } = geometry.attributes;\n                if (position !== undefined) {\n                    for (i = 0, l = position.count; i < l; i++) {\n                        vertex.fromBufferAttribute(position, i);\n                        if (object.isSkinnedMesh) {\n                            object.boneTransform(i, vertex);\n                        }\n                        else {\n                            vertex.applyMatrix4(object.matrixWorld);\n                        }\n                        value = func(value, vertex);\n                    }\n                }\n            }\n        }\n    });\n    return value;\n};\n//# sourceMappingURL=ModelUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvTW9kZWxVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1QkFBdUIsMENBQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFdBQVc7QUFDbkM7QUFDQSxvREFBb0QsT0FBTztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvTW9kZWxVdGlscy5qcz80MjdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG4vKipcbiAqIE1vdmVzIFRocmVlLmpzIG9iamVjdHMgZnJvbSBvbmUgcGFyZW50IHRvIGFub3RoZXJcbiAqL1xuZXhwb3J0IGNvbnN0IG1vdmVDaGlsZHJlbiA9IChmcm9tLCB0bykgPT4ge1xuICAgIHdoaWxlIChmcm9tLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICB0by5hZGQoZnJvbS5jaGlsZHJlbi5zaGlmdCgpKTtcbiAgICB9XG59O1xuLyoqXG4gKiBQZXJmb3JtcyBhIHJlZHVjdGlvbiBhY3Jvc3MgYWxsIHRoZSB2ZXJ0aWNlcyBvZiB0aGUgaW5wdXQgbW9kZWwgYW5kIGFsbCBpdHNcbiAqIGNoaWxkcmVuLiBUaGUgc3VwcGxpZWQgZnVuY3Rpb24gdGFrZXMgdGhlIHJlZHVjZWQgdmFsdWUgYW5kIGEgdmVydGV4IGFuZFxuICogcmV0dXJucyB0aGUgbmV3bHkgcmVkdWNlZCB2YWx1ZS4gVGhlIHZhbHVlIGlzIGluaXRpYWxpemVkIGFzIHplcm8uXG4gKlxuICogQWRhcHRlZCBmcm9tIFRocmVlLmpzLCBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi83ZTBhNzhiZWI5MzE3ZTU4MGQ3ZmE0ZGE5YjViMTJiZTA1MWM2ZmViL3NyYy9tYXRoL0JveDMuanMjTDI0MVxuICovXG5leHBvcnQgY29uc3QgcmVkdWNlVmVydGljZXMgPSAobW9kZWwsIGZ1bmMsIGluaXRpYWxWYWx1ZSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuICAgIG1vZGVsLnRyYXZlcnNlVmlzaWJsZSgob2JqZWN0KSA9PiB7XG4gICAgICAgIGxldCBpLCBsO1xuICAgICAgICBvYmplY3QudXBkYXRlV29ybGRNYXRyaXgoZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG4gICAgICAgIGlmIChnZW9tZXRyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoZ2VvbWV0cnkuaXNHZW9tZXRyeSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXguY29weSh2ZXJ0aWNlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3QuaXNTa2lubmVkTWVzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmJvbmVUcmFuc2Zvcm0oaSwgdmVydGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleC5hcHBseU1hdHJpeDQob2JqZWN0Lm1hdHJpeFdvcmxkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmModmFsdWUsIHZlcnRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgcG9zaXRpb24gfSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHBvc2l0aW9uLmNvdW50OyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbiwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqZWN0LmlzU2tpbm5lZE1lc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuYm9uZVRyYW5zZm9ybShpLCB2ZXJ0ZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4LmFwcGx5TWF0cml4NChvYmplY3QubWF0cml4V29ybGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHZhbHVlLCB2ZXJ0ZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vZGVsVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/PlacementBox.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/PlacementBox.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlacementBox: () => (/* binding */ PlacementBox)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _Damper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst RADIUS = 0.2;\nconst LINE_WIDTH = 0.03;\nconst MAX_OPACITY = 0.75;\nconst SEGMENTS = 12;\nconst DELTA_PHI = Math.PI / (2 * SEGMENTS);\nconst vector2 = new three__WEBPACK_IMPORTED_MODULE_1__.Vector2();\n/**\n * Adds a quarter-annulus of vertices to the array, centered on cornerX,\n * cornerY.\n */\nconst addCorner = (vertices, cornerX, cornerY) => {\n    let phi = cornerX > 0 ? (cornerY > 0 ? 0 : -Math.PI / 2) :\n        (cornerY > 0 ? Math.PI / 2 : Math.PI);\n    for (let i = 0; i <= SEGMENTS; ++i) {\n        vertices.push(cornerX + (RADIUS - LINE_WIDTH) * Math.cos(phi), cornerY + (RADIUS - LINE_WIDTH) * Math.sin(phi), 0, cornerX + RADIUS * Math.cos(phi), cornerY + RADIUS * Math.sin(phi), 0);\n        phi += DELTA_PHI;\n    }\n};\n/**\n * This class is a set of two coincident planes. The first is just a cute box\n * outline with rounded corners and damped opacity to indicate the floor extents\n * of a scene. It is purposely larger than the scene's bounding box by RADIUS on\n * all sides so that small scenes are still visible / selectable. Its center is\n * actually carved out by vertices to ensure its fragment shader doesn't add\n * much time.\n *\n * The child plane is a simple plane with the same extents for use in hit\n * testing (translation is triggered when the touch hits the plane, rotation\n * otherwise).\n */\nclass PlacementBox extends three__WEBPACK_IMPORTED_MODULE_1__.Mesh {\n    constructor(scene, side) {\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        const triangles = [];\n        const vertices = [];\n        const { size, boundingBox } = scene;\n        const x = size.x / 2;\n        const y = (side === 'back' ? size.y : size.z) / 2;\n        addCorner(vertices, x, y);\n        addCorner(vertices, -x, y);\n        addCorner(vertices, -x, -y);\n        addCorner(vertices, x, -y);\n        const numVertices = vertices.length / 3;\n        for (let i = 0; i < numVertices - 2; i += 2) {\n            triangles.push(i, i + 1, i + 3, i, i + 3, i + 2);\n        }\n        const i = numVertices - 2;\n        triangles.push(i, i + 1, 1, i, 1, 0);\n        geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(vertices, 3));\n        geometry.setIndex(triangles);\n        super(geometry);\n        this.side = side;\n        const material = this.material;\n        material.side = three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide;\n        material.transparent = true;\n        material.opacity = 0;\n        this.goalOpacity = 0;\n        this.opacityDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_0__.Damper();\n        this.hitPlane =\n            new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(new three__WEBPACK_IMPORTED_MODULE_1__.PlaneGeometry(2 * (x + RADIUS), 2 * (y + RADIUS)));\n        this.hitPlane.visible = false;\n        this.hitPlane.material.side = three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide;\n        this.add(this.hitPlane);\n        boundingBox.getCenter(this.position);\n        switch (side) {\n            case 'bottom':\n                this.rotateX(-Math.PI / 2);\n                this.shadowHeight = boundingBox.min.y;\n                this.position.y = this.shadowHeight;\n                break;\n            case 'back':\n                this.shadowHeight = boundingBox.min.z;\n                this.position.z = this.shadowHeight;\n        }\n        scene.target.add(this);\n        this.offsetHeight = 0;\n    }\n    /**\n     * Get the world hit position if the touch coordinates hit the box, and null\n     * otherwise. Pass the scene in to get access to its raycaster.\n     */\n    getHit(scene, screenX, screenY) {\n        vector2.set(screenX, -screenY);\n        this.hitPlane.visible = true;\n        const hitResult = scene.positionAndNormalFromPoint(vector2, this.hitPlane);\n        this.hitPlane.visible = false;\n        return hitResult == null ? null : hitResult.position;\n    }\n    getExpandedHit(scene, screenX, screenY) {\n        this.hitPlane.scale.set(1000, 1000, 1000);\n        this.hitPlane.updateMatrixWorld();\n        const hitResult = this.getHit(scene, screenX, screenY);\n        this.hitPlane.scale.set(1, 1, 1);\n        return hitResult;\n    }\n    /**\n     * Offset the height of the box relative to the bottom of the scene. Positive\n     * is up, so generally only negative values are used.\n     */\n    set offsetHeight(offset) {\n        offset -= 0.001; // push 1 mm below shadow to avoid z-fighting\n        if (this.side === 'back') {\n            this.position.z = this.shadowHeight + offset;\n        }\n        else {\n            this.position.y = this.shadowHeight + offset;\n        }\n    }\n    get offsetHeight() {\n        if (this.side === 'back') {\n            return this.position.z - this.shadowHeight;\n        }\n        else {\n            return this.position.y - this.shadowHeight;\n        }\n    }\n    /**\n     * Set the box's visibility; it will fade in and out.\n     */\n    set show(visible) {\n        this.goalOpacity = visible ? MAX_OPACITY : 0;\n    }\n    /**\n     * Call on each frame with the frame delta to fade the box.\n     */\n    updateOpacity(delta) {\n        const material = this.material;\n        material.opacity =\n            this.opacityDamper.update(material.opacity, this.goalOpacity, delta, 1);\n        this.visible = material.opacity > 0;\n    }\n    /**\n     * Call this to clean up Three's cache when you remove the box.\n     */\n    dispose() {\n        var _a;\n        const { geometry, material } = this.hitPlane;\n        geometry.dispose();\n        material.dispose();\n        this.geometry.dispose();\n        this.material.dispose();\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.remove(this);\n    }\n}\n//# sourceMappingURL=PlacementBox.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/PlacementBox.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Renderer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_POWER_PREFERENCE: () => (/* binding */ DEFAULT_POWER_PREFERENCE),\n/* harmony export */   Renderer: () => (/* binding */ Renderer)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _features_environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/environment.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _ARRenderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ARRenderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js\");\n/* harmony import */ var _CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CachingGLTFLoader.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js\");\n/* harmony import */ var _Debugger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Debugger.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Debugger.js\");\n/* harmony import */ var _gltf_instance_ModelViewerGLTFInstance_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gltf-instance/ModelViewerGLTFInstance.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/ModelViewerGLTFInstance.js\");\n/* harmony import */ var _TextureUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TextureUtils.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/TextureUtils.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n// Between 0 and 1: larger means the average responds faster and is less smooth.\nconst DURATION_DECAY = 0.2;\nconst LOW_FRAME_DURATION_MS = 40;\nconst HIGH_FRAME_DURATION_MS = 60;\nconst MAX_AVG_CHANGE_MS = 5;\nconst SCALE_STEPS = [1, 0.79, 0.62, 0.5, 0.4, 0.31, 0.25];\nconst DEFAULT_LAST_STEP = 3;\nconst DEFAULT_POWER_PREFERENCE = 'high-performance';\n/**\n * Registers canvases with Canvas2DRenderingContexts and renders them\n * all in the same WebGLRenderingContext, spitting out textures to apply\n * to the canvases. Creates a fullscreen WebGL canvas that is not added\n * to the DOM, and on each frame, renders each registered canvas on a portion\n * of the WebGL canvas, and applies the texture on the registered canvas.\n *\n * In the future, can use ImageBitmapRenderingContext instead of\n * Canvas2DRenderingContext if supported for cheaper transferring of\n * the texture.\n */\nclass Renderer extends three__WEBPACK_IMPORTED_MODULE_8__.EventDispatcher {\n    constructor(options) {\n        super();\n        this.loader = new _CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_4__.CachingGLTFLoader(_gltf_instance_ModelViewerGLTFInstance_js__WEBPACK_IMPORTED_MODULE_6__.ModelViewerGLTFInstance);\n        this.width = 0;\n        this.height = 0;\n        this.dpr = 1;\n        this.debugger = null;\n        this.scenes = new Set();\n        this.multipleScenesVisible = false;\n        this.lastTick = performance.now();\n        this.renderedLastFrame = false;\n        this.scaleStep = 0;\n        this.lastStep = DEFAULT_LAST_STEP;\n        this.avgFrameDuration = (HIGH_FRAME_DURATION_MS + LOW_FRAME_DURATION_MS) / 2;\n        this.onWebGLContextLost = (event) => {\n            this.dispatchEvent({ type: 'contextlost', sourceEvent: event });\n        };\n        this.onWebGLContextRestored = () => {\n            var _a;\n            (_a = this.textureUtils) === null || _a === void 0 ? void 0 : _a.dispose();\n            this.textureUtils = new _TextureUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.threeRenderer);\n            for (const scene of this.scenes) {\n                scene.element[_features_environment_js__WEBPACK_IMPORTED_MODULE_0__.$updateEnvironment]();\n            }\n        };\n        this.dpr = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.resolveDpr)();\n        this.canvas3D = document.createElement('canvas');\n        this.canvas3D.id = 'webgl-canvas';\n        this.canvas3D.classList.add('show');\n        try {\n            this.threeRenderer = new three__WEBPACK_IMPORTED_MODULE_8__.WebGLRenderer({\n                canvas: this.canvas3D,\n                alpha: true,\n                antialias: true,\n                powerPreference: options.powerPreference,\n                preserveDrawingBuffer: true\n            });\n            this.threeRenderer.autoClear = true;\n            this.threeRenderer.outputEncoding = three__WEBPACK_IMPORTED_MODULE_8__.sRGBEncoding;\n            this.threeRenderer.physicallyCorrectLights = true;\n            this.threeRenderer.setPixelRatio(1); // handle pixel ratio externally\n            this.debugger = !!options.debug ? new _Debugger_js__WEBPACK_IMPORTED_MODULE_5__.Debugger(this) : null;\n            this.threeRenderer.debug = { checkShaderErrors: !!this.debugger };\n            // ACESFilmicToneMapping appears to be the most \"saturated\",\n            // and similar to Filament's gltf-viewer.\n            this.threeRenderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_8__.ACESFilmicToneMapping;\n        }\n        catch (error) {\n            console.warn(error);\n        }\n        this.arRenderer = new _ARRenderer_js__WEBPACK_IMPORTED_MODULE_3__.ARRenderer(this);\n        this.textureUtils =\n            this.canRender ? new _TextureUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.threeRenderer) : null;\n        _CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_4__.CachingGLTFLoader.initializeKTX2Loader(this.threeRenderer);\n        this.canvas3D.addEventListener('webglcontextlost', this.onWebGLContextLost);\n        this.canvas3D.addEventListener('webglcontextrestored', this.onWebGLContextRestored);\n        this.updateRendererSize();\n    }\n    static get singleton() {\n        return this._singleton;\n    }\n    static resetSingleton() {\n        const elements = this._singleton.dispose();\n        for (const element of elements) {\n            element.disconnectedCallback();\n        }\n        this._singleton = new Renderer({\n            powerPreference: (self.ModelViewerElement || {})\n                .powerPreference ||\n                DEFAULT_POWER_PREFERENCE,\n            debug: (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.isDebugMode)()\n        });\n        for (const element of elements) {\n            element.connectedCallback();\n        }\n    }\n    get canRender() {\n        return this.threeRenderer != null;\n    }\n    get scaleFactor() {\n        return SCALE_STEPS[this.scaleStep];\n    }\n    set minScale(scale) {\n        let i = 1;\n        while (i < SCALE_STEPS.length) {\n            if (SCALE_STEPS[i] < scale) {\n                break;\n            }\n            ++i;\n        }\n        this.lastStep = i - 1;\n    }\n    registerScene(scene) {\n        this.scenes.add(scene);\n        scene.forceRescale();\n        const size = new three__WEBPACK_IMPORTED_MODULE_8__.Vector2();\n        this.threeRenderer.getSize(size);\n        scene.canvas.width = size.x;\n        scene.canvas.height = size.y;\n        if (this.canRender && this.scenes.size > 0) {\n            this.threeRenderer.setAnimationLoop((time, frame) => this.render(time, frame));\n        }\n        if (this.debugger != null) {\n            this.debugger.addScene(scene);\n        }\n    }\n    unregisterScene(scene) {\n        this.scenes.delete(scene);\n        if (this.canvas3D.parentElement === scene.canvas.parentElement) {\n            scene.canvas.parentElement.removeChild(this.canvas3D);\n        }\n        if (this.canRender && this.scenes.size === 0) {\n            this.threeRenderer.setAnimationLoop(null);\n        }\n        if (this.debugger != null) {\n            this.debugger.removeScene(scene);\n        }\n    }\n    displayCanvas(scene) {\n        return this.multipleScenesVisible ? scene.element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$canvas] : this.canvas3D;\n    }\n    /**\n     * The function enables an optimization, where when there is only a single\n     * <model-viewer> element, we can use the renderer's 3D canvas directly for\n     * display. Otherwise we need to use the element's 2D canvas and copy the\n     * renderer's result into it.\n     */\n    countVisibleScenes() {\n        const { canvas3D } = this;\n        let visibleScenes = 0;\n        let canvas3DScene = null;\n        for (const scene of this.scenes) {\n            const { element } = scene;\n            if (element.modelIsVisible && scene.externalRenderer == null) {\n                ++visibleScenes;\n            }\n            if (canvas3D.parentElement === scene.canvas.parentElement) {\n                canvas3DScene = scene;\n            }\n        }\n        const multipleScenesVisible = visibleScenes > 1;\n        if (canvas3DScene != null) {\n            const newlyMultiple = multipleScenesVisible && !this.multipleScenesVisible;\n            const disappearing = !canvas3DScene.element.modelIsVisible;\n            if (newlyMultiple || disappearing) {\n                const { width, height } = this.sceneSize(canvas3DScene);\n                this.copyPixels(canvas3DScene, width, height);\n                canvas3D.parentElement.removeChild(canvas3D);\n            }\n        }\n        this.multipleScenesVisible = multipleScenesVisible;\n    }\n    /**\n     * Updates the renderer's size based on the largest scene and any changes to\n     * device pixel ratio.\n     */\n    updateRendererSize() {\n        const dpr = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.resolveDpr)();\n        if (dpr !== this.dpr) {\n            // If the device pixel ratio has changed due to page zoom, elements\n            // specified by % width do not fire a resize event even though their CSS\n            // pixel dimensions change, so we force them to update their size here.\n            for (const scene of this.scenes) {\n                const { element } = scene;\n                element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$updateSize](element.getBoundingClientRect());\n            }\n        }\n        // Make the renderer the size of the largest scene\n        let width = 0;\n        let height = 0;\n        for (const scene of this.scenes) {\n            width = Math.max(width, scene.width);\n            height = Math.max(height, scene.height);\n        }\n        if (width === this.width && height === this.height && dpr === this.dpr) {\n            return;\n        }\n        this.width = width;\n        this.height = height;\n        this.dpr = dpr;\n        width = Math.ceil(width * dpr);\n        height = Math.ceil(height * dpr);\n        if (this.canRender) {\n            this.threeRenderer.setSize(width, height, false);\n        }\n        // Each scene's canvas must match the renderer size. In general they can be\n        // larger than the element that contains them, but the overflow is hidden\n        // and only the portion that is shown is copied over.\n        for (const scene of this.scenes) {\n            const { canvas } = scene;\n            canvas.width = width;\n            canvas.height = height;\n            scene.forceRescale();\n        }\n    }\n    updateRendererScale(delta) {\n        const scaleStep = this.scaleStep;\n        this.avgFrameDuration += (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(DURATION_DECAY * (delta - this.avgFrameDuration), -MAX_AVG_CHANGE_MS, MAX_AVG_CHANGE_MS);\n        if (this.avgFrameDuration > HIGH_FRAME_DURATION_MS) {\n            ++this.scaleStep;\n        }\n        else if (this.avgFrameDuration < LOW_FRAME_DURATION_MS && this.scaleStep > 0) {\n            --this.scaleStep;\n        }\n        this.scaleStep = Math.min(this.scaleStep, this.lastStep);\n        if (scaleStep !== this.scaleStep) {\n            this.avgFrameDuration =\n                (HIGH_FRAME_DURATION_MS + LOW_FRAME_DURATION_MS) / 2;\n        }\n    }\n    shouldRender(scene) {\n        if (!scene.shouldRender()) {\n            // The first frame we stop rendering the scene (because it stops moving),\n            // trigger one extra render at full scale.\n            if (scene.scaleStep != 0) {\n                scene.scaleStep = 0;\n                this.rescaleCanvas(scene);\n            }\n            else {\n                return false;\n            }\n        }\n        else if (scene.scaleStep != this.scaleStep) {\n            // Update render scale\n            scene.scaleStep = this.scaleStep;\n            this.rescaleCanvas(scene);\n        }\n        return true;\n    }\n    rescaleCanvas(scene) {\n        const scale = SCALE_STEPS[scene.scaleStep];\n        const width = Math.ceil(this.width / scale);\n        const height = Math.ceil(this.height / scale);\n        const { style } = scene.canvas;\n        style.width = `${width}px`;\n        style.height = `${height}px`;\n        this.canvas3D.style.width = `${width}px`;\n        this.canvas3D.style.height = `${height}px`;\n        const renderedDpr = this.dpr * scale;\n        const reason = scale < 1 ? 'GPU throttling' :\n            this.dpr !== window.devicePixelRatio ? 'No meta viewport tag' :\n                '';\n        scene.element.dispatchEvent(new CustomEvent('render-scale', {\n            detail: {\n                reportedDpr: window.devicePixelRatio,\n                renderedDpr: renderedDpr,\n                minimumDpr: this.dpr * SCALE_STEPS[this.lastStep],\n                pixelWidth: Math.ceil(scene.width * renderedDpr),\n                pixelHeight: Math.ceil(scene.height * renderedDpr),\n                reason: reason\n            }\n        }));\n    }\n    sceneSize(scene) {\n        const { dpr } = this;\n        const scaleFactor = SCALE_STEPS[scene.scaleStep];\n        // We avoid using the Three.js PixelRatio and handle it ourselves here so\n        // that we can do proper rounding and avoid white boundary pixels.\n        const width = Math.min(Math.ceil(scene.width * scaleFactor * dpr), this.canvas3D.width);\n        const height = Math.min(Math.ceil(scene.height * scaleFactor * dpr), this.canvas3D.height);\n        return { width, height };\n    }\n    copyPixels(scene, width, height) {\n        const context2D = scene.context;\n        if (context2D == null) {\n            console.log('could not acquire 2d context');\n            return;\n        }\n        context2D.clearRect(0, 0, width, height);\n        context2D.drawImage(this.canvas3D, 0, 0, width, height, 0, 0, width, height);\n        scene.canvas.classList.add('show');\n    }\n    /**\n     * Returns an array version of this.scenes where the non-visible ones are\n     * first. This allows eager scenes to be rendered before they are visible,\n     * without needing the multi-canvas render path.\n     */\n    orderedScenes() {\n        const scenes = [];\n        for (const visible of [false, true]) {\n            for (const scene of this.scenes) {\n                if (scene.element.modelIsVisible === visible) {\n                    scenes.push(scene);\n                }\n            }\n        }\n        return scenes;\n    }\n    get isPresenting() {\n        return this.arRenderer.isPresenting;\n    }\n    /**\n     * This method takes care of updating the element and renderer state based on\n     * the time that has passed since the last rendered frame.\n     */\n    preRender(scene, t, delta) {\n        const { element, exposure } = scene;\n        element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$tick](t, delta);\n        const exposureIsNumber = typeof exposure === 'number' && !Number.isNaN(exposure);\n        this.threeRenderer.toneMappingExposure = exposureIsNumber ? exposure : 1.0;\n    }\n    render(t, frame) {\n        if (frame != null) {\n            this.arRenderer.onWebXRFrame(t, frame);\n            return;\n        }\n        const delta = t - this.lastTick;\n        this.lastTick = t;\n        if (!this.canRender || this.isPresenting) {\n            return;\n        }\n        this.countVisibleScenes();\n        this.updateRendererSize();\n        if (this.renderedLastFrame) {\n            this.updateRendererScale(delta);\n            this.renderedLastFrame = false;\n        }\n        const { canvas3D } = this;\n        for (const scene of this.orderedScenes()) {\n            const { element } = scene;\n            if (!element.loaded ||\n                (!element.modelIsVisible && scene.renderCount > 0)) {\n                continue;\n            }\n            this.preRender(scene, t, delta);\n            if (!this.shouldRender(scene)) {\n                continue;\n            }\n            if (scene.externalRenderer != null) {\n                const camera = scene.getCamera();\n                camera.updateMatrix();\n                const { matrix, projectionMatrix } = camera;\n                const viewMatrix = matrix.elements.slice();\n                const target = scene.getTarget();\n                viewMatrix[12] += target.x;\n                viewMatrix[13] += target.y;\n                viewMatrix[14] += target.z;\n                scene.externalRenderer.render({\n                    viewMatrix: viewMatrix,\n                    projectionMatrix: projectionMatrix.elements\n                });\n                continue;\n            }\n            if (!element.modelIsVisible && !this.multipleScenesVisible) {\n                // Here we are pre-rendering on the visible canvas, so we must mark the\n                // visible scene dirty to ensure it overwrites us.\n                for (const visibleScene of this.scenes) {\n                    if (visibleScene.element.modelIsVisible) {\n                        visibleScene.queueRender();\n                    }\n                }\n            }\n            const { width, height } = this.sceneSize(scene);\n            scene.renderShadow(this.threeRenderer);\n            // Need to set the render target in order to prevent\n            // clearing the depth from a different buffer\n            this.threeRenderer.setRenderTarget(null);\n            this.threeRenderer.setViewport(0, Math.ceil(this.height * this.dpr) - height, width, height);\n            this.threeRenderer.render(scene, scene.camera);\n            if (this.multipleScenesVisible || scene.renderCount === 0) {\n                this.copyPixels(scene, width, height);\n            }\n            else {\n                if (canvas3D.parentElement !== scene.canvas.parentElement) {\n                    scene.canvas.parentElement.appendChild(canvas3D);\n                    scene.canvas.classList.remove('show');\n                }\n            }\n            scene.hasRendered();\n            ++scene.renderCount;\n            this.renderedLastFrame = true;\n        }\n    }\n    dispose() {\n        if (this.textureUtils != null) {\n            this.textureUtils.dispose();\n        }\n        if (this.threeRenderer != null) {\n            this.threeRenderer.dispose();\n        }\n        this.textureUtils = null;\n        this.threeRenderer = null;\n        const elements = [];\n        for (const scene of this.scenes) {\n            elements.push(scene.element);\n        }\n        this.canvas3D.removeEventListener('webglcontextlost', this.onWebGLContextLost);\n        this.canvas3D.removeEventListener('webglcontextrestored', this.onWebGLContextRestored);\n        return elements;\n    }\n}\nRenderer._singleton = new Renderer({\n    powerPreference: (self.ModelViewerElement || {})\n        .powerPreference ||\n        DEFAULT_POWER_PREFERENCE,\n    debug: (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.isDebugMode)()\n});\n//# sourceMappingURL=Renderer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Shadow.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Shadow.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Shadow: () => (/* binding */ Shadow)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_shaders_HorizontalBlurShader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/examples/jsm/shaders/HorizontalBlurShader.js */ \"(ssr)/./node_modules/three/examples/jsm/shaders/HorizontalBlurShader.js\");\n/* harmony import */ var three_examples_jsm_shaders_VerticalBlurShader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/shaders/VerticalBlurShader.js */ \"(ssr)/./node_modules/three/examples/jsm/shaders/VerticalBlurShader.js\");\n/* harmony import */ var three_src_math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/src/math/MathUtils.js */ \"(ssr)/./node_modules/three/src/math/MathUtils.js\");\n/* @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n// The softness [0, 1] of the shadow is mapped to a resolution between\n// 2^LOG_MAX_RESOLUTION and 2^LOG_MIN_RESOLUTION.\nconst LOG_MAX_RESOLUTION = 9;\nconst LOG_MIN_RESOLUTION = 6;\n// Animated models are not in general contained in their bounding box, as this\n// is calculated only for their resting pose. We create a cubic shadow volume\n// for animated models sized to their largest bounding box dimension multiplied\n// by this scale factor.\nconst ANIMATION_SCALING = 2;\n// Since hard shadows are not lightened by blurring and depth, set a lower\n// default intensity to make them more perceptually similar to the intensity of\n// the soft shadows.\nconst DEFAULT_HARD_INTENSITY = 0.3;\n/**\n * The Shadow class creates a shadow that fits a given scene and follows a\n * target. This shadow will follow the scene without any updates needed so long\n * as the shadow and scene are both parented to the same object (call it the\n * scene) and this scene is passed as the target parameter to the shadow's\n * constructor. We also must constrain the scene to motion within the horizontal\n * plane and call the setRotation() method whenever the scene's Y-axis rotation\n * changes. For motion outside of the horizontal plane, this.needsUpdate must be\n * set to true.\n *\n * The softness of the shadow is controlled by changing its resolution, making\n * softer shadows faster, but less precise.\n */\nclass Shadow extends three__WEBPACK_IMPORTED_MODULE_0__.Object3D {\n    constructor(scene, softness, side) {\n        super();\n        this.camera = new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera();\n        // private cameraHelper = new CameraHelper(this.camera);\n        this.renderTarget = null;\n        this.renderTargetBlur = null;\n        this.depthMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshDepthMaterial();\n        this.horizontalBlurMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(three_examples_jsm_shaders_HorizontalBlurShader_js__WEBPACK_IMPORTED_MODULE_1__.HorizontalBlurShader);\n        this.verticalBlurMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(three_examples_jsm_shaders_VerticalBlurShader_js__WEBPACK_IMPORTED_MODULE_2__.VerticalBlurShader);\n        this.intensity = 0;\n        this.softness = 1;\n        this.boundingBox = new three__WEBPACK_IMPORTED_MODULE_0__.Box3;\n        this.size = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3;\n        this.maxDimension = 0;\n        this.isAnimated = false;\n        this.needsUpdate = false;\n        const { camera } = this;\n        camera.rotation.x = Math.PI / 2;\n        camera.left = -0.5;\n        camera.right = 0.5;\n        camera.bottom = -0.5;\n        camera.top = 0.5;\n        this.add(camera);\n        // this.add(this.cameraHelper);\n        // this.cameraHelper.updateMatrixWorld = function() {\n        //   this.matrixWorld = this.camera.matrixWorld;\n        // };\n        const plane = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry();\n        const shadowMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n            // color: new Color(1, 0, 0),\n            opacity: 1,\n            transparent: true,\n            side: three__WEBPACK_IMPORTED_MODULE_0__.BackSide,\n        });\n        this.floor = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(plane, shadowMaterial);\n        this.floor.userData.shadow = true;\n        camera.add(this.floor);\n        // the plane onto which to blur the texture\n        this.blurPlane = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(plane);\n        this.blurPlane.visible = false;\n        camera.add(this.blurPlane);\n        scene.target.add(this);\n        // like MeshDepthMaterial, but goes from black to transparent\n        this.depthMaterial.onBeforeCompile = function (shader) {\n            shader.fragmentShader = shader.fragmentShader.replace('gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'gl_FragColor = vec4( vec3( 0.0 ), ( 1.0 - fragCoordZ ) * opacity );');\n        };\n        this.horizontalBlurMaterial.depthTest = false;\n        this.verticalBlurMaterial.depthTest = false;\n        this.setScene(scene, softness, side);\n    }\n    /**\n     * Update the shadow's size and position for a new scene. Softness is also\n     * needed, as this controls the shadow's resolution.\n     */\n    setScene(scene, softness, side) {\n        const { boundingBox, size, rotation, position } = this;\n        this.isAnimated = scene.animationNames.length > 0;\n        this.boundingBox.copy(scene.boundingBox);\n        this.size.copy(scene.size);\n        this.maxDimension = Math.max(size.x, size.y, size.z) *\n            (this.isAnimated ? ANIMATION_SCALING : 1);\n        this.boundingBox.getCenter(position);\n        if (side === 'back') {\n            const { min, max } = boundingBox;\n            [min.y, min.z] = [min.z, min.y];\n            [max.y, max.z] = [max.z, max.y];\n            [size.y, size.z] = [size.z, size.y];\n            rotation.x = Math.PI / 2;\n            rotation.y = Math.PI;\n        }\n        else {\n            rotation.x = 0;\n            rotation.y = 0;\n        }\n        if (this.isAnimated) {\n            const minY = boundingBox.min.y;\n            const maxY = boundingBox.max.y;\n            size.y = this.maxDimension;\n            boundingBox.expandByVector(size.subScalar(this.maxDimension).multiplyScalar(-0.5));\n            boundingBox.min.y = minY;\n            boundingBox.max.y = maxY;\n            size.set(this.maxDimension, maxY - minY, this.maxDimension);\n        }\n        if (side === 'bottom') {\n            position.y = boundingBox.min.y;\n        }\n        else {\n            position.z = boundingBox.min.y;\n        }\n        this.setSoftness(softness);\n    }\n    /**\n     * Update the shadow's resolution based on softness (between 0 and 1). Should\n     * not be called frequently, as this results in reallocation.\n     */\n    setSoftness(softness) {\n        this.softness = softness;\n        const { size, camera } = this;\n        const scaleY = (this.isAnimated ? ANIMATION_SCALING : 1);\n        const resolution = scaleY *\n            Math.pow(2, LOG_MAX_RESOLUTION -\n                softness * (LOG_MAX_RESOLUTION - LOG_MIN_RESOLUTION));\n        this.setMapSize(resolution);\n        const softFar = size.y / 2;\n        const hardFar = size.y * scaleY;\n        camera.near = 0;\n        camera.far = (0,three_src_math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.lerp)(hardFar, softFar, softness);\n        // we have co-opted opacity to scale the depth to clip\n        this.depthMaterial.opacity = 1.0 / softness;\n        camera.updateProjectionMatrix();\n        // this.cameraHelper.update();\n        this.setIntensity(this.intensity);\n        this.setOffset(0);\n    }\n    /**\n     * Lower-level version of the above function.\n     */\n    setMapSize(maxMapSize) {\n        const { size } = this;\n        if (this.isAnimated) {\n            maxMapSize *= ANIMATION_SCALING;\n        }\n        const baseWidth = Math.floor(size.x > size.z ? maxMapSize : maxMapSize * size.x / size.z);\n        const baseHeight = Math.floor(size.x > size.z ? maxMapSize * size.z / size.x : maxMapSize);\n        // width of blur filter in pixels (not adjustable)\n        const TAP_WIDTH = 10;\n        const width = TAP_WIDTH + baseWidth;\n        const height = TAP_WIDTH + baseHeight;\n        if (this.renderTarget != null &&\n            (this.renderTarget.width !== width ||\n                this.renderTarget.height !== height)) {\n            this.renderTarget.dispose();\n            this.renderTarget = null;\n            this.renderTargetBlur.dispose();\n            this.renderTargetBlur = null;\n        }\n        if (this.renderTarget == null) {\n            const params = { format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat };\n            this.renderTarget = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(width, height, params);\n            this.renderTargetBlur = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(width, height, params);\n            this.floor.material.map =\n                this.renderTarget.texture;\n        }\n        // These pads account for the softening radius around the shadow.\n        this.camera.scale.set(size.x * (1 + TAP_WIDTH / baseWidth), size.z * (1 + TAP_WIDTH / baseHeight), 1);\n        this.needsUpdate = true;\n    }\n    /**\n     * Set the shadow's intensity (0 to 1), which is just its opacity. Turns off\n     * shadow rendering if zero.\n     */\n    setIntensity(intensity) {\n        this.intensity = intensity;\n        if (intensity > 0) {\n            this.visible = true;\n            this.floor.visible = true;\n            this.floor.material.opacity = intensity *\n                (0,three_src_math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.lerp)(DEFAULT_HARD_INTENSITY, 1, this.softness * this.softness);\n        }\n        else {\n            this.visible = false;\n            this.floor.visible = false;\n        }\n    }\n    getIntensity() {\n        return this.intensity;\n    }\n    /**\n     * An offset can be specified to move the\n     * shadow vertically relative to the bottom of the scene. Positive is up, so\n     * values are generally negative. A small offset keeps our shadow from\n     * z-fighting with any baked-in shadow plane.\n     */\n    setOffset(offset) {\n        this.floor.position.z = -offset + 0.001 * this.maxDimension;\n    }\n    render(renderer, scene) {\n        // this.cameraHelper.visible = false;\n        // force the depthMaterial to everything\n        scene.overrideMaterial = this.depthMaterial;\n        // set renderer clear alpha\n        const initialClearAlpha = renderer.getClearAlpha();\n        renderer.setClearAlpha(0);\n        this.floor.visible = false;\n        // disable XR for offscreen rendering\n        const xrEnabled = renderer.xr.enabled;\n        renderer.xr.enabled = false;\n        // render to the render target to get the depths\n        const oldRenderTarget = renderer.getRenderTarget();\n        renderer.setRenderTarget(this.renderTarget);\n        renderer.render(scene, this.camera);\n        // and reset the override material\n        scene.overrideMaterial = null;\n        this.floor.visible = true;\n        this.blurShadow(renderer);\n        // reset and render the normal scene\n        renderer.xr.enabled = xrEnabled;\n        renderer.setRenderTarget(oldRenderTarget);\n        renderer.setClearAlpha(initialClearAlpha);\n        // this.cameraHelper.visible = true;\n    }\n    blurShadow(renderer) {\n        const { camera, horizontalBlurMaterial, verticalBlurMaterial, renderTarget, renderTargetBlur, blurPlane } = this;\n        blurPlane.visible = true;\n        // blur horizontally and draw in the renderTargetBlur\n        blurPlane.material = horizontalBlurMaterial;\n        horizontalBlurMaterial.uniforms.h.value = 1 / this.renderTarget.width;\n        horizontalBlurMaterial.uniforms.tDiffuse.value = this.renderTarget.texture;\n        renderer.setRenderTarget(renderTargetBlur);\n        renderer.render(blurPlane, camera);\n        // blur vertically and draw in the main renderTarget\n        blurPlane.material = verticalBlurMaterial;\n        verticalBlurMaterial.uniforms.v.value = 1 / this.renderTarget.height;\n        verticalBlurMaterial.uniforms.tDiffuse.value =\n            this.renderTargetBlur.texture;\n        renderer.setRenderTarget(renderTarget);\n        renderer.render(blurPlane, camera);\n        blurPlane.visible = false;\n    }\n    dispose() {\n        if (this.renderTarget != null) {\n            this.renderTarget.dispose();\n        }\n        if (this.renderTargetBlur != null) {\n            this.renderTargetBlur.dispose();\n        }\n        this.depthMaterial.dispose();\n        this.horizontalBlurMaterial.dispose();\n        this.verticalBlurMaterial.dispose();\n        this.floor.material.dispose();\n        this.floor.geometry.dispose();\n        this.blurPlane.geometry.dispose();\n        this.removeFromParent();\n    }\n}\n//# sourceMappingURL=Shadow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Shadow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/SmoothControls.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/SmoothControls.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChangeSource: () => (/* binding */ ChangeSource),\n/* harmony export */   DEFAULT_OPTIONS: () => (/* binding */ DEFAULT_OPTIONS),\n/* harmony export */   KeyCode: () => (/* binding */ KeyCode),\n/* harmony export */   SmoothControls: () => (/* binding */ SmoothControls)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _features_controls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/controls.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/controls.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _Damper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* @license\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst PAN_SENSITIVITY = 0.018;\nconst TAP_DISTANCE = 2;\nconst TAP_MS = 300;\nconst vector2 = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2();\nconst vector3 = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\nconst DEFAULT_OPTIONS = Object.freeze({\n    minimumRadius: 0,\n    maximumRadius: Infinity,\n    minimumPolarAngle: Math.PI / 8,\n    maximumPolarAngle: Math.PI - Math.PI / 8,\n    minimumAzimuthalAngle: -Infinity,\n    maximumAzimuthalAngle: Infinity,\n    minimumFieldOfView: 10,\n    maximumFieldOfView: 45,\n    touchAction: 'none'\n});\n// Constants\nconst KEYBOARD_ORBIT_INCREMENT = Math.PI / 8;\nconst ZOOM_SENSITIVITY = 0.04;\n// The move size on pan key event\nconst PAN_KEY_INCREMENT = 10;\nconst KeyCode = {\n    PAGE_UP: 33,\n    PAGE_DOWN: 34,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40\n};\nconst ChangeSource = {\n    USER_INTERACTION: 'user-interaction',\n    NONE: 'none',\n    AUTOMATIC: 'automatic'\n};\n/**\n * SmoothControls is a Three.js helper for adding delightful pointer and\n * keyboard-based input to a staged Three.js scene. Its API is very similar to\n * OrbitControls, but it offers more opinionated (subjectively more delightful)\n * defaults, easy extensibility and subjectively better out-of-the-box keyboard\n * support.\n *\n * One important change compared to OrbitControls is that the `update` method\n * of SmoothControls must be invoked on every frame, otherwise the controls\n * will not have an effect.\n *\n * Another notable difference compared to OrbitControls is that SmoothControls\n * does not currently support panning (but probably will in a future revision).\n *\n * Like OrbitControls, SmoothControls assumes that the orientation of the camera\n * has been set in terms of position, rotation and scale, so it is important to\n * ensure that the camera's matrixWorld is in sync before using SmoothControls.\n */\nclass SmoothControls extends three__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher {\n    constructor(camera, element, scene) {\n        super();\n        this.camera = camera;\n        this.element = element;\n        this.scene = scene;\n        this.orbitSensitivity = 1;\n        this.inputSensitivity = 1;\n        this.changeSource = ChangeSource.NONE;\n        this._interactionEnabled = false;\n        this._disableZoom = false;\n        this.isUserPointing = false;\n        // Pan state\n        this.enablePan = true;\n        this.enableTap = true;\n        this.panProjection = new three__WEBPACK_IMPORTED_MODULE_3__.Matrix3();\n        this.panPerPixel = 0;\n        // Internal orbital position state\n        this.spherical = new three__WEBPACK_IMPORTED_MODULE_3__.Spherical();\n        this.goalSpherical = new three__WEBPACK_IMPORTED_MODULE_3__.Spherical();\n        this.thetaDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_2__.Damper();\n        this.phiDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_2__.Damper();\n        this.radiusDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_2__.Damper();\n        this.logFov = Math.log(DEFAULT_OPTIONS.maximumFieldOfView);\n        this.goalLogFov = this.logFov;\n        this.fovDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_2__.Damper();\n        // Pointer state\n        this.touchMode = null;\n        this.pointers = [];\n        this.startTime = 0;\n        this.startPointerPosition = { clientX: 0, clientY: 0 };\n        this.lastSeparation = 0;\n        this.touchDecided = false;\n        this.onContext = (event) => {\n            if (this.enablePan) {\n                event.preventDefault();\n            }\n            else {\n                for (const pointer of this.pointers) {\n                    // Required because of a common browser bug where the context menu never\n                    // fires a pointercancel event.\n                    this.onPointerUp(new PointerEvent('pointercancel', Object.assign(Object.assign({}, this.startPointerPosition), { pointerId: pointer.id })));\n                }\n            }\n        };\n        this.touchModeZoom = (dx, dy) => {\n            if (!this._disableZoom) {\n                const touchDistance = this.twoTouchDistance(this.pointers[0], this.pointers[1]);\n                const deltaZoom = ZOOM_SENSITIVITY *\n                    (this.lastSeparation - touchDistance) * 50 / this.scene.height;\n                this.lastSeparation = touchDistance;\n                this.userAdjustOrbit(0, 0, deltaZoom);\n            }\n            if (this.panPerPixel > 0) {\n                this.movePan(dx, dy);\n            }\n        };\n        // We implement our own version of the browser's CSS touch-action, enforced by\n        // this function, because the iOS implementation of pan-y is bad and doesn't\n        // match Android. Specifically, even if a touch gesture begins by panning X,\n        // iOS will switch to scrolling as soon as the gesture moves in the Y, rather\n        // than staying in the same mode until the end of the gesture.\n        this.disableScroll = (event) => {\n            event.preventDefault();\n        };\n        this.touchModeRotate = (dx, dy) => {\n            const { touchAction } = this._options;\n            if (!this.touchDecided && touchAction !== 'none') {\n                this.touchDecided = true;\n                const dxMag = Math.abs(dx);\n                const dyMag = Math.abs(dy);\n                // If motion is mostly vertical, assume scrolling is the intent.\n                if (this.changeSource === ChangeSource.USER_INTERACTION &&\n                    ((touchAction === 'pan-y' && dyMag > dxMag) ||\n                        (touchAction === 'pan-x' && dxMag > dyMag))) {\n                    this.touchMode = null;\n                    return;\n                }\n                else {\n                    this.element.addEventListener('touchmove', this.disableScroll, { passive: false });\n                }\n            }\n            this.handleSinglePointerMove(dx, dy);\n        };\n        this.onPointerDown = (event) => {\n            if (this.pointers.length > 2) {\n                return;\n            }\n            const { element } = this;\n            if (this.pointers.length === 0) {\n                element.addEventListener('pointermove', this.onPointerMove);\n                element.addEventListener('pointerup', this.onPointerUp);\n                this.touchMode = null;\n                this.touchDecided = false;\n                this.startPointerPosition.clientX = event.clientX;\n                this.startPointerPosition.clientY = event.clientY;\n                this.startTime = performance.now();\n            }\n            try {\n                element.setPointerCapture(event.pointerId);\n            }\n            catch (_a) {\n            }\n            this.pointers.push({ clientX: event.clientX, clientY: event.clientY, id: event.pointerId });\n            this.isUserPointing = false;\n            if (event.pointerType === 'touch') {\n                this.changeSource = event.altKey ? // set by interact() in controls.ts\n                    ChangeSource.AUTOMATIC :\n                    ChangeSource.USER_INTERACTION;\n                this.onTouchChange(event);\n            }\n            else {\n                this.changeSource = ChangeSource.USER_INTERACTION;\n                this.onMouseDown(event);\n            }\n        };\n        this.onPointerMove = (event) => {\n            const pointer = this.pointers.find((pointer) => pointer.id === event.pointerId);\n            if (pointer == null) {\n                return;\n            }\n            const numTouches = this.pointers.length;\n            const dx = (event.clientX - pointer.clientX) / numTouches;\n            const dy = (event.clientY - pointer.clientY) / numTouches;\n            if (dx === 0 && dy === 0) {\n                return;\n            }\n            pointer.clientX = event.clientX;\n            pointer.clientY = event.clientY;\n            if (event.pointerType === 'touch') {\n                this.changeSource = event.altKey ? // set by interact() in controls.ts\n                    ChangeSource.AUTOMATIC :\n                    ChangeSource.USER_INTERACTION;\n                if (this.touchMode !== null) {\n                    this.touchMode(dx, dy);\n                }\n            }\n            else {\n                this.changeSource = ChangeSource.USER_INTERACTION;\n                if (this.panPerPixel > 0) {\n                    this.movePan(dx, dy);\n                }\n                else {\n                    this.handleSinglePointerMove(dx, dy);\n                }\n            }\n        };\n        this.onPointerUp = (event) => {\n            const { element } = this;\n            const index = this.pointers.findIndex((pointer) => pointer.id === event.pointerId);\n            if (index !== -1) {\n                this.pointers.splice(index, 1);\n            }\n            // altKey indicates an interaction prompt; don't reset radius in this case\n            // as it will cause the camera to drift.\n            if (this.panPerPixel > 0 && !event.altKey) {\n                this.resetRadius();\n            }\n            if (this.pointers.length === 0) {\n                element.removeEventListener('pointermove', this.onPointerMove);\n                element.removeEventListener('pointerup', this.onPointerUp);\n                element.removeEventListener('touchmove', this.disableScroll);\n                if (this.enablePan && this.enableTap) {\n                    this.recenter(event);\n                }\n            }\n            else if (this.touchMode !== null) {\n                this.onTouchChange(event);\n            }\n            this.scene.element[_features_controls_js__WEBPACK_IMPORTED_MODULE_0__.$panElement].style.opacity = 0;\n            element.style.cursor = 'grab';\n            this.panPerPixel = 0;\n            if (this.isUserPointing) {\n                this.dispatchEvent({ type: 'pointer-change-end' });\n            }\n        };\n        this.onWheel = (event) => {\n            this.changeSource = ChangeSource.USER_INTERACTION;\n            const deltaZoom = event.deltaY *\n                (event.deltaMode == 1 ? 18 : 1) * ZOOM_SENSITIVITY / 30;\n            this.userAdjustOrbit(0, 0, deltaZoom);\n            event.preventDefault();\n        };\n        this.onKeyDown = (event) => {\n            // We track if the key is actually one we respond to, so as not to\n            // accidentally clobber unrelated key inputs when the <model-viewer> has\n            // focus.\n            const { changeSource } = this;\n            this.changeSource = ChangeSource.USER_INTERACTION;\n            const relevantKey = (event.shiftKey && this.enablePan) ?\n                this.panKeyCodeHandler(event) :\n                this.orbitZoomKeyCodeHandler(event);\n            if (relevantKey) {\n                event.preventDefault();\n            }\n            else {\n                this.changeSource = changeSource;\n            }\n        };\n        this._options = Object.assign({}, DEFAULT_OPTIONS);\n        this.setOrbit(0, Math.PI / 2, 1);\n        this.setFieldOfView(100);\n        this.jumpToGoal();\n    }\n    get interactionEnabled() {\n        return this._interactionEnabled;\n    }\n    enableInteraction() {\n        if (this._interactionEnabled === false) {\n            const { element } = this;\n            element.addEventListener('pointerdown', this.onPointerDown);\n            element.addEventListener('pointercancel', this.onPointerUp);\n            if (!this._disableZoom) {\n                element.addEventListener('wheel', this.onWheel);\n            }\n            element.addEventListener('keydown', this.onKeyDown);\n            // This little beauty is to work around a WebKit bug that otherwise makes\n            // touch events randomly not cancelable.\n            element.addEventListener('touchmove', () => { }, { passive: false });\n            element.addEventListener('contextmenu', this.onContext);\n            this.element.style.cursor = 'grab';\n            this._interactionEnabled = true;\n            this.updateTouchActionStyle();\n        }\n    }\n    disableInteraction() {\n        if (this._interactionEnabled === true) {\n            const { element } = this;\n            element.removeEventListener('pointerdown', this.onPointerDown);\n            element.removeEventListener('pointermove', this.onPointerMove);\n            element.removeEventListener('pointerup', this.onPointerUp);\n            element.removeEventListener('pointercancel', this.onPointerUp);\n            element.removeEventListener('wheel', this.onWheel);\n            element.removeEventListener('keydown', this.onKeyDown);\n            element.removeEventListener('contextmenu', this.onContext);\n            element.style.cursor = '';\n            this.touchMode = null;\n            this._interactionEnabled = false;\n            this.updateTouchActionStyle();\n        }\n    }\n    /**\n     * The options that are currently configured for the controls instance.\n     */\n    get options() {\n        return this._options;\n    }\n    set disableZoom(disable) {\n        if (this._disableZoom != disable) {\n            this._disableZoom = disable;\n            if (disable === true) {\n                this.element.removeEventListener('wheel', this.onWheel);\n            }\n            else {\n                this.element.addEventListener('wheel', this.onWheel);\n            }\n            this.updateTouchActionStyle();\n        }\n    }\n    /**\n     * Copy the spherical values that represent the current camera orbital\n     * position relative to the configured target into a provided Spherical\n     * instance. If no Spherical is provided, a new Spherical will be allocated\n     * to copy the values into. The Spherical that values are copied into is\n     * returned.\n     */\n    getCameraSpherical(target = new three__WEBPACK_IMPORTED_MODULE_3__.Spherical()) {\n        return target.copy(this.spherical);\n    }\n    /**\n     * Returns the camera's current vertical field of view in degrees.\n     */\n    getFieldOfView() {\n        return this.camera.fov;\n    }\n    /**\n     * Configure the _options of the controls. Configured _options will be\n     * merged with whatever _options have already been configured for this\n     * controls instance.\n     */\n    applyOptions(_options) {\n        Object.assign(this._options, _options);\n        // Re-evaluates clamping based on potentially new values for min/max\n        // polar, azimuth and radius:\n        this.setOrbit();\n        this.setFieldOfView(Math.exp(this.goalLogFov));\n    }\n    /**\n     * Sets the near and far planes of the camera.\n     */\n    updateNearFar(nearPlane, farPlane) {\n        this.camera.near = Math.max(nearPlane, farPlane / 1000);\n        this.camera.far = farPlane;\n        this.camera.updateProjectionMatrix();\n    }\n    /**\n     * Sets the aspect ratio of the camera\n     */\n    updateAspect(aspect) {\n        this.camera.aspect = aspect;\n        this.camera.updateProjectionMatrix();\n    }\n    /**\n     * Set the absolute orbital goal of the camera. The change will be\n     * applied over a number of frames depending on configured acceleration and\n     * dampening _options.\n     *\n     * Returns true if invoking the method will result in the camera changing\n     * position and/or rotation, otherwise false.\n     */\n    setOrbit(goalTheta = this.goalSpherical.theta, goalPhi = this.goalSpherical.phi, goalRadius = this.goalSpherical.radius) {\n        const { minimumAzimuthalAngle, maximumAzimuthalAngle, minimumPolarAngle, maximumPolarAngle, minimumRadius, maximumRadius } = this._options;\n        const { theta, phi, radius } = this.goalSpherical;\n        const nextTheta = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(goalTheta, minimumAzimuthalAngle, maximumAzimuthalAngle);\n        if (!isFinite(minimumAzimuthalAngle) &&\n            !isFinite(maximumAzimuthalAngle)) {\n            this.spherical.theta =\n                this.wrapAngle(this.spherical.theta - nextTheta) + nextTheta;\n        }\n        const nextPhi = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(goalPhi, minimumPolarAngle, maximumPolarAngle);\n        const nextRadius = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(goalRadius, minimumRadius, maximumRadius);\n        if (nextTheta === theta && nextPhi === phi && nextRadius === radius) {\n            return false;\n        }\n        this.goalSpherical.theta = nextTheta;\n        this.goalSpherical.phi = nextPhi;\n        this.goalSpherical.radius = nextRadius;\n        this.goalSpherical.makeSafe();\n        return true;\n    }\n    /**\n     * Subset of setOrbit() above, which only sets the camera's radius.\n     */\n    setRadius(radius) {\n        this.goalSpherical.radius = radius;\n        this.setOrbit();\n    }\n    /**\n     * Sets the goal field of view for the camera\n     */\n    setFieldOfView(fov) {\n        const { minimumFieldOfView, maximumFieldOfView } = this._options;\n        fov = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(fov, minimumFieldOfView, maximumFieldOfView);\n        this.goalLogFov = Math.log(fov);\n    }\n    /**\n     * Sets the smoothing decay time.\n     */\n    setDamperDecayTime(decayMilliseconds) {\n        this.thetaDamper.setDecayTime(decayMilliseconds);\n        this.phiDamper.setDecayTime(decayMilliseconds);\n        this.radiusDamper.setDecayTime(decayMilliseconds);\n        this.fovDamper.setDecayTime(decayMilliseconds);\n    }\n    /**\n     * Adjust the orbital position of the camera relative to its current orbital\n     * position. Does not let the theta goal get more than pi ahead of the current\n     * theta, which ensures interpolation continues in the direction of the delta.\n     * The deltaZoom parameter adjusts both the field of view and the orbit radius\n     * such that they progress across their allowed ranges in sync.\n     */\n    adjustOrbit(deltaTheta, deltaPhi, deltaZoom) {\n        const { theta, phi, radius } = this.goalSpherical;\n        const { minimumRadius, maximumRadius, minimumFieldOfView, maximumFieldOfView } = this._options;\n        const dTheta = this.spherical.theta - theta;\n        const dThetaLimit = Math.PI - 0.001;\n        const goalTheta = theta - (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(deltaTheta, -dThetaLimit - dTheta, dThetaLimit - dTheta);\n        const goalPhi = phi - deltaPhi;\n        const deltaRatio = deltaZoom === 0 ?\n            0 :\n            ((deltaZoom > 0 ? maximumRadius : minimumRadius) - radius) /\n                (Math.log(deltaZoom > 0 ? maximumFieldOfView : minimumFieldOfView) -\n                    this.goalLogFov);\n        const goalRadius = radius +\n            deltaZoom *\n                (isFinite(deltaRatio) ? deltaRatio :\n                    (maximumRadius - minimumRadius) * 2);\n        this.setOrbit(goalTheta, goalPhi, goalRadius);\n        if (deltaZoom !== 0) {\n            const goalLogFov = this.goalLogFov + deltaZoom;\n            this.setFieldOfView(Math.exp(goalLogFov));\n        }\n    }\n    /**\n     * Move the camera instantly instead of accelerating toward the goal\n     * parameters.\n     */\n    jumpToGoal() {\n        this.update(0, _Damper_js__WEBPACK_IMPORTED_MODULE_2__.SETTLING_TIME);\n    }\n    /**\n     * Update controls. In most cases, this will result in the camera\n     * interpolating its position and rotation until it lines up with the\n     * designated goal orbital position.\n     *\n     * Time and delta are measured in milliseconds.\n     */\n    update(_time, delta) {\n        if (this.isStationary()) {\n            return;\n        }\n        const { maximumPolarAngle, maximumRadius } = this._options;\n        const dTheta = this.spherical.theta - this.goalSpherical.theta;\n        if (Math.abs(dTheta) > Math.PI &&\n            !isFinite(this._options.minimumAzimuthalAngle) &&\n            !isFinite(this._options.maximumAzimuthalAngle)) {\n            this.spherical.theta -= Math.sign(dTheta) * 2 * Math.PI;\n        }\n        this.spherical.theta = this.thetaDamper.update(this.spherical.theta, this.goalSpherical.theta, delta, Math.PI);\n        this.spherical.phi = this.phiDamper.update(this.spherical.phi, this.goalSpherical.phi, delta, maximumPolarAngle);\n        this.spherical.radius = this.radiusDamper.update(this.spherical.radius, this.goalSpherical.radius, delta, maximumRadius);\n        this.logFov = this.fovDamper.update(this.logFov, this.goalLogFov, delta, 1);\n        this.moveCamera();\n    }\n    updateTouchActionStyle() {\n        const { style } = this.element;\n        if (this._interactionEnabled) {\n            const { touchAction } = this._options;\n            if (this._disableZoom && touchAction !== 'none') {\n                style.touchAction = 'manipulation';\n            }\n            else {\n                style.touchAction = touchAction;\n            }\n        }\n        else {\n            style.touchAction = '';\n        }\n    }\n    isStationary() {\n        return this.goalSpherical.theta === this.spherical.theta &&\n            this.goalSpherical.phi === this.spherical.phi &&\n            this.goalSpherical.radius === this.spherical.radius &&\n            this.goalLogFov === this.logFov;\n    }\n    dispatchChange() {\n        this.dispatchEvent({ type: 'change', source: this.changeSource });\n    }\n    moveCamera() {\n        // Derive the new camera position from the updated spherical:\n        this.spherical.makeSafe();\n        this.camera.position.setFromSpherical(this.spherical);\n        this.camera.setRotationFromEuler(new three__WEBPACK_IMPORTED_MODULE_3__.Euler(this.spherical.phi - Math.PI / 2, this.spherical.theta, 0, 'YXZ'));\n        if (this.camera.fov !== Math.exp(this.logFov)) {\n            this.camera.fov = Math.exp(this.logFov);\n            this.camera.updateProjectionMatrix();\n        }\n        this.dispatchChange();\n    }\n    userAdjustOrbit(deltaTheta, deltaPhi, deltaZoom) {\n        this.adjustOrbit(deltaTheta * this.orbitSensitivity * this.inputSensitivity, deltaPhi * this.orbitSensitivity * this.inputSensitivity, deltaZoom * this.inputSensitivity);\n        // Always make sure that an initial event is triggered in case there is\n        // contention between user interaction and imperative changes. This initial\n        // event will give external observers that chance to observe that\n        // interaction occurred at all:\n        this.dispatchChange();\n    }\n    // Wraps to between -pi and pi\n    wrapAngle(radians) {\n        const normalized = (radians + Math.PI) / (2 * Math.PI);\n        const wrapped = normalized - Math.floor(normalized);\n        return wrapped * 2 * Math.PI - Math.PI;\n    }\n    pixelLengthToSphericalAngle(pixelLength) {\n        return 2 * Math.PI * pixelLength / this.element.clientHeight;\n    }\n    twoTouchDistance(touchOne, touchTwo) {\n        const { clientX: xOne, clientY: yOne } = touchOne;\n        const { clientX: xTwo, clientY: yTwo } = touchTwo;\n        const xDelta = xTwo - xOne;\n        const yDelta = yTwo - yOne;\n        return Math.sqrt(xDelta * xDelta + yDelta * yDelta);\n    }\n    handleSinglePointerMove(dx, dy) {\n        const deltaTheta = this.pixelLengthToSphericalAngle(dx);\n        const deltaPhi = this.pixelLengthToSphericalAngle(dy);\n        if (this.isUserPointing === false) {\n            this.isUserPointing = true;\n            this.dispatchEvent({ type: 'pointer-change-start' });\n        }\n        this.userAdjustOrbit(deltaTheta, deltaPhi, 0);\n    }\n    initializePan() {\n        const { theta, phi } = this.spherical;\n        const psi = theta - this.scene.yaw;\n        this.panPerPixel = PAN_SENSITIVITY / this.scene.height;\n        this.panProjection.set(-Math.cos(psi), -Math.cos(phi) * Math.sin(psi), 0, 0, Math.sin(phi), 0, Math.sin(psi), -Math.cos(phi) * Math.cos(psi), 0);\n    }\n    movePan(dx, dy) {\n        const { scene } = this;\n        const dxy = vector3.set(dx, dy, 0).multiplyScalar(this.inputSensitivity);\n        const metersPerPixel = this.spherical.radius * Math.exp(this.logFov) * this.panPerPixel;\n        dxy.multiplyScalar(metersPerPixel);\n        const target = scene.getTarget();\n        target.add(dxy.applyMatrix3(this.panProjection));\n        scene.boundingSphere.clampPoint(target, target);\n        scene.setTarget(target.x, target.y, target.z);\n        this.dispatchChange();\n    }\n    recenter(pointer) {\n        if (performance.now() > this.startTime + TAP_MS ||\n            Math.abs(pointer.clientX - this.startPointerPosition.clientX) >\n                TAP_DISTANCE ||\n            Math.abs(pointer.clientY - this.startPointerPosition.clientY) >\n                TAP_DISTANCE) {\n            return;\n        }\n        const { scene } = this;\n        const hit = scene.positionAndNormalFromPoint(scene.getNDC(pointer.clientX, pointer.clientY));\n        if (hit == null) {\n            const { cameraTarget } = scene.element;\n            scene.element.cameraTarget = '';\n            scene.element.cameraTarget = cameraTarget;\n            // Zoom all the way out.\n            this.userAdjustOrbit(0, 0, 1);\n        }\n        else {\n            scene.target.worldToLocal(hit.position);\n            scene.setTarget(hit.position.x, hit.position.y, hit.position.z);\n        }\n    }\n    resetRadius() {\n        const { scene } = this;\n        const hit = scene.positionAndNormalFromPoint(vector2.set(0, 0));\n        if (hit == null) {\n            return;\n        }\n        scene.target.worldToLocal(hit.position);\n        const goalTarget = scene.getTarget();\n        const { theta, phi } = this.spherical;\n        // Set target to surface hit point, except the target is still settling,\n        // so offset the goal accordingly so the transition is smooth even though\n        // this will drift the target slightly away from the hit point.\n        const psi = theta - scene.yaw;\n        const n = vector3.set(Math.sin(phi) * Math.sin(psi), Math.cos(phi), Math.sin(phi) * Math.cos(psi));\n        const dr = n.dot(hit.position.sub(goalTarget));\n        goalTarget.add(n.multiplyScalar(dr));\n        scene.setTarget(goalTarget.x, goalTarget.y, goalTarget.z);\n        // Change the camera radius to match the change in target so that the\n        // camera itself does not move, unless it hits a radius bound.\n        this.setOrbit(undefined, undefined, this.goalSpherical.radius - dr);\n    }\n    onTouchChange(event) {\n        if (this.pointers.length === 1) {\n            this.touchMode = this.touchModeRotate;\n        }\n        else {\n            if (this._disableZoom) {\n                this.touchMode = null;\n                this.element.removeEventListener('touchmove', this.disableScroll);\n                return;\n            }\n            this.touchMode = (this.touchDecided && this.touchMode === null) ?\n                null :\n                this.touchModeZoom;\n            this.touchDecided = true;\n            this.element.addEventListener('touchmove', this.disableScroll, { passive: false });\n            this.lastSeparation =\n                this.twoTouchDistance(this.pointers[0], this.pointers[1]);\n            if (this.enablePan && this.touchMode != null) {\n                this.initializePan();\n                if (!event.altKey) { // user interaction, not prompt\n                    this.scene.element[_features_controls_js__WEBPACK_IMPORTED_MODULE_0__.$panElement].style.opacity = 1;\n                }\n            }\n        }\n    }\n    onMouseDown(event) {\n        this.panPerPixel = 0;\n        if (this.enablePan &&\n            (event.button === 2 || event.ctrlKey || event.metaKey ||\n                event.shiftKey)) {\n            this.initializePan();\n            this.scene.element[_features_controls_js__WEBPACK_IMPORTED_MODULE_0__.$panElement].style.opacity = 1;\n        }\n        this.element.style.cursor = 'grabbing';\n    }\n    /**\n     * Handles the orbit and Zoom key presses\n     * Uses constants for the increment.\n     * @param event The keyboard event for the .key value\n     * @returns boolean to indicate if the key event has been handled\n     */\n    orbitZoomKeyCodeHandler(event) {\n        let relevantKey = true;\n        switch (event.key) {\n            case 'PageUp':\n                this.userAdjustOrbit(0, 0, ZOOM_SENSITIVITY);\n                break;\n            case 'PageDown':\n                this.userAdjustOrbit(0, 0, -1 * ZOOM_SENSITIVITY);\n                break;\n            case 'ArrowUp':\n                this.userAdjustOrbit(0, -KEYBOARD_ORBIT_INCREMENT, 0);\n                break;\n            case 'ArrowDown':\n                this.userAdjustOrbit(0, KEYBOARD_ORBIT_INCREMENT, 0);\n                break;\n            case 'ArrowLeft':\n                this.userAdjustOrbit(-KEYBOARD_ORBIT_INCREMENT, 0, 0);\n                break;\n            case 'ArrowRight':\n                this.userAdjustOrbit(KEYBOARD_ORBIT_INCREMENT, 0, 0);\n                break;\n            default:\n                relevantKey = false;\n                break;\n        }\n        return relevantKey;\n    }\n    /**\n     * Handles the Pan key presses\n     * Uses constants for the increment.\n     * @param event The keyboard event for the .key value\n     * @returns boolean to indicate if the key event has been handled\n     */\n    panKeyCodeHandler(event) {\n        this.initializePan();\n        let relevantKey = true;\n        switch (event.key) {\n            case 'ArrowUp':\n                this.movePan(0, -1 * PAN_KEY_INCREMENT); // This is the negative one so that the\n                // model appears to move as the arrow\n                // direction rather than the view moving\n                break;\n            case 'ArrowDown':\n                this.movePan(0, PAN_KEY_INCREMENT);\n                break;\n            case 'ArrowLeft':\n                this.movePan(-1 * PAN_KEY_INCREMENT, 0);\n                break;\n            case 'ArrowRight':\n                this.movePan(PAN_KEY_INCREMENT, 0);\n                break;\n            default:\n                relevantKey = false;\n                break;\n        }\n        return relevantKey;\n    }\n}\n//# sourceMappingURL=SmoothControls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvU21vb3RoQ29udHJvbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxRjtBQUMvQjtBQUNkO0FBQ1k7QUFDcEQ7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDBDQUFPO0FBQzNCLG9CQUFvQiwwQ0FBTztBQUNwQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsa0RBQWU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywwQ0FBTztBQUN4QztBQUNBO0FBQ0EsNkJBQTZCLDRDQUFTO0FBQ3RDLGlDQUFpQyw0Q0FBUztBQUMxQywrQkFBK0IsOENBQU07QUFDckMsNkJBQTZCLDhDQUFNO0FBQ25DLGdDQUFnQyw4Q0FBTTtBQUN0QztBQUNBO0FBQ0EsNkJBQTZCLDhDQUFNO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUdBQXFHLGdDQUFnQyx1QkFBdUI7QUFDNUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQXFGLGdCQUFnQjtBQUNyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxxRUFBcUU7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw4REFBVztBQUMxQztBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsNEJBQTRCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELElBQUksZ0JBQWdCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDRDQUFTO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUhBQW1IO0FBQ25JLGdCQUFnQixxQkFBcUI7QUFDckMsMEJBQTBCLG9EQUFLO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isb0RBQUs7QUFDN0IsMkJBQTJCLG9EQUFLO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUNBQXlDO0FBQ3pELGNBQWMsb0RBQUs7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUJBQXFCO0FBQ3JDLGdCQUFnQix1RUFBdUU7QUFDdkY7QUFDQTtBQUNBLGtDQUFrQyxvREFBSztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIscURBQWE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1DQUFtQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDJDQUEyQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHdDQUFLO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrQkFBK0I7QUFDL0MsZ0JBQWdCLCtCQUErQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsOEJBQThCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsZ0JBQWdCO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDLHVDQUF1Qyw4REFBVztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw4REFBVztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZnQtbWludGluZy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdGhyZWUtY29tcG9uZW50cy9TbW9vdGhDb250cm9scy5qcz85ZWNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRXVsZXIsIEV2ZW50RGlzcGF0Y2hlciwgTWF0cml4MywgU3BoZXJpY2FsLCBWZWN0b3IyLCBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgJHBhbkVsZW1lbnQgfSBmcm9tICcuLi9mZWF0dXJlcy9jb250cm9scy5qcyc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL3V0aWxpdGllcy5qcyc7XG5pbXBvcnQgeyBEYW1wZXIsIFNFVFRMSU5HX1RJTUUgfSBmcm9tICcuL0RhbXBlci5qcyc7XG5jb25zdCBQQU5fU0VOU0lUSVZJVFkgPSAwLjAxODtcbmNvbnN0IFRBUF9ESVNUQU5DRSA9IDI7XG5jb25zdCBUQVBfTVMgPSAzMDA7XG5jb25zdCB2ZWN0b3IyID0gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IHZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IE9iamVjdC5mcmVlemUoe1xuICAgIG1pbmltdW1SYWRpdXM6IDAsXG4gICAgbWF4aW11bVJhZGl1czogSW5maW5pdHksXG4gICAgbWluaW11bVBvbGFyQW5nbGU6IE1hdGguUEkgLyA4LFxuICAgIG1heGltdW1Qb2xhckFuZ2xlOiBNYXRoLlBJIC0gTWF0aC5QSSAvIDgsXG4gICAgbWluaW11bUF6aW11dGhhbEFuZ2xlOiAtSW5maW5pdHksXG4gICAgbWF4aW11bUF6aW11dGhhbEFuZ2xlOiBJbmZpbml0eSxcbiAgICBtaW5pbXVtRmllbGRPZlZpZXc6IDEwLFxuICAgIG1heGltdW1GaWVsZE9mVmlldzogNDUsXG4gICAgdG91Y2hBY3Rpb246ICdub25lJ1xufSk7XG4vLyBDb25zdGFudHNcbmNvbnN0IEtFWUJPQVJEX09SQklUX0lOQ1JFTUVOVCA9IE1hdGguUEkgLyA4O1xuY29uc3QgWk9PTV9TRU5TSVRJVklUWSA9IDAuMDQ7XG4vLyBUaGUgbW92ZSBzaXplIG9uIHBhbiBrZXkgZXZlbnRcbmNvbnN0IFBBTl9LRVlfSU5DUkVNRU5UID0gMTA7XG5leHBvcnQgY29uc3QgS2V5Q29kZSA9IHtcbiAgICBQQUdFX1VQOiAzMyxcbiAgICBQQUdFX0RPV046IDM0LFxuICAgIExFRlQ6IDM3LFxuICAgIFVQOiAzOCxcbiAgICBSSUdIVDogMzksXG4gICAgRE9XTjogNDBcbn07XG5leHBvcnQgY29uc3QgQ2hhbmdlU291cmNlID0ge1xuICAgIFVTRVJfSU5URVJBQ1RJT046ICd1c2VyLWludGVyYWN0aW9uJyxcbiAgICBOT05FOiAnbm9uZScsXG4gICAgQVVUT01BVElDOiAnYXV0b21hdGljJ1xufTtcbi8qKlxuICogU21vb3RoQ29udHJvbHMgaXMgYSBUaHJlZS5qcyBoZWxwZXIgZm9yIGFkZGluZyBkZWxpZ2h0ZnVsIHBvaW50ZXIgYW5kXG4gKiBrZXlib2FyZC1iYXNlZCBpbnB1dCB0byBhIHN0YWdlZCBUaHJlZS5qcyBzY2VuZS4gSXRzIEFQSSBpcyB2ZXJ5IHNpbWlsYXIgdG9cbiAqIE9yYml0Q29udHJvbHMsIGJ1dCBpdCBvZmZlcnMgbW9yZSBvcGluaW9uYXRlZCAoc3ViamVjdGl2ZWx5IG1vcmUgZGVsaWdodGZ1bClcbiAqIGRlZmF1bHRzLCBlYXN5IGV4dGVuc2liaWxpdHkgYW5kIHN1YmplY3RpdmVseSBiZXR0ZXIgb3V0LW9mLXRoZS1ib3gga2V5Ym9hcmRcbiAqIHN1cHBvcnQuXG4gKlxuICogT25lIGltcG9ydGFudCBjaGFuZ2UgY29tcGFyZWQgdG8gT3JiaXRDb250cm9scyBpcyB0aGF0IHRoZSBgdXBkYXRlYCBtZXRob2RcbiAqIG9mIFNtb290aENvbnRyb2xzIG11c3QgYmUgaW52b2tlZCBvbiBldmVyeSBmcmFtZSwgb3RoZXJ3aXNlIHRoZSBjb250cm9sc1xuICogd2lsbCBub3QgaGF2ZSBhbiBlZmZlY3QuXG4gKlxuICogQW5vdGhlciBub3RhYmxlIGRpZmZlcmVuY2UgY29tcGFyZWQgdG8gT3JiaXRDb250cm9scyBpcyB0aGF0IFNtb290aENvbnRyb2xzXG4gKiBkb2VzIG5vdCBjdXJyZW50bHkgc3VwcG9ydCBwYW5uaW5nIChidXQgcHJvYmFibHkgd2lsbCBpbiBhIGZ1dHVyZSByZXZpc2lvbikuXG4gKlxuICogTGlrZSBPcmJpdENvbnRyb2xzLCBTbW9vdGhDb250cm9scyBhc3N1bWVzIHRoYXQgdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBjYW1lcmFcbiAqIGhhcyBiZWVuIHNldCBpbiB0ZXJtcyBvZiBwb3NpdGlvbiwgcm90YXRpb24gYW5kIHNjYWxlLCBzbyBpdCBpcyBpbXBvcnRhbnQgdG9cbiAqIGVuc3VyZSB0aGF0IHRoZSBjYW1lcmEncyBtYXRyaXhXb3JsZCBpcyBpbiBzeW5jIGJlZm9yZSB1c2luZyBTbW9vdGhDb250cm9scy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNtb290aENvbnRyb2xzIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcbiAgICBjb25zdHJ1Y3RvcihjYW1lcmEsIGVsZW1lbnQsIHNjZW5lKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgIHRoaXMub3JiaXRTZW5zaXRpdml0eSA9IDE7XG4gICAgICAgIHRoaXMuaW5wdXRTZW5zaXRpdml0eSA9IDE7XG4gICAgICAgIHRoaXMuY2hhbmdlU291cmNlID0gQ2hhbmdlU291cmNlLk5PTkU7XG4gICAgICAgIHRoaXMuX2ludGVyYWN0aW9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kaXNhYmxlWm9vbSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzVXNlclBvaW50aW5nID0gZmFsc2U7XG4gICAgICAgIC8vIFBhbiBzdGF0ZVxuICAgICAgICB0aGlzLmVuYWJsZVBhbiA9IHRydWU7XG4gICAgICAgIHRoaXMuZW5hYmxlVGFwID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wYW5Qcm9qZWN0aW9uID0gbmV3IE1hdHJpeDMoKTtcbiAgICAgICAgdGhpcy5wYW5QZXJQaXhlbCA9IDA7XG4gICAgICAgIC8vIEludGVybmFsIG9yYml0YWwgcG9zaXRpb24gc3RhdGVcbiAgICAgICAgdGhpcy5zcGhlcmljYWwgPSBuZXcgU3BoZXJpY2FsKCk7XG4gICAgICAgIHRoaXMuZ29hbFNwaGVyaWNhbCA9IG5ldyBTcGhlcmljYWwoKTtcbiAgICAgICAgdGhpcy50aGV0YURhbXBlciA9IG5ldyBEYW1wZXIoKTtcbiAgICAgICAgdGhpcy5waGlEYW1wZXIgPSBuZXcgRGFtcGVyKCk7XG4gICAgICAgIHRoaXMucmFkaXVzRGFtcGVyID0gbmV3IERhbXBlcigpO1xuICAgICAgICB0aGlzLmxvZ0ZvdiA9IE1hdGgubG9nKERFRkFVTFRfT1BUSU9OUy5tYXhpbXVtRmllbGRPZlZpZXcpO1xuICAgICAgICB0aGlzLmdvYWxMb2dGb3YgPSB0aGlzLmxvZ0ZvdjtcbiAgICAgICAgdGhpcy5mb3ZEYW1wZXIgPSBuZXcgRGFtcGVyKCk7XG4gICAgICAgIC8vIFBvaW50ZXIgc3RhdGVcbiAgICAgICAgdGhpcy50b3VjaE1vZGUgPSBudWxsO1xuICAgICAgICB0aGlzLnBvaW50ZXJzID0gW107XG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5zdGFydFBvaW50ZXJQb3NpdGlvbiA9IHsgY2xpZW50WDogMCwgY2xpZW50WTogMCB9O1xuICAgICAgICB0aGlzLmxhc3RTZXBhcmF0aW9uID0gMDtcbiAgICAgICAgdGhpcy50b3VjaERlY2lkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbkNvbnRleHQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVBhbikge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBvaW50ZXIgb2YgdGhpcy5wb2ludGVycykge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXF1aXJlZCBiZWNhdXNlIG9mIGEgY29tbW9uIGJyb3dzZXIgYnVnIHdoZXJlIHRoZSBjb250ZXh0IG1lbnUgbmV2ZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gZmlyZXMgYSBwb2ludGVyY2FuY2VsIGV2ZW50LlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUG9pbnRlclVwKG5ldyBQb2ludGVyRXZlbnQoJ3BvaW50ZXJjYW5jZWwnLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhcnRQb2ludGVyUG9zaXRpb24pLCB7IHBvaW50ZXJJZDogcG9pbnRlci5pZCB9KSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50b3VjaE1vZGVab29tID0gKGR4LCBkeSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9kaXNhYmxlWm9vbSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvdWNoRGlzdGFuY2UgPSB0aGlzLnR3b1RvdWNoRGlzdGFuY2UodGhpcy5wb2ludGVyc1swXSwgdGhpcy5wb2ludGVyc1sxXSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGFab29tID0gWk9PTV9TRU5TSVRJVklUWSAqXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmxhc3RTZXBhcmF0aW9uIC0gdG91Y2hEaXN0YW5jZSkgKiA1MCAvIHRoaXMuc2NlbmUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdFNlcGFyYXRpb24gPSB0b3VjaERpc3RhbmNlO1xuICAgICAgICAgICAgICAgIHRoaXMudXNlckFkanVzdE9yYml0KDAsIDAsIGRlbHRhWm9vbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wYW5QZXJQaXhlbCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVQYW4oZHgsIGR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gV2UgaW1wbGVtZW50IG91ciBvd24gdmVyc2lvbiBvZiB0aGUgYnJvd3NlcidzIENTUyB0b3VjaC1hY3Rpb24sIGVuZm9yY2VkIGJ5XG4gICAgICAgIC8vIHRoaXMgZnVuY3Rpb24sIGJlY2F1c2UgdGhlIGlPUyBpbXBsZW1lbnRhdGlvbiBvZiBwYW4teSBpcyBiYWQgYW5kIGRvZXNuJ3RcbiAgICAgICAgLy8gbWF0Y2ggQW5kcm9pZC4gU3BlY2lmaWNhbGx5LCBldmVuIGlmIGEgdG91Y2ggZ2VzdHVyZSBiZWdpbnMgYnkgcGFubmluZyBYLFxuICAgICAgICAvLyBpT1Mgd2lsbCBzd2l0Y2ggdG8gc2Nyb2xsaW5nIGFzIHNvb24gYXMgdGhlIGdlc3R1cmUgbW92ZXMgaW4gdGhlIFksIHJhdGhlclxuICAgICAgICAvLyB0aGFuIHN0YXlpbmcgaW4gdGhlIHNhbWUgbW9kZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBnZXN0dXJlLlxuICAgICAgICB0aGlzLmRpc2FibGVTY3JvbGwgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudG91Y2hNb2RlUm90YXRlID0gKGR4LCBkeSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyB0b3VjaEFjdGlvbiB9ID0gdGhpcy5fb3B0aW9ucztcbiAgICAgICAgICAgIGlmICghdGhpcy50b3VjaERlY2lkZWQgJiYgdG91Y2hBY3Rpb24gIT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIHRoaXMudG91Y2hEZWNpZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBkeE1hZyA9IE1hdGguYWJzKGR4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkeU1hZyA9IE1hdGguYWJzKGR5KTtcbiAgICAgICAgICAgICAgICAvLyBJZiBtb3Rpb24gaXMgbW9zdGx5IHZlcnRpY2FsLCBhc3N1bWUgc2Nyb2xsaW5nIGlzIHRoZSBpbnRlbnQuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhbmdlU291cmNlID09PSBDaGFuZ2VTb3VyY2UuVVNFUl9JTlRFUkFDVElPTiAmJlxuICAgICAgICAgICAgICAgICAgICAoKHRvdWNoQWN0aW9uID09PSAncGFuLXknICYmIGR5TWFnID4gZHhNYWcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAodG91Y2hBY3Rpb24gPT09ICdwYW4teCcgJiYgZHhNYWcgPiBkeU1hZykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG91Y2hNb2RlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuZGlzYWJsZVNjcm9sbCwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVNpbmdsZVBvaW50ZXJNb3ZlKGR4LCBkeSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Qb2ludGVyRG93biA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlcnMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgZWxlbWVudCB9ID0gdGhpcztcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLm9uUG9pbnRlck1vdmUpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgdGhpcy5vblBvaW50ZXJVcCk7XG4gICAgICAgICAgICAgICAgdGhpcy50b3VjaE1vZGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMudG91Y2hEZWNpZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFBvaW50ZXJQb3NpdGlvbi5jbGllbnRYID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0UG9pbnRlclBvc2l0aW9uLmNsaWVudFkgPSBldmVudC5jbGllbnRZO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0UG9pbnRlckNhcHR1cmUoZXZlbnQucG9pbnRlcklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wb2ludGVycy5wdXNoKHsgY2xpZW50WDogZXZlbnQuY2xpZW50WCwgY2xpZW50WTogZXZlbnQuY2xpZW50WSwgaWQ6IGV2ZW50LnBvaW50ZXJJZCB9KTtcbiAgICAgICAgICAgIHRoaXMuaXNVc2VyUG9pbnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChldmVudC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU291cmNlID0gZXZlbnQuYWx0S2V5ID8gLy8gc2V0IGJ5IGludGVyYWN0KCkgaW4gY29udHJvbHMudHNcbiAgICAgICAgICAgICAgICAgICAgQ2hhbmdlU291cmNlLkFVVE9NQVRJQyA6XG4gICAgICAgICAgICAgICAgICAgIENoYW5nZVNvdXJjZS5VU0VSX0lOVEVSQUNUSU9OO1xuICAgICAgICAgICAgICAgIHRoaXMub25Ub3VjaENoYW5nZShldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVNvdXJjZSA9IENoYW5nZVNvdXJjZS5VU0VSX0lOVEVSQUNUSU9OO1xuICAgICAgICAgICAgICAgIHRoaXMub25Nb3VzZURvd24oZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uUG9pbnRlck1vdmUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ZXIgPSB0aGlzLnBvaW50ZXJzLmZpbmQoKHBvaW50ZXIpID0+IHBvaW50ZXIuaWQgPT09IGV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICAgICAgICBpZiAocG9pbnRlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbnVtVG91Y2hlcyA9IHRoaXMucG9pbnRlcnMubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgZHggPSAoZXZlbnQuY2xpZW50WCAtIHBvaW50ZXIuY2xpZW50WCkgLyBudW1Ub3VjaGVzO1xuICAgICAgICAgICAgY29uc3QgZHkgPSAoZXZlbnQuY2xpZW50WSAtIHBvaW50ZXIuY2xpZW50WSkgLyBudW1Ub3VjaGVzO1xuICAgICAgICAgICAgaWYgKGR4ID09PSAwICYmIGR5ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9pbnRlci5jbGllbnRYID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgICAgIHBvaW50ZXIuY2xpZW50WSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICAgICAgICBpZiAoZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVNvdXJjZSA9IGV2ZW50LmFsdEtleSA/IC8vIHNldCBieSBpbnRlcmFjdCgpIGluIGNvbnRyb2xzLnRzXG4gICAgICAgICAgICAgICAgICAgIENoYW5nZVNvdXJjZS5BVVRPTUFUSUMgOlxuICAgICAgICAgICAgICAgICAgICBDaGFuZ2VTb3VyY2UuVVNFUl9JTlRFUkFDVElPTjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50b3VjaE1vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3VjaE1vZGUoZHgsIGR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVNvdXJjZSA9IENoYW5nZVNvdXJjZS5VU0VSX0lOVEVSQUNUSU9OO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhblBlclBpeGVsID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVQYW4oZHgsIGR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU2luZ2xlUG9pbnRlck1vdmUoZHgsIGR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Qb2ludGVyVXAgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZWxlbWVudCB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wb2ludGVycy5maW5kSW5kZXgoKHBvaW50ZXIpID0+IHBvaW50ZXIuaWQgPT09IGV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWx0S2V5IGluZGljYXRlcyBhbiBpbnRlcmFjdGlvbiBwcm9tcHQ7IGRvbid0IHJlc2V0IHJhZGl1cyBpbiB0aGlzIGNhc2VcbiAgICAgICAgICAgIC8vIGFzIGl0IHdpbGwgY2F1c2UgdGhlIGNhbWVyYSB0byBkcmlmdC5cbiAgICAgICAgICAgIGlmICh0aGlzLnBhblBlclBpeGVsID4gMCAmJiAhZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldFJhZGl1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMub25Qb2ludGVyTW92ZSk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLm9uUG9pbnRlclVwKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuZGlzYWJsZVNjcm9sbCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUGFuICYmIHRoaXMuZW5hYmxlVGFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZW50ZXIoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudG91Y2hNb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblRvdWNoQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2NlbmUuZWxlbWVudFskcGFuRWxlbWVudF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmN1cnNvciA9ICdncmFiJztcbiAgICAgICAgICAgIHRoaXMucGFuUGVyUGl4ZWwgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNVc2VyUG9pbnRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiAncG9pbnRlci1jaGFuZ2UtZW5kJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbldoZWVsID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZVNvdXJjZSA9IENoYW5nZVNvdXJjZS5VU0VSX0lOVEVSQUNUSU9OO1xuICAgICAgICAgICAgY29uc3QgZGVsdGFab29tID0gZXZlbnQuZGVsdGFZICpcbiAgICAgICAgICAgICAgICAoZXZlbnQuZGVsdGFNb2RlID09IDEgPyAxOCA6IDEpICogWk9PTV9TRU5TSVRJVklUWSAvIDMwO1xuICAgICAgICAgICAgdGhpcy51c2VyQWRqdXN0T3JiaXQoMCwgMCwgZGVsdGFab29tKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25LZXlEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBXZSB0cmFjayBpZiB0aGUga2V5IGlzIGFjdHVhbGx5IG9uZSB3ZSByZXNwb25kIHRvLCBzbyBhcyBub3QgdG9cbiAgICAgICAgICAgIC8vIGFjY2lkZW50YWxseSBjbG9iYmVyIHVucmVsYXRlZCBrZXkgaW5wdXRzIHdoZW4gdGhlIDxtb2RlbC12aWV3ZXI+IGhhc1xuICAgICAgICAgICAgLy8gZm9jdXMuXG4gICAgICAgICAgICBjb25zdCB7IGNoYW5nZVNvdXJjZSB9ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU291cmNlID0gQ2hhbmdlU291cmNlLlVTRVJfSU5URVJBQ1RJT047XG4gICAgICAgICAgICBjb25zdCByZWxldmFudEtleSA9IChldmVudC5zaGlmdEtleSAmJiB0aGlzLmVuYWJsZVBhbikgP1xuICAgICAgICAgICAgICAgIHRoaXMucGFuS2V5Q29kZUhhbmRsZXIoZXZlbnQpIDpcbiAgICAgICAgICAgICAgICB0aGlzLm9yYml0Wm9vbUtleUNvZGVIYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgICAgIGlmIChyZWxldmFudEtleSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVNvdXJjZSA9IGNoYW5nZVNvdXJjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUyk7XG4gICAgICAgIHRoaXMuc2V0T3JiaXQoMCwgTWF0aC5QSSAvIDIsIDEpO1xuICAgICAgICB0aGlzLnNldEZpZWxkT2ZWaWV3KDEwMCk7XG4gICAgICAgIHRoaXMuanVtcFRvR29hbCgpO1xuICAgIH1cbiAgICBnZXQgaW50ZXJhY3Rpb25FbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW50ZXJhY3Rpb25FbmFibGVkO1xuICAgIH1cbiAgICBlbmFibGVJbnRlcmFjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVyYWN0aW9uRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZWxlbWVudCB9ID0gdGhpcztcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLm9uUG9pbnRlckRvd24pO1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgdGhpcy5vblBvaW50ZXJVcCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Rpc2FibGVab29tKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMub25XaGVlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bik7XG4gICAgICAgICAgICAvLyBUaGlzIGxpdHRsZSBiZWF1dHkgaXMgdG8gd29yayBhcm91bmQgYSBXZWJLaXQgYnVnIHRoYXQgb3RoZXJ3aXNlIG1ha2VzXG4gICAgICAgICAgICAvLyB0b3VjaCBldmVudHMgcmFuZG9tbHkgbm90IGNhbmNlbGFibGUuXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsICgpID0+IHsgfSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCB0aGlzLm9uQ29udGV4dCk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ2dyYWInO1xuICAgICAgICAgICAgdGhpcy5faW50ZXJhY3Rpb25FbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG91Y2hBY3Rpb25TdHlsZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc2FibGVJbnRlcmFjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVyYWN0aW9uRW5hYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgeyBlbGVtZW50IH0gPSB0aGlzO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMub25Qb2ludGVyRG93bik7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5vblBvaW50ZXJNb3ZlKTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgdGhpcy5vblBvaW50ZXJVcCk7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLm9uUG9pbnRlclVwKTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm9uV2hlZWwpO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMub25Db250ZXh0KTtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJyc7XG4gICAgICAgICAgICB0aGlzLnRvdWNoTW9kZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG91Y2hBY3Rpb25TdHlsZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25zIHRoYXQgYXJlIGN1cnJlbnRseSBjb25maWd1cmVkIGZvciB0aGUgY29udHJvbHMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBzZXQgZGlzYWJsZVpvb20oZGlzYWJsZSkge1xuICAgICAgICBpZiAodGhpcy5fZGlzYWJsZVpvb20gIT0gZGlzYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZVpvb20gPSBkaXNhYmxlO1xuICAgICAgICAgICAgaWYgKGRpc2FibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm9uV2hlZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbldoZWVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG91Y2hBY3Rpb25TdHlsZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcHkgdGhlIHNwaGVyaWNhbCB2YWx1ZXMgdGhhdCByZXByZXNlbnQgdGhlIGN1cnJlbnQgY2FtZXJhIG9yYml0YWxcbiAgICAgKiBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgY29uZmlndXJlZCB0YXJnZXQgaW50byBhIHByb3ZpZGVkIFNwaGVyaWNhbFxuICAgICAqIGluc3RhbmNlLiBJZiBubyBTcGhlcmljYWwgaXMgcHJvdmlkZWQsIGEgbmV3IFNwaGVyaWNhbCB3aWxsIGJlIGFsbG9jYXRlZFxuICAgICAqIHRvIGNvcHkgdGhlIHZhbHVlcyBpbnRvLiBUaGUgU3BoZXJpY2FsIHRoYXQgdmFsdWVzIGFyZSBjb3BpZWQgaW50byBpc1xuICAgICAqIHJldHVybmVkLlxuICAgICAqL1xuICAgIGdldENhbWVyYVNwaGVyaWNhbCh0YXJnZXQgPSBuZXcgU3BoZXJpY2FsKCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5jb3B5KHRoaXMuc3BoZXJpY2FsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FtZXJhJ3MgY3VycmVudCB2ZXJ0aWNhbCBmaWVsZCBvZiB2aWV3IGluIGRlZ3JlZXMuXG4gICAgICovXG4gICAgZ2V0RmllbGRPZlZpZXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbWVyYS5mb3Y7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZSB0aGUgX29wdGlvbnMgb2YgdGhlIGNvbnRyb2xzLiBDb25maWd1cmVkIF9vcHRpb25zIHdpbGwgYmVcbiAgICAgKiBtZXJnZWQgd2l0aCB3aGF0ZXZlciBfb3B0aW9ucyBoYXZlIGFscmVhZHkgYmVlbiBjb25maWd1cmVkIGZvciB0aGlzXG4gICAgICogY29udHJvbHMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgYXBwbHlPcHRpb25zKF9vcHRpb25zKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fb3B0aW9ucywgX29wdGlvbnMpO1xuICAgICAgICAvLyBSZS1ldmFsdWF0ZXMgY2xhbXBpbmcgYmFzZWQgb24gcG90ZW50aWFsbHkgbmV3IHZhbHVlcyBmb3IgbWluL21heFxuICAgICAgICAvLyBwb2xhciwgYXppbXV0aCBhbmQgcmFkaXVzOlxuICAgICAgICB0aGlzLnNldE9yYml0KCk7XG4gICAgICAgIHRoaXMuc2V0RmllbGRPZlZpZXcoTWF0aC5leHAodGhpcy5nb2FsTG9nRm92KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG5lYXIgYW5kIGZhciBwbGFuZXMgb2YgdGhlIGNhbWVyYS5cbiAgICAgKi9cbiAgICB1cGRhdGVOZWFyRmFyKG5lYXJQbGFuZSwgZmFyUGxhbmUpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEubmVhciA9IE1hdGgubWF4KG5lYXJQbGFuZSwgZmFyUGxhbmUgLyAxMDAwKTtcbiAgICAgICAgdGhpcy5jYW1lcmEuZmFyID0gZmFyUGxhbmU7XG4gICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYXNwZWN0IHJhdGlvIG9mIHRoZSBjYW1lcmFcbiAgICAgKi9cbiAgICB1cGRhdGVBc3BlY3QoYXNwZWN0KSB7XG4gICAgICAgIHRoaXMuY2FtZXJhLmFzcGVjdCA9IGFzcGVjdDtcbiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGFic29sdXRlIG9yYml0YWwgZ29hbCBvZiB0aGUgY2FtZXJhLiBUaGUgY2hhbmdlIHdpbGwgYmVcbiAgICAgKiBhcHBsaWVkIG92ZXIgYSBudW1iZXIgb2YgZnJhbWVzIGRlcGVuZGluZyBvbiBjb25maWd1cmVkIGFjY2VsZXJhdGlvbiBhbmRcbiAgICAgKiBkYW1wZW5pbmcgX29wdGlvbnMuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgaW52b2tpbmcgdGhlIG1ldGhvZCB3aWxsIHJlc3VsdCBpbiB0aGUgY2FtZXJhIGNoYW5naW5nXG4gICAgICogcG9zaXRpb24gYW5kL29yIHJvdGF0aW9uLCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICovXG4gICAgc2V0T3JiaXQoZ29hbFRoZXRhID0gdGhpcy5nb2FsU3BoZXJpY2FsLnRoZXRhLCBnb2FsUGhpID0gdGhpcy5nb2FsU3BoZXJpY2FsLnBoaSwgZ29hbFJhZGl1cyA9IHRoaXMuZ29hbFNwaGVyaWNhbC5yYWRpdXMpIHtcbiAgICAgICAgY29uc3QgeyBtaW5pbXVtQXppbXV0aGFsQW5nbGUsIG1heGltdW1BemltdXRoYWxBbmdsZSwgbWluaW11bVBvbGFyQW5nbGUsIG1heGltdW1Qb2xhckFuZ2xlLCBtaW5pbXVtUmFkaXVzLCBtYXhpbXVtUmFkaXVzIH0gPSB0aGlzLl9vcHRpb25zO1xuICAgICAgICBjb25zdCB7IHRoZXRhLCBwaGksIHJhZGl1cyB9ID0gdGhpcy5nb2FsU3BoZXJpY2FsO1xuICAgICAgICBjb25zdCBuZXh0VGhldGEgPSBjbGFtcChnb2FsVGhldGEsIG1pbmltdW1BemltdXRoYWxBbmdsZSwgbWF4aW11bUF6aW11dGhhbEFuZ2xlKTtcbiAgICAgICAgaWYgKCFpc0Zpbml0ZShtaW5pbXVtQXppbXV0aGFsQW5nbGUpICYmXG4gICAgICAgICAgICAhaXNGaW5pdGUobWF4aW11bUF6aW11dGhhbEFuZ2xlKSkge1xuICAgICAgICAgICAgdGhpcy5zcGhlcmljYWwudGhldGEgPVxuICAgICAgICAgICAgICAgIHRoaXMud3JhcEFuZ2xlKHRoaXMuc3BoZXJpY2FsLnRoZXRhIC0gbmV4dFRoZXRhKSArIG5leHRUaGV0YTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXh0UGhpID0gY2xhbXAoZ29hbFBoaSwgbWluaW11bVBvbGFyQW5nbGUsIG1heGltdW1Qb2xhckFuZ2xlKTtcbiAgICAgICAgY29uc3QgbmV4dFJhZGl1cyA9IGNsYW1wKGdvYWxSYWRpdXMsIG1pbmltdW1SYWRpdXMsIG1heGltdW1SYWRpdXMpO1xuICAgICAgICBpZiAobmV4dFRoZXRhID09PSB0aGV0YSAmJiBuZXh0UGhpID09PSBwaGkgJiYgbmV4dFJhZGl1cyA9PT0gcmFkaXVzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nb2FsU3BoZXJpY2FsLnRoZXRhID0gbmV4dFRoZXRhO1xuICAgICAgICB0aGlzLmdvYWxTcGhlcmljYWwucGhpID0gbmV4dFBoaTtcbiAgICAgICAgdGhpcy5nb2FsU3BoZXJpY2FsLnJhZGl1cyA9IG5leHRSYWRpdXM7XG4gICAgICAgIHRoaXMuZ29hbFNwaGVyaWNhbC5tYWtlU2FmZSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2V0IG9mIHNldE9yYml0KCkgYWJvdmUsIHdoaWNoIG9ubHkgc2V0cyB0aGUgY2FtZXJhJ3MgcmFkaXVzLlxuICAgICAqL1xuICAgIHNldFJhZGl1cyhyYWRpdXMpIHtcbiAgICAgICAgdGhpcy5nb2FsU3BoZXJpY2FsLnJhZGl1cyA9IHJhZGl1cztcbiAgICAgICAgdGhpcy5zZXRPcmJpdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnb2FsIGZpZWxkIG9mIHZpZXcgZm9yIHRoZSBjYW1lcmFcbiAgICAgKi9cbiAgICBzZXRGaWVsZE9mVmlldyhmb3YpIHtcbiAgICAgICAgY29uc3QgeyBtaW5pbXVtRmllbGRPZlZpZXcsIG1heGltdW1GaWVsZE9mVmlldyB9ID0gdGhpcy5fb3B0aW9ucztcbiAgICAgICAgZm92ID0gY2xhbXAoZm92LCBtaW5pbXVtRmllbGRPZlZpZXcsIG1heGltdW1GaWVsZE9mVmlldyk7XG4gICAgICAgIHRoaXMuZ29hbExvZ0ZvdiA9IE1hdGgubG9nKGZvdik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNtb290aGluZyBkZWNheSB0aW1lLlxuICAgICAqL1xuICAgIHNldERhbXBlckRlY2F5VGltZShkZWNheU1pbGxpc2Vjb25kcykge1xuICAgICAgICB0aGlzLnRoZXRhRGFtcGVyLnNldERlY2F5VGltZShkZWNheU1pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMucGhpRGFtcGVyLnNldERlY2F5VGltZShkZWNheU1pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMucmFkaXVzRGFtcGVyLnNldERlY2F5VGltZShkZWNheU1pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuZm92RGFtcGVyLnNldERlY2F5VGltZShkZWNheU1pbGxpc2Vjb25kcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkanVzdCB0aGUgb3JiaXRhbCBwb3NpdGlvbiBvZiB0aGUgY2FtZXJhIHJlbGF0aXZlIHRvIGl0cyBjdXJyZW50IG9yYml0YWxcbiAgICAgKiBwb3NpdGlvbi4gRG9lcyBub3QgbGV0IHRoZSB0aGV0YSBnb2FsIGdldCBtb3JlIHRoYW4gcGkgYWhlYWQgb2YgdGhlIGN1cnJlbnRcbiAgICAgKiB0aGV0YSwgd2hpY2ggZW5zdXJlcyBpbnRlcnBvbGF0aW9uIGNvbnRpbnVlcyBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBkZWx0YS5cbiAgICAgKiBUaGUgZGVsdGFab29tIHBhcmFtZXRlciBhZGp1c3RzIGJvdGggdGhlIGZpZWxkIG9mIHZpZXcgYW5kIHRoZSBvcmJpdCByYWRpdXNcbiAgICAgKiBzdWNoIHRoYXQgdGhleSBwcm9ncmVzcyBhY3Jvc3MgdGhlaXIgYWxsb3dlZCByYW5nZXMgaW4gc3luYy5cbiAgICAgKi9cbiAgICBhZGp1c3RPcmJpdChkZWx0YVRoZXRhLCBkZWx0YVBoaSwgZGVsdGFab29tKSB7XG4gICAgICAgIGNvbnN0IHsgdGhldGEsIHBoaSwgcmFkaXVzIH0gPSB0aGlzLmdvYWxTcGhlcmljYWw7XG4gICAgICAgIGNvbnN0IHsgbWluaW11bVJhZGl1cywgbWF4aW11bVJhZGl1cywgbWluaW11bUZpZWxkT2ZWaWV3LCBtYXhpbXVtRmllbGRPZlZpZXcgfSA9IHRoaXMuX29wdGlvbnM7XG4gICAgICAgIGNvbnN0IGRUaGV0YSA9IHRoaXMuc3BoZXJpY2FsLnRoZXRhIC0gdGhldGE7XG4gICAgICAgIGNvbnN0IGRUaGV0YUxpbWl0ID0gTWF0aC5QSSAtIDAuMDAxO1xuICAgICAgICBjb25zdCBnb2FsVGhldGEgPSB0aGV0YSAtIGNsYW1wKGRlbHRhVGhldGEsIC1kVGhldGFMaW1pdCAtIGRUaGV0YSwgZFRoZXRhTGltaXQgLSBkVGhldGEpO1xuICAgICAgICBjb25zdCBnb2FsUGhpID0gcGhpIC0gZGVsdGFQaGk7XG4gICAgICAgIGNvbnN0IGRlbHRhUmF0aW8gPSBkZWx0YVpvb20gPT09IDAgP1xuICAgICAgICAgICAgMCA6XG4gICAgICAgICAgICAoKGRlbHRhWm9vbSA+IDAgPyBtYXhpbXVtUmFkaXVzIDogbWluaW11bVJhZGl1cykgLSByYWRpdXMpIC9cbiAgICAgICAgICAgICAgICAoTWF0aC5sb2coZGVsdGFab29tID4gMCA/IG1heGltdW1GaWVsZE9mVmlldyA6IG1pbmltdW1GaWVsZE9mVmlldykgLVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdvYWxMb2dGb3YpO1xuICAgICAgICBjb25zdCBnb2FsUmFkaXVzID0gcmFkaXVzICtcbiAgICAgICAgICAgIGRlbHRhWm9vbSAqXG4gICAgICAgICAgICAgICAgKGlzRmluaXRlKGRlbHRhUmF0aW8pID8gZGVsdGFSYXRpbyA6XG4gICAgICAgICAgICAgICAgICAgIChtYXhpbXVtUmFkaXVzIC0gbWluaW11bVJhZGl1cykgKiAyKTtcbiAgICAgICAgdGhpcy5zZXRPcmJpdChnb2FsVGhldGEsIGdvYWxQaGksIGdvYWxSYWRpdXMpO1xuICAgICAgICBpZiAoZGVsdGFab29tICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBnb2FsTG9nRm92ID0gdGhpcy5nb2FsTG9nRm92ICsgZGVsdGFab29tO1xuICAgICAgICAgICAgdGhpcy5zZXRGaWVsZE9mVmlldyhNYXRoLmV4cChnb2FsTG9nRm92KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTW92ZSB0aGUgY2FtZXJhIGluc3RhbnRseSBpbnN0ZWFkIG9mIGFjY2VsZXJhdGluZyB0b3dhcmQgdGhlIGdvYWxcbiAgICAgKiBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGp1bXBUb0dvYWwoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKDAsIFNFVFRMSU5HX1RJTUUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgY29udHJvbHMuIEluIG1vc3QgY2FzZXMsIHRoaXMgd2lsbCByZXN1bHQgaW4gdGhlIGNhbWVyYVxuICAgICAqIGludGVycG9sYXRpbmcgaXRzIHBvc2l0aW9uIGFuZCByb3RhdGlvbiB1bnRpbCBpdCBsaW5lcyB1cCB3aXRoIHRoZVxuICAgICAqIGRlc2lnbmF0ZWQgZ29hbCBvcmJpdGFsIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogVGltZSBhbmQgZGVsdGEgYXJlIG1lYXN1cmVkIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKi9cbiAgICB1cGRhdGUoX3RpbWUsIGRlbHRhKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RhdGlvbmFyeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBtYXhpbXVtUG9sYXJBbmdsZSwgbWF4aW11bVJhZGl1cyB9ID0gdGhpcy5fb3B0aW9ucztcbiAgICAgICAgY29uc3QgZFRoZXRhID0gdGhpcy5zcGhlcmljYWwudGhldGEgLSB0aGlzLmdvYWxTcGhlcmljYWwudGhldGE7XG4gICAgICAgIGlmIChNYXRoLmFicyhkVGhldGEpID4gTWF0aC5QSSAmJlxuICAgICAgICAgICAgIWlzRmluaXRlKHRoaXMuX29wdGlvbnMubWluaW11bUF6aW11dGhhbEFuZ2xlKSAmJlxuICAgICAgICAgICAgIWlzRmluaXRlKHRoaXMuX29wdGlvbnMubWF4aW11bUF6aW11dGhhbEFuZ2xlKSkge1xuICAgICAgICAgICAgdGhpcy5zcGhlcmljYWwudGhldGEgLT0gTWF0aC5zaWduKGRUaGV0YSkgKiAyICogTWF0aC5QSTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNwaGVyaWNhbC50aGV0YSA9IHRoaXMudGhldGFEYW1wZXIudXBkYXRlKHRoaXMuc3BoZXJpY2FsLnRoZXRhLCB0aGlzLmdvYWxTcGhlcmljYWwudGhldGEsIGRlbHRhLCBNYXRoLlBJKTtcbiAgICAgICAgdGhpcy5zcGhlcmljYWwucGhpID0gdGhpcy5waGlEYW1wZXIudXBkYXRlKHRoaXMuc3BoZXJpY2FsLnBoaSwgdGhpcy5nb2FsU3BoZXJpY2FsLnBoaSwgZGVsdGEsIG1heGltdW1Qb2xhckFuZ2xlKTtcbiAgICAgICAgdGhpcy5zcGhlcmljYWwucmFkaXVzID0gdGhpcy5yYWRpdXNEYW1wZXIudXBkYXRlKHRoaXMuc3BoZXJpY2FsLnJhZGl1cywgdGhpcy5nb2FsU3BoZXJpY2FsLnJhZGl1cywgZGVsdGEsIG1heGltdW1SYWRpdXMpO1xuICAgICAgICB0aGlzLmxvZ0ZvdiA9IHRoaXMuZm92RGFtcGVyLnVwZGF0ZSh0aGlzLmxvZ0ZvdiwgdGhpcy5nb2FsTG9nRm92LCBkZWx0YSwgMSk7XG4gICAgICAgIHRoaXMubW92ZUNhbWVyYSgpO1xuICAgIH1cbiAgICB1cGRhdGVUb3VjaEFjdGlvblN0eWxlKCkge1xuICAgICAgICBjb25zdCB7IHN0eWxlIH0gPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcmFjdGlvbkVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdG91Y2hBY3Rpb24gfSA9IHRoaXMuX29wdGlvbnM7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGlzYWJsZVpvb20gJiYgdG91Y2hBY3Rpb24gIT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIHN0eWxlLnRvdWNoQWN0aW9uID0gJ21hbmlwdWxhdGlvbic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZS50b3VjaEFjdGlvbiA9IHRvdWNoQWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGUudG91Y2hBY3Rpb24gPSAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc1N0YXRpb25hcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdvYWxTcGhlcmljYWwudGhldGEgPT09IHRoaXMuc3BoZXJpY2FsLnRoZXRhICYmXG4gICAgICAgICAgICB0aGlzLmdvYWxTcGhlcmljYWwucGhpID09PSB0aGlzLnNwaGVyaWNhbC5waGkgJiZcbiAgICAgICAgICAgIHRoaXMuZ29hbFNwaGVyaWNhbC5yYWRpdXMgPT09IHRoaXMuc3BoZXJpY2FsLnJhZGl1cyAmJlxuICAgICAgICAgICAgdGhpcy5nb2FsTG9nRm92ID09PSB0aGlzLmxvZ0ZvdjtcbiAgICB9XG4gICAgZGlzcGF0Y2hDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICdjaGFuZ2UnLCBzb3VyY2U6IHRoaXMuY2hhbmdlU291cmNlIH0pO1xuICAgIH1cbiAgICBtb3ZlQ2FtZXJhKCkge1xuICAgICAgICAvLyBEZXJpdmUgdGhlIG5ldyBjYW1lcmEgcG9zaXRpb24gZnJvbSB0aGUgdXBkYXRlZCBzcGhlcmljYWw6XG4gICAgICAgIHRoaXMuc3BoZXJpY2FsLm1ha2VTYWZlKCk7XG4gICAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnNldEZyb21TcGhlcmljYWwodGhpcy5zcGhlcmljYWwpO1xuICAgICAgICB0aGlzLmNhbWVyYS5zZXRSb3RhdGlvbkZyb21FdWxlcihuZXcgRXVsZXIodGhpcy5zcGhlcmljYWwucGhpIC0gTWF0aC5QSSAvIDIsIHRoaXMuc3BoZXJpY2FsLnRoZXRhLCAwLCAnWVhaJykpO1xuICAgICAgICBpZiAodGhpcy5jYW1lcmEuZm92ICE9PSBNYXRoLmV4cCh0aGlzLmxvZ0ZvdikpIHtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLmZvdiA9IE1hdGguZXhwKHRoaXMubG9nRm92KTtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc3BhdGNoQ2hhbmdlKCk7XG4gICAgfVxuICAgIHVzZXJBZGp1c3RPcmJpdChkZWx0YVRoZXRhLCBkZWx0YVBoaSwgZGVsdGFab29tKSB7XG4gICAgICAgIHRoaXMuYWRqdXN0T3JiaXQoZGVsdGFUaGV0YSAqIHRoaXMub3JiaXRTZW5zaXRpdml0eSAqIHRoaXMuaW5wdXRTZW5zaXRpdml0eSwgZGVsdGFQaGkgKiB0aGlzLm9yYml0U2Vuc2l0aXZpdHkgKiB0aGlzLmlucHV0U2Vuc2l0aXZpdHksIGRlbHRhWm9vbSAqIHRoaXMuaW5wdXRTZW5zaXRpdml0eSk7XG4gICAgICAgIC8vIEFsd2F5cyBtYWtlIHN1cmUgdGhhdCBhbiBpbml0aWFsIGV2ZW50IGlzIHRyaWdnZXJlZCBpbiBjYXNlIHRoZXJlIGlzXG4gICAgICAgIC8vIGNvbnRlbnRpb24gYmV0d2VlbiB1c2VyIGludGVyYWN0aW9uIGFuZCBpbXBlcmF0aXZlIGNoYW5nZXMuIFRoaXMgaW5pdGlhbFxuICAgICAgICAvLyBldmVudCB3aWxsIGdpdmUgZXh0ZXJuYWwgb2JzZXJ2ZXJzIHRoYXQgY2hhbmNlIHRvIG9ic2VydmUgdGhhdFxuICAgICAgICAvLyBpbnRlcmFjdGlvbiBvY2N1cnJlZCBhdCBhbGw6XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hDaGFuZ2UoKTtcbiAgICB9XG4gICAgLy8gV3JhcHMgdG8gYmV0d2VlbiAtcGkgYW5kIHBpXG4gICAgd3JhcEFuZ2xlKHJhZGlhbnMpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IChyYWRpYW5zICsgTWF0aC5QSSkgLyAoMiAqIE1hdGguUEkpO1xuICAgICAgICBjb25zdCB3cmFwcGVkID0gbm9ybWFsaXplZCAtIE1hdGguZmxvb3Iobm9ybWFsaXplZCk7XG4gICAgICAgIHJldHVybiB3cmFwcGVkICogMiAqIE1hdGguUEkgLSBNYXRoLlBJO1xuICAgIH1cbiAgICBwaXhlbExlbmd0aFRvU3BoZXJpY2FsQW5nbGUocGl4ZWxMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIDIgKiBNYXRoLlBJICogcGl4ZWxMZW5ndGggLyB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgIH1cbiAgICB0d29Ub3VjaERpc3RhbmNlKHRvdWNoT25lLCB0b3VjaFR3bykge1xuICAgICAgICBjb25zdCB7IGNsaWVudFg6IHhPbmUsIGNsaWVudFk6IHlPbmUgfSA9IHRvdWNoT25lO1xuICAgICAgICBjb25zdCB7IGNsaWVudFg6IHhUd28sIGNsaWVudFk6IHlUd28gfSA9IHRvdWNoVHdvO1xuICAgICAgICBjb25zdCB4RGVsdGEgPSB4VHdvIC0geE9uZTtcbiAgICAgICAgY29uc3QgeURlbHRhID0geVR3byAtIHlPbmU7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeERlbHRhICogeERlbHRhICsgeURlbHRhICogeURlbHRhKTtcbiAgICB9XG4gICAgaGFuZGxlU2luZ2xlUG9pbnRlck1vdmUoZHgsIGR5KSB7XG4gICAgICAgIGNvbnN0IGRlbHRhVGhldGEgPSB0aGlzLnBpeGVsTGVuZ3RoVG9TcGhlcmljYWxBbmdsZShkeCk7XG4gICAgICAgIGNvbnN0IGRlbHRhUGhpID0gdGhpcy5waXhlbExlbmd0aFRvU3BoZXJpY2FsQW5nbGUoZHkpO1xuICAgICAgICBpZiAodGhpcy5pc1VzZXJQb2ludGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuaXNVc2VyUG9pbnRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHsgdHlwZTogJ3BvaW50ZXItY2hhbmdlLXN0YXJ0JyB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVzZXJBZGp1c3RPcmJpdChkZWx0YVRoZXRhLCBkZWx0YVBoaSwgMCk7XG4gICAgfVxuICAgIGluaXRpYWxpemVQYW4oKSB7XG4gICAgICAgIGNvbnN0IHsgdGhldGEsIHBoaSB9ID0gdGhpcy5zcGhlcmljYWw7XG4gICAgICAgIGNvbnN0IHBzaSA9IHRoZXRhIC0gdGhpcy5zY2VuZS55YXc7XG4gICAgICAgIHRoaXMucGFuUGVyUGl4ZWwgPSBQQU5fU0VOU0lUSVZJVFkgLyB0aGlzLnNjZW5lLmhlaWdodDtcbiAgICAgICAgdGhpcy5wYW5Qcm9qZWN0aW9uLnNldCgtTWF0aC5jb3MocHNpKSwgLU1hdGguY29zKHBoaSkgKiBNYXRoLnNpbihwc2kpLCAwLCAwLCBNYXRoLnNpbihwaGkpLCAwLCBNYXRoLnNpbihwc2kpLCAtTWF0aC5jb3MocGhpKSAqIE1hdGguY29zKHBzaSksIDApO1xuICAgIH1cbiAgICBtb3ZlUGFuKGR4LCBkeSkge1xuICAgICAgICBjb25zdCB7IHNjZW5lIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBkeHkgPSB2ZWN0b3IzLnNldChkeCwgZHksIDApLm11bHRpcGx5U2NhbGFyKHRoaXMuaW5wdXRTZW5zaXRpdml0eSk7XG4gICAgICAgIGNvbnN0IG1ldGVyc1BlclBpeGVsID0gdGhpcy5zcGhlcmljYWwucmFkaXVzICogTWF0aC5leHAodGhpcy5sb2dGb3YpICogdGhpcy5wYW5QZXJQaXhlbDtcbiAgICAgICAgZHh5Lm11bHRpcGx5U2NhbGFyKG1ldGVyc1BlclBpeGVsKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gc2NlbmUuZ2V0VGFyZ2V0KCk7XG4gICAgICAgIHRhcmdldC5hZGQoZHh5LmFwcGx5TWF0cml4Myh0aGlzLnBhblByb2plY3Rpb24pKTtcbiAgICAgICAgc2NlbmUuYm91bmRpbmdTcGhlcmUuY2xhbXBQb2ludCh0YXJnZXQsIHRhcmdldCk7XG4gICAgICAgIHNjZW5lLnNldFRhcmdldCh0YXJnZXQueCwgdGFyZ2V0LnksIHRhcmdldC56KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaENoYW5nZSgpO1xuICAgIH1cbiAgICByZWNlbnRlcihwb2ludGVyKSB7XG4gICAgICAgIGlmIChwZXJmb3JtYW5jZS5ub3coKSA+IHRoaXMuc3RhcnRUaW1lICsgVEFQX01TIHx8XG4gICAgICAgICAgICBNYXRoLmFicyhwb2ludGVyLmNsaWVudFggLSB0aGlzLnN0YXJ0UG9pbnRlclBvc2l0aW9uLmNsaWVudFgpID5cbiAgICAgICAgICAgICAgICBUQVBfRElTVEFOQ0UgfHxcbiAgICAgICAgICAgIE1hdGguYWJzKHBvaW50ZXIuY2xpZW50WSAtIHRoaXMuc3RhcnRQb2ludGVyUG9zaXRpb24uY2xpZW50WSkgPlxuICAgICAgICAgICAgICAgIFRBUF9ESVNUQU5DRSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc2NlbmUgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGhpdCA9IHNjZW5lLnBvc2l0aW9uQW5kTm9ybWFsRnJvbVBvaW50KHNjZW5lLmdldE5EQyhwb2ludGVyLmNsaWVudFgsIHBvaW50ZXIuY2xpZW50WSkpO1xuICAgICAgICBpZiAoaGl0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY2FtZXJhVGFyZ2V0IH0gPSBzY2VuZS5lbGVtZW50O1xuICAgICAgICAgICAgc2NlbmUuZWxlbWVudC5jYW1lcmFUYXJnZXQgPSAnJztcbiAgICAgICAgICAgIHNjZW5lLmVsZW1lbnQuY2FtZXJhVGFyZ2V0ID0gY2FtZXJhVGFyZ2V0O1xuICAgICAgICAgICAgLy8gWm9vbSBhbGwgdGhlIHdheSBvdXQuXG4gICAgICAgICAgICB0aGlzLnVzZXJBZGp1c3RPcmJpdCgwLCAwLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNjZW5lLnRhcmdldC53b3JsZFRvTG9jYWwoaGl0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgIHNjZW5lLnNldFRhcmdldChoaXQucG9zaXRpb24ueCwgaGl0LnBvc2l0aW9uLnksIGhpdC5wb3NpdGlvbi56KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNldFJhZGl1cygpIHtcbiAgICAgICAgY29uc3QgeyBzY2VuZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaGl0ID0gc2NlbmUucG9zaXRpb25BbmROb3JtYWxGcm9tUG9pbnQodmVjdG9yMi5zZXQoMCwgMCkpO1xuICAgICAgICBpZiAoaGl0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzY2VuZS50YXJnZXQud29ybGRUb0xvY2FsKGhpdC5wb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IGdvYWxUYXJnZXQgPSBzY2VuZS5nZXRUYXJnZXQoKTtcbiAgICAgICAgY29uc3QgeyB0aGV0YSwgcGhpIH0gPSB0aGlzLnNwaGVyaWNhbDtcbiAgICAgICAgLy8gU2V0IHRhcmdldCB0byBzdXJmYWNlIGhpdCBwb2ludCwgZXhjZXB0IHRoZSB0YXJnZXQgaXMgc3RpbGwgc2V0dGxpbmcsXG4gICAgICAgIC8vIHNvIG9mZnNldCB0aGUgZ29hbCBhY2NvcmRpbmdseSBzbyB0aGUgdHJhbnNpdGlvbiBpcyBzbW9vdGggZXZlbiB0aG91Z2hcbiAgICAgICAgLy8gdGhpcyB3aWxsIGRyaWZ0IHRoZSB0YXJnZXQgc2xpZ2h0bHkgYXdheSBmcm9tIHRoZSBoaXQgcG9pbnQuXG4gICAgICAgIGNvbnN0IHBzaSA9IHRoZXRhIC0gc2NlbmUueWF3O1xuICAgICAgICBjb25zdCBuID0gdmVjdG9yMy5zZXQoTWF0aC5zaW4ocGhpKSAqIE1hdGguc2luKHBzaSksIE1hdGguY29zKHBoaSksIE1hdGguc2luKHBoaSkgKiBNYXRoLmNvcyhwc2kpKTtcbiAgICAgICAgY29uc3QgZHIgPSBuLmRvdChoaXQucG9zaXRpb24uc3ViKGdvYWxUYXJnZXQpKTtcbiAgICAgICAgZ29hbFRhcmdldC5hZGQobi5tdWx0aXBseVNjYWxhcihkcikpO1xuICAgICAgICBzY2VuZS5zZXRUYXJnZXQoZ29hbFRhcmdldC54LCBnb2FsVGFyZ2V0LnksIGdvYWxUYXJnZXQueik7XG4gICAgICAgIC8vIENoYW5nZSB0aGUgY2FtZXJhIHJhZGl1cyB0byBtYXRjaCB0aGUgY2hhbmdlIGluIHRhcmdldCBzbyB0aGF0IHRoZVxuICAgICAgICAvLyBjYW1lcmEgaXRzZWxmIGRvZXMgbm90IG1vdmUsIHVubGVzcyBpdCBoaXRzIGEgcmFkaXVzIGJvdW5kLlxuICAgICAgICB0aGlzLnNldE9yYml0KHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0aGlzLmdvYWxTcGhlcmljYWwucmFkaXVzIC0gZHIpO1xuICAgIH1cbiAgICBvblRvdWNoQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnBvaW50ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy50b3VjaE1vZGUgPSB0aGlzLnRvdWNoTW9kZVJvdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXNhYmxlWm9vbSkge1xuICAgICAgICAgICAgICAgIHRoaXMudG91Y2hNb2RlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5kaXNhYmxlU2Nyb2xsKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRvdWNoTW9kZSA9ICh0aGlzLnRvdWNoRGVjaWRlZCAmJiB0aGlzLnRvdWNoTW9kZSA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgIG51bGwgOlxuICAgICAgICAgICAgICAgIHRoaXMudG91Y2hNb2RlWm9vbTtcbiAgICAgICAgICAgIHRoaXMudG91Y2hEZWNpZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLmRpc2FibGVTY3JvbGwsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RTZXBhcmF0aW9uID1cbiAgICAgICAgICAgICAgICB0aGlzLnR3b1RvdWNoRGlzdGFuY2UodGhpcy5wb2ludGVyc1swXSwgdGhpcy5wb2ludGVyc1sxXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5lbmFibGVQYW4gJiYgdGhpcy50b3VjaE1vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZVBhbigpO1xuICAgICAgICAgICAgICAgIGlmICghZXZlbnQuYWx0S2V5KSB7IC8vIHVzZXIgaW50ZXJhY3Rpb24sIG5vdCBwcm9tcHRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5lbGVtZW50WyRwYW5FbGVtZW50XS5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25Nb3VzZURvd24oZXZlbnQpIHtcbiAgICAgICAgdGhpcy5wYW5QZXJQaXhlbCA9IDA7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZVBhbiAmJlxuICAgICAgICAgICAgKGV2ZW50LmJ1dHRvbiA9PT0gMiB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHxcbiAgICAgICAgICAgICAgICBldmVudC5zaGlmdEtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZVBhbigpO1xuICAgICAgICAgICAgdGhpcy5zY2VuZS5lbGVtZW50WyRwYW5FbGVtZW50XS5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ2dyYWJiaW5nJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgb3JiaXQgYW5kIFpvb20ga2V5IHByZXNzZXNcbiAgICAgKiBVc2VzIGNvbnN0YW50cyBmb3IgdGhlIGluY3JlbWVudC5cbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGtleWJvYXJkIGV2ZW50IGZvciB0aGUgLmtleSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIGJvb2xlYW4gdG8gaW5kaWNhdGUgaWYgdGhlIGtleSBldmVudCBoYXMgYmVlbiBoYW5kbGVkXG4gICAgICovXG4gICAgb3JiaXRab29tS2V5Q29kZUhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgbGV0IHJlbGV2YW50S2V5ID0gdHJ1ZTtcbiAgICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ1BhZ2VVcCc6XG4gICAgICAgICAgICAgICAgdGhpcy51c2VyQWRqdXN0T3JiaXQoMCwgMCwgWk9PTV9TRU5TSVRJVklUWSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdQYWdlRG93bic6XG4gICAgICAgICAgICAgICAgdGhpcy51c2VyQWRqdXN0T3JiaXQoMCwgMCwgLTEgKiBaT09NX1NFTlNJVElWSVRZKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgICAgIHRoaXMudXNlckFkanVzdE9yYml0KDAsIC1LRVlCT0FSRF9PUkJJVF9JTkNSRU1FTlQsIDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJBZGp1c3RPcmJpdCgwLCBLRVlCT0FSRF9PUkJJVF9JTkNSRU1FTlQsIDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJBZGp1c3RPcmJpdCgtS0VZQk9BUkRfT1JCSVRfSU5DUkVNRU5ULCAwLCAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgICAgICAgIHRoaXMudXNlckFkanVzdE9yYml0KEtFWUJPQVJEX09SQklUX0lOQ1JFTUVOVCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlbGV2YW50S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbGV2YW50S2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBQYW4ga2V5IHByZXNzZXNcbiAgICAgKiBVc2VzIGNvbnN0YW50cyBmb3IgdGhlIGluY3JlbWVudC5cbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGtleWJvYXJkIGV2ZW50IGZvciB0aGUgLmtleSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIGJvb2xlYW4gdG8gaW5kaWNhdGUgaWYgdGhlIGtleSBldmVudCBoYXMgYmVlbiBoYW5kbGVkXG4gICAgICovXG4gICAgcGFuS2V5Q29kZUhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplUGFuKCk7XG4gICAgICAgIGxldCByZWxldmFudEtleSA9IHRydWU7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVQYW4oMCwgLTEgKiBQQU5fS0VZX0lOQ1JFTUVOVCk7IC8vIFRoaXMgaXMgdGhlIG5lZ2F0aXZlIG9uZSBzbyB0aGF0IHRoZVxuICAgICAgICAgICAgICAgIC8vIG1vZGVsIGFwcGVhcnMgdG8gbW92ZSBhcyB0aGUgYXJyb3dcbiAgICAgICAgICAgICAgICAvLyBkaXJlY3Rpb24gcmF0aGVyIHRoYW4gdGhlIHZpZXcgbW92aW5nXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgICAgIHRoaXMubW92ZVBhbigwLCBQQU5fS0VZX0lOQ1JFTUVOVCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgICAgICAgIHRoaXMubW92ZVBhbigtMSAqIFBBTl9LRVlfSU5DUkVNRU5ULCAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgICAgICAgIHRoaXMubW92ZVBhbihQQU5fS0VZX0lOQ1JFTUVOVCwgMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlbGV2YW50S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbGV2YW50S2V5O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNtb290aENvbnRyb2xzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/SmoothControls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/TextureUtils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/TextureUtils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TextureUtils)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_loaders_RGBELoader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/loaders/RGBELoader.js */ \"(ssr)/./node_modules/three/examples/jsm/loaders/RGBELoader.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _EnvironmentScene_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnvironmentScene.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentScene.js\");\n/* harmony import */ var _EnvironmentSceneAlt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EnvironmentSceneAlt.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentSceneAlt.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nconst GENERATED_SIGMA = 0.04;\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\nconst HDR_FILE_RE = /\\.hdr(\\.js)?$/;\nconst ldrLoader = new three__WEBPACK_IMPORTED_MODULE_3__.TextureLoader();\nconst hdrLoader = new three_examples_jsm_loaders_RGBELoader_js__WEBPACK_IMPORTED_MODULE_4__.RGBELoader();\nhdrLoader.setDataType(three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType);\nclass TextureUtils extends three__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher {\n    constructor(threeRenderer) {\n        super();\n        this.threeRenderer = threeRenderer;\n        this.generatedEnvironmentMap = null;\n        this.generatedEnvironmentMapAlt = null;\n        this.skyboxCache = new Map();\n        this.blurMaterial = null;\n        this.blurScene = null;\n    }\n    async load(url, progressCallback = () => { }) {\n        try {\n            const isHDR = HDR_FILE_RE.test(url);\n            const loader = isHDR ? hdrLoader : ldrLoader;\n            const texture = await new Promise((resolve, reject) => loader.load(url, resolve, (event) => {\n                progressCallback(event.loaded / event.total * 0.9);\n            }, reject));\n            progressCallback(1.0);\n            texture.name = url;\n            texture.mapping = three__WEBPACK_IMPORTED_MODULE_3__.EquirectangularReflectionMapping;\n            if (!isHDR) {\n                texture.encoding = three__WEBPACK_IMPORTED_MODULE_3__.sRGBEncoding;\n            }\n            return texture;\n        }\n        finally {\n            if (progressCallback) {\n                progressCallback(1);\n            }\n        }\n    }\n    /**\n     * Returns a { skybox, environmentMap } object with the targets/textures\n     * accordingly. `skybox` is a WebGLRenderCubeTarget, and `environmentMap`\n     * is a Texture from a WebGLRenderCubeTarget.\n     */\n    async generateEnvironmentMapAndSkybox(skyboxUrl = null, environmentMapUrl = null, progressCallback = () => { }) {\n        const useAltEnvironment = environmentMapUrl !== 'legacy';\n        if (environmentMapUrl === 'legacy' || environmentMapUrl === 'neutral') {\n            environmentMapUrl = null;\n        }\n        environmentMapUrl = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_0__.deserializeUrl)(environmentMapUrl);\n        let skyboxLoads = Promise.resolve(null);\n        let environmentMapLoads;\n        // If we have a skybox URL, attempt to load it as a cubemap\n        if (!!skyboxUrl) {\n            skyboxLoads = this.loadEquirectFromUrl(skyboxUrl, progressCallback);\n        }\n        if (!!environmentMapUrl) {\n            // We have an available environment map URL\n            environmentMapLoads =\n                this.loadEquirectFromUrl(environmentMapUrl, progressCallback);\n        }\n        else if (!!skyboxUrl) {\n            // Fallback to deriving the environment map from an available skybox\n            environmentMapLoads =\n                this.loadEquirectFromUrl(skyboxUrl, progressCallback);\n        }\n        else {\n            // Fallback to generating the environment map\n            environmentMapLoads = useAltEnvironment ?\n                this.loadGeneratedEnvironmentMapAlt() :\n                this.loadGeneratedEnvironmentMap();\n        }\n        const [environmentMap, skybox] = await Promise.all([environmentMapLoads, skyboxLoads]);\n        if (environmentMap == null) {\n            throw new Error('Failed to load environment map.');\n        }\n        return { environmentMap, skybox };\n    }\n    /**\n     * Loads an equirect Texture from a given URL, for use as a skybox.\n     */\n    async loadEquirectFromUrl(url, progressCallback) {\n        if (!this.skyboxCache.has(url)) {\n            const skyboxMapLoads = this.load(url, progressCallback);\n            this.skyboxCache.set(url, skyboxMapLoads);\n        }\n        return this.skyboxCache.get(url);\n    }\n    async GenerateEnvironmentMap(scene, name) {\n        await (0,_utilities_js__WEBPACK_IMPORTED_MODULE_0__.timePasses)();\n        const renderer = this.threeRenderer;\n        const cubeTarget = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLCubeRenderTarget(256, {\n            generateMipmaps: false,\n            type: three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType,\n            format: three__WEBPACK_IMPORTED_MODULE_3__.RGBAFormat,\n            encoding: three__WEBPACK_IMPORTED_MODULE_3__.LinearEncoding,\n            depthBuffer: true\n        });\n        const cubeCamera = new three__WEBPACK_IMPORTED_MODULE_3__.CubeCamera(0.1, 100, cubeTarget);\n        const generatedEnvironmentMap = cubeCamera.renderTarget.texture;\n        generatedEnvironmentMap.name = name;\n        const outputEncoding = renderer.outputEncoding;\n        const toneMapping = renderer.toneMapping;\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_3__.NoToneMapping;\n        renderer.outputEncoding = three__WEBPACK_IMPORTED_MODULE_3__.LinearEncoding;\n        cubeCamera.update(renderer, scene);\n        this.blurCubemap(cubeTarget, GENERATED_SIGMA);\n        renderer.toneMapping = toneMapping;\n        renderer.outputEncoding = outputEncoding;\n        return generatedEnvironmentMap;\n    }\n    /**\n     * Loads a dynamically generated environment map.\n     */\n    async loadGeneratedEnvironmentMap() {\n        if (this.generatedEnvironmentMap == null) {\n            this.generatedEnvironmentMap =\n                this.GenerateEnvironmentMap(new _EnvironmentScene_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](), 'legacy');\n        }\n        return this.generatedEnvironmentMap;\n    }\n    /**\n     * Loads a dynamically generated environment map, designed to be neutral and\n     * color-preserving. Shows less contrast around the different sides of the\n     * object.\n     */\n    async loadGeneratedEnvironmentMapAlt() {\n        if (this.generatedEnvironmentMapAlt == null) {\n            this.generatedEnvironmentMapAlt =\n                this.GenerateEnvironmentMap(new _EnvironmentSceneAlt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](), 'neutral');\n        }\n        return this.generatedEnvironmentMapAlt;\n    }\n    blurCubemap(cubeTarget, sigma) {\n        if (this.blurMaterial == null) {\n            this.blurMaterial = this.getBlurShader(MAX_SAMPLES);\n            const box = new three__WEBPACK_IMPORTED_MODULE_3__.BoxGeometry();\n            const blurMesh = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(box, this.blurMaterial);\n            this.blurScene = new three__WEBPACK_IMPORTED_MODULE_3__.Scene();\n            this.blurScene.add(blurMesh);\n        }\n        const tempTarget = cubeTarget.clone();\n        this.halfblur(cubeTarget, tempTarget, sigma, 'latitudinal');\n        this.halfblur(tempTarget, cubeTarget, sigma, 'longitudinal');\n        // Disposing this target after we're done with it somehow corrupts Safari's\n        // whole graphics driver. It's random, but occurs more frequently on\n        // lower-powered GPUs (macbooks with intel graphics, older iPhones). It goes\n        // beyond just messing up the PMREM, as it also occasionally causes\n        // visible corruption on the canvas and even on the rest of the page.\n        /** tempTarget.dispose(); */\n    }\n    halfblur(targetIn, targetOut, sigmaRadians, direction) {\n        // Number of standard deviations at which to cut off the discrete\n        // approximation.\n        const STANDARD_DEVIATIONS = 3;\n        const pixels = targetIn.width;\n        const radiansPerPixel = isFinite(sigmaRadians) ?\n            Math.PI / (2 * pixels) :\n            2 * Math.PI / (2 * MAX_SAMPLES - 1);\n        const sigmaPixels = sigmaRadians / radiansPerPixel;\n        const samples = isFinite(sigmaRadians) ?\n            1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) :\n            MAX_SAMPLES;\n        if (samples > MAX_SAMPLES) {\n            console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n        }\n        const weights = [];\n        let sum = 0;\n        for (let i = 0; i < MAX_SAMPLES; ++i) {\n            const x = i / sigmaPixels;\n            const weight = Math.exp(-x * x / 2);\n            weights.push(weight);\n            if (i == 0) {\n                sum += weight;\n            }\n            else if (i < samples) {\n                sum += 2 * weight;\n            }\n        }\n        for (let i = 0; i < weights.length; i++) {\n            weights[i] = weights[i] / sum;\n        }\n        const blurUniforms = this.blurMaterial.uniforms;\n        blurUniforms['envMap'].value = targetIn.texture;\n        blurUniforms['samples'].value = samples;\n        blurUniforms['weights'].value = weights;\n        blurUniforms['latitudinal'].value = direction === 'latitudinal';\n        blurUniforms['dTheta'].value = radiansPerPixel;\n        const cubeCamera = new three__WEBPACK_IMPORTED_MODULE_3__.CubeCamera(0.1, 100, targetOut);\n        cubeCamera.update(this.threeRenderer, this.blurScene);\n    }\n    getBlurShader(maxSamples) {\n        const weights = new Float32Array(maxSamples);\n        const poleAxis = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 1, 0);\n        const shaderMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial({\n            name: 'SphericalGaussianBlur',\n            defines: { 'n': maxSamples },\n            uniforms: {\n                'envMap': { value: null },\n                'samples': { value: 1 },\n                'weights': { value: weights },\n                'latitudinal': { value: false },\n                'dTheta': { value: 0 },\n                'poleAxis': { value: poleAxis }\n            },\n            vertexShader: /* glsl */ `\n      \n      varying vec3 vOutputDirection;\n  \n      void main() {\n  \n        vOutputDirection = vec3( position );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  \n      }\n    `,\n            fragmentShader: /* glsl */ `\n        varying vec3 vOutputDirection;\n  \n        uniform samplerCube envMap;\n        uniform int samples;\n        uniform float weights[ n ];\n        uniform bool latitudinal;\n        uniform float dTheta;\n        uniform vec3 poleAxis;\n  \n        vec3 getSample( float theta, vec3 axis ) {\n  \n          float cosTheta = cos( theta );\n          // Rodrigues' axis-angle rotation\n          vec3 sampleDirection = vOutputDirection * cosTheta\n            + cross( axis, vOutputDirection ) * sin( theta )\n            + axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n  \n          return vec3( textureCube( envMap, sampleDirection ) );\n  \n        }\n  \n        void main() {\n  \n          vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n  \n          if ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n  \n            axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n  \n          }\n  \n          axis = normalize( axis );\n  \n          gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n          gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n  \n          for ( int i = 1; i < n; i++ ) {\n  \n            if ( i >= samples ) {\n  \n              break;\n  \n            }\n  \n            float theta = dTheta * float( i );\n            gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n            gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n  \n          }\n        }\n      `,\n            blending: three__WEBPACK_IMPORTED_MODULE_3__.NoBlending,\n            depthTest: false,\n            depthWrite: false,\n            side: three__WEBPACK_IMPORTED_MODULE_3__.BackSide\n        });\n        return shaderMaterial;\n    }\n    async dispose() {\n        for (const [, promise] of this.skyboxCache) {\n            const skybox = await promise;\n            skybox.dispose();\n        }\n        if (this.generatedEnvironmentMap != null) {\n            (await this.generatedEnvironmentMap).dispose();\n            this.generatedEnvironmentMap = null;\n        }\n        if (this.generatedEnvironmentMapAlt != null) {\n            (await this.generatedEnvironmentMapAlt).dispose();\n            this.generatedEnvironmentMapAlt = null;\n        }\n        if (this.blurMaterial != null) {\n            this.blurMaterial.dispose();\n        }\n    }\n}\n//# sourceMappingURL=TextureUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/TextureUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/ModelViewerGLTFInstance.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/ModelViewerGLTFInstance.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelViewerGLTFInstance: () => (/* binding */ ModelViewerGLTFInstance)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GLTFInstance.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/GLTFInstance.js\");\n/* harmony import */ var _correlated_scene_graph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./correlated-scene-graph.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/correlated-scene-graph.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nconst $correlatedSceneGraph = Symbol('correlatedSceneGraph');\n/**\n * This specialization of GLTFInstance collects all of the processing needed\n * to prepare a model and to clone it making special considerations for\n * <model-viewer> use cases.\n */\nclass ModelViewerGLTFInstance extends _GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.GLTFInstance {\n    /**\n     * @override\n     */\n    static [_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$prepare](source) {\n        const prepared = super[_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$prepare](source);\n        if (prepared[$correlatedSceneGraph] == null) {\n            prepared[$correlatedSceneGraph] = _correlated_scene_graph_js__WEBPACK_IMPORTED_MODULE_1__.CorrelatedSceneGraph.from(prepared);\n        }\n        const { scene } = prepared;\n        const nullSphere = new three__WEBPACK_IMPORTED_MODULE_2__.Sphere(undefined, Infinity);\n        scene.traverse((node) => {\n            // Set a high renderOrder while we're here to ensure the model\n            // always renders on top of the sky sphere\n            node.renderOrder = 1000;\n            // Three.js seems to cull some animated models incorrectly. Since we\n            // expect to view our whole scene anyway, we turn off the frustum\n            // culling optimization here.\n            node.frustumCulled = false;\n            // Animations for objects without names target their UUID instead. When\n            // objects are cloned, they get new UUIDs which the animation can't\n            // find. To fix this, we assign their UUID as their name.\n            if (!node.name) {\n                node.name = node.uuid;\n            }\n            const mesh = node;\n            if (mesh.isMesh) {\n                const { geometry } = mesh;\n                mesh.castShadow = true;\n                if (mesh.isSkinnedMesh) {\n                    // Akin to disabling frustum culling above, we have to also manually\n                    // disable the bounds to make raycasting correct for skinned meshes.\n                    geometry.boundingSphere = nullSphere;\n                    // The bounding box is set in GLTFLoader by the accessor bounds, which\n                    // are not updated with animation.\n                    geometry.boundingBox = null;\n                }\n                const material = mesh.material;\n                if (material.isMeshBasicMaterial === true) {\n                    material.toneMapped = false;\n                }\n                // This makes shadows better for non-manifold meshes\n                material.shadowSide = three__WEBPACK_IMPORTED_MODULE_2__.FrontSide;\n                // Fixes an edge case with unused extra UV-coords being incorrectly\n                // referenced by three.js; remove when\n                // https://github.com/mrdoob/three.js/pull/23974 is merged.\n                if (material.aoMap) {\n                    const { gltf, threeObjectMap } = prepared[$correlatedSceneGraph];\n                    const gltfRef = threeObjectMap.get(material);\n                    if (gltf.materials != null && gltfRef != null &&\n                        gltfRef.materials != null) {\n                        const gltfMaterial = gltf.materials[gltfRef.materials];\n                        if (gltfMaterial.occlusionTexture &&\n                            gltfMaterial.occlusionTexture.texCoord === 0 &&\n                            geometry.attributes.uv != null) {\n                            geometry.setAttribute('uv2', geometry.attributes.uv);\n                        }\n                    }\n                }\n            }\n        });\n        return prepared;\n    }\n    get correlatedSceneGraph() {\n        return this[_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$preparedGLTF][$correlatedSceneGraph];\n    }\n    /**\n     * @override\n     */\n    [_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$clone]() {\n        const clone = super[_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$clone]();\n        const sourceUUIDToClonedMaterial = new Map();\n        clone.scene.traverse((node) => {\n            // Materials aren't cloned when cloning meshes; geometry\n            // and materials are copied by reference. This is necessary\n            // for the same model to be used twice with different\n            // scene-graph operations.\n            if (node.isMesh) {\n                const mesh = node;\n                const material = mesh.material;\n                if (material != null) {\n                    if (sourceUUIDToClonedMaterial.has(material.uuid)) {\n                        mesh.material = sourceUUIDToClonedMaterial.get(material.uuid);\n                        return;\n                    }\n                    mesh.material = material.clone();\n                    sourceUUIDToClonedMaterial.set(material.uuid, mesh.material);\n                }\n            }\n        });\n        // Cross-correlate the scene graph by relying on information in the\n        // current scene graph; without this step, relationships between the\n        // Three.js object graph and the glTF scene graph will be lost.\n        clone[$correlatedSceneGraph] =\n            _correlated_scene_graph_js__WEBPACK_IMPORTED_MODULE_1__.CorrelatedSceneGraph.from(clone, this.correlatedSceneGraph);\n        return clone;\n    }\n}\n//# sourceMappingURL=ModelViewerGLTFInstance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/ModelViewerGLTFInstance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialExporterPlugin.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialExporterPlugin.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GLTFExporterMaterialsVariantsExtension)\n/* harmony export */ });\n/* @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @param object {THREE.Object3D}\n * @return {boolean}\n */\nconst compatibleObject = (object) => {\n    // @TODO: Need properer variantMaterials format validation?\n    return object.material !==\n        undefined && // easier than (!object.isMesh && !object.isLine &&\n        // !object.isPoints)\n        object.userData && // just in case\n        object.userData.variantMaterials &&\n        // Is this line costly?\n        !!Array\n            .from(object.userData.variantMaterials\n            .values())\n            .filter(m => compatibleMaterial(m.material));\n};\n/**\n * @param material {THREE.Material}\n * @return {boolean}\n */\nconst compatibleMaterial = (material) => {\n    // @TODO: support multi materials?\n    return material && material.isMaterial && !Array.isArray(material);\n};\nclass GLTFExporterMaterialsVariantsExtension {\n    constructor(writer) {\n        this.writer = writer;\n        this.name = 'KHR_materials_variants';\n        this.variantNames = [];\n    }\n    beforeParse(objects) {\n        // Find all variant names and store them to the table\n        const variantNameSet = new Set();\n        for (const object of objects) {\n            object.traverse(o => {\n                if (!compatibleObject(o)) {\n                    return;\n                }\n                const variantMaterials = o.userData.variantMaterials;\n                const variantDataMap = o.userData.variantData;\n                for (const [variantName, variantData] of variantDataMap) {\n                    const variantMaterial = variantMaterials.get(variantData.index);\n                    // Ignore unloaded variant materials\n                    if (variantMaterial && compatibleMaterial(variantMaterial.material)) {\n                        variantNameSet.add(variantName);\n                    }\n                }\n            });\n        }\n        // We may want to sort?\n        variantNameSet.forEach(name => this.variantNames.push(name));\n    }\n    writeMesh(mesh, meshDef) {\n        if (!compatibleObject(mesh)) {\n            return;\n        }\n        const userData = mesh.userData;\n        const variantMaterials = userData.variantMaterials;\n        const variantDataMap = userData.variantData;\n        const mappingTable = new Map();\n        // Removes gaps in the variant indices list (caused by deleting variants).\n        const reIndexedVariants = new Map();\n        const variants = Array.from(variantDataMap.values()).sort((a, b) => {\n            return a.index - b.index;\n        });\n        for (const [i, variantData] of variants.entries()) {\n            reIndexedVariants.set(variantData.index, i);\n        }\n        for (const variantData of variantDataMap.values()) {\n            const variantInstance = variantMaterials.get(variantData.index);\n            if (!variantInstance || !compatibleMaterial(variantInstance.material)) {\n                continue;\n            }\n            const materialIndex = this.writer.processMaterial(variantInstance.material);\n            if (!mappingTable.has(materialIndex)) {\n                mappingTable.set(materialIndex, { material: materialIndex, variants: [] });\n            }\n            mappingTable.get(materialIndex).variants.push(reIndexedVariants.get(variantData.index));\n        }\n        const mappingsDef = Array.from(mappingTable.values())\n            .map((m => { return m.variants.sort((a, b) => a - b) && m; }))\n            .sort((a, b) => a.material - b.material);\n        if (mappingsDef.length === 0) {\n            return;\n        }\n        const originalMaterialIndex = compatibleMaterial(userData.originalMaterial) ?\n            this.writer.processMaterial(userData.originalMaterial) :\n            -1;\n        for (const primitiveDef of meshDef.primitives) {\n            // Override primitiveDef.material with original material.\n            if (originalMaterialIndex >= 0) {\n                primitiveDef.material = originalMaterialIndex;\n            }\n            primitiveDef.extensions = primitiveDef.extensions || {};\n            primitiveDef.extensions[this.name] = { mappings: mappingsDef };\n        }\n    }\n    afterParse() {\n        if (this.variantNames.length === 0) {\n            return;\n        }\n        const root = this.writer.json;\n        root.extensions = root.extensions || {};\n        const variantsDef = this.variantNames.map(n => {\n            return { name: n };\n        });\n        root.extensions[this.name] = { variants: variantsDef };\n        this.writer.extensionsUsed[this.name] = true;\n    }\n}\n//# sourceMappingURL=VariantMaterialExporterPlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvZ2x0Zi1pbnN0YW5jZS9WYXJpYW50TWF0ZXJpYWxFeHBvcnRlclBsdWdpbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHVDQUF1QztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwrQ0FBK0M7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLFNBQVM7QUFDVCx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZnQtbWludGluZy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdGhyZWUtY29tcG9uZW50cy9nbHRmLWluc3RhbmNlL1ZhcmlhbnRNYXRlcmlhbEV4cG9ydGVyUGx1Z2luLmpzPzkwMzMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBAcGFyYW0gb2JqZWN0IHtUSFJFRS5PYmplY3QzRH1cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGNvbXBhdGlibGVPYmplY3QgPSAob2JqZWN0KSA9PiB7XG4gICAgLy8gQFRPRE86IE5lZWQgcHJvcGVyZXIgdmFyaWFudE1hdGVyaWFscyBmb3JtYXQgdmFsaWRhdGlvbj9cbiAgICByZXR1cm4gb2JqZWN0Lm1hdGVyaWFsICE9PVxuICAgICAgICB1bmRlZmluZWQgJiYgLy8gZWFzaWVyIHRoYW4gKCFvYmplY3QuaXNNZXNoICYmICFvYmplY3QuaXNMaW5lICYmXG4gICAgICAgIC8vICFvYmplY3QuaXNQb2ludHMpXG4gICAgICAgIG9iamVjdC51c2VyRGF0YSAmJiAvLyBqdXN0IGluIGNhc2VcbiAgICAgICAgb2JqZWN0LnVzZXJEYXRhLnZhcmlhbnRNYXRlcmlhbHMgJiZcbiAgICAgICAgLy8gSXMgdGhpcyBsaW5lIGNvc3RseT9cbiAgICAgICAgISFBcnJheVxuICAgICAgICAgICAgLmZyb20ob2JqZWN0LnVzZXJEYXRhLnZhcmlhbnRNYXRlcmlhbHNcbiAgICAgICAgICAgIC52YWx1ZXMoKSlcbiAgICAgICAgICAgIC5maWx0ZXIobSA9PiBjb21wYXRpYmxlTWF0ZXJpYWwobS5tYXRlcmlhbCkpO1xufTtcbi8qKlxuICogQHBhcmFtIG1hdGVyaWFsIHtUSFJFRS5NYXRlcmlhbH1cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGNvbXBhdGlibGVNYXRlcmlhbCA9IChtYXRlcmlhbCkgPT4ge1xuICAgIC8vIEBUT0RPOiBzdXBwb3J0IG11bHRpIG1hdGVyaWFscz9cbiAgICByZXR1cm4gbWF0ZXJpYWwgJiYgbWF0ZXJpYWwuaXNNYXRlcmlhbCAmJiAhQXJyYXkuaXNBcnJheShtYXRlcmlhbCk7XG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0xURkV4cG9ydGVyTWF0ZXJpYWxzVmFyaWFudHNFeHRlbnNpb24ge1xuICAgIGNvbnN0cnVjdG9yKHdyaXRlcikge1xuICAgICAgICB0aGlzLndyaXRlciA9IHdyaXRlcjtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0tIUl9tYXRlcmlhbHNfdmFyaWFudHMnO1xuICAgICAgICB0aGlzLnZhcmlhbnROYW1lcyA9IFtdO1xuICAgIH1cbiAgICBiZWZvcmVQYXJzZShvYmplY3RzKSB7XG4gICAgICAgIC8vIEZpbmQgYWxsIHZhcmlhbnQgbmFtZXMgYW5kIHN0b3JlIHRoZW0gdG8gdGhlIHRhYmxlXG4gICAgICAgIGNvbnN0IHZhcmlhbnROYW1lU2V0ID0gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKGNvbnN0IG9iamVjdCBvZiBvYmplY3RzKSB7XG4gICAgICAgICAgICBvYmplY3QudHJhdmVyc2UobyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wYXRpYmxlT2JqZWN0KG8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgdmFyaWFudE1hdGVyaWFscyA9IG8udXNlckRhdGEudmFyaWFudE1hdGVyaWFscztcbiAgICAgICAgICAgICAgICBjb25zdCB2YXJpYW50RGF0YU1hcCA9IG8udXNlckRhdGEudmFyaWFudERhdGE7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbdmFyaWFudE5hbWUsIHZhcmlhbnREYXRhXSBvZiB2YXJpYW50RGF0YU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YXJpYW50TWF0ZXJpYWwgPSB2YXJpYW50TWF0ZXJpYWxzLmdldCh2YXJpYW50RGF0YS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSB1bmxvYWRlZCB2YXJpYW50IG1hdGVyaWFsc1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFudE1hdGVyaWFsICYmIGNvbXBhdGlibGVNYXRlcmlhbCh2YXJpYW50TWF0ZXJpYWwubWF0ZXJpYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50TmFtZVNldC5hZGQodmFyaWFudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbWF5IHdhbnQgdG8gc29ydD9cbiAgICAgICAgdmFyaWFudE5hbWVTZXQuZm9yRWFjaChuYW1lID0+IHRoaXMudmFyaWFudE5hbWVzLnB1c2gobmFtZSkpO1xuICAgIH1cbiAgICB3cml0ZU1lc2gobWVzaCwgbWVzaERlZikge1xuICAgICAgICBpZiAoIWNvbXBhdGlibGVPYmplY3QobWVzaCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1c2VyRGF0YSA9IG1lc2gudXNlckRhdGE7XG4gICAgICAgIGNvbnN0IHZhcmlhbnRNYXRlcmlhbHMgPSB1c2VyRGF0YS52YXJpYW50TWF0ZXJpYWxzO1xuICAgICAgICBjb25zdCB2YXJpYW50RGF0YU1hcCA9IHVzZXJEYXRhLnZhcmlhbnREYXRhO1xuICAgICAgICBjb25zdCBtYXBwaW5nVGFibGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIFJlbW92ZXMgZ2FwcyBpbiB0aGUgdmFyaWFudCBpbmRpY2VzIGxpc3QgKGNhdXNlZCBieSBkZWxldGluZyB2YXJpYW50cykuXG4gICAgICAgIGNvbnN0IHJlSW5kZXhlZFZhcmlhbnRzID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCB2YXJpYW50cyA9IEFycmF5LmZyb20odmFyaWFudERhdGFNYXAudmFsdWVzKCkpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAoY29uc3QgW2ksIHZhcmlhbnREYXRhXSBvZiB2YXJpYW50cy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHJlSW5kZXhlZFZhcmlhbnRzLnNldCh2YXJpYW50RGF0YS5pbmRleCwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2YXJpYW50RGF0YSBvZiB2YXJpYW50RGF0YU1hcC52YWx1ZXMoKSkge1xuICAgICAgICAgICAgY29uc3QgdmFyaWFudEluc3RhbmNlID0gdmFyaWFudE1hdGVyaWFscy5nZXQodmFyaWFudERhdGEuaW5kZXgpO1xuICAgICAgICAgICAgaWYgKCF2YXJpYW50SW5zdGFuY2UgfHwgIWNvbXBhdGlibGVNYXRlcmlhbCh2YXJpYW50SW5zdGFuY2UubWF0ZXJpYWwpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtYXRlcmlhbEluZGV4ID0gdGhpcy53cml0ZXIucHJvY2Vzc01hdGVyaWFsKHZhcmlhbnRJbnN0YW5jZS5tYXRlcmlhbCk7XG4gICAgICAgICAgICBpZiAoIW1hcHBpbmdUYWJsZS5oYXMobWF0ZXJpYWxJbmRleCkpIHtcbiAgICAgICAgICAgICAgICBtYXBwaW5nVGFibGUuc2V0KG1hdGVyaWFsSW5kZXgsIHsgbWF0ZXJpYWw6IG1hdGVyaWFsSW5kZXgsIHZhcmlhbnRzOiBbXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcHBpbmdUYWJsZS5nZXQobWF0ZXJpYWxJbmRleCkudmFyaWFudHMucHVzaChyZUluZGV4ZWRWYXJpYW50cy5nZXQodmFyaWFudERhdGEuaW5kZXgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXBwaW5nc0RlZiA9IEFycmF5LmZyb20obWFwcGluZ1RhYmxlLnZhbHVlcygpKVxuICAgICAgICAgICAgLm1hcCgobSA9PiB7IHJldHVybiBtLnZhcmlhbnRzLnNvcnQoKGEsIGIpID0+IGEgLSBiKSAmJiBtOyB9KSlcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLm1hdGVyaWFsIC0gYi5tYXRlcmlhbCk7XG4gICAgICAgIGlmIChtYXBwaW5nc0RlZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmlnaW5hbE1hdGVyaWFsSW5kZXggPSBjb21wYXRpYmxlTWF0ZXJpYWwodXNlckRhdGEub3JpZ2luYWxNYXRlcmlhbCkgP1xuICAgICAgICAgICAgdGhpcy53cml0ZXIucHJvY2Vzc01hdGVyaWFsKHVzZXJEYXRhLm9yaWdpbmFsTWF0ZXJpYWwpIDpcbiAgICAgICAgICAgIC0xO1xuICAgICAgICBmb3IgKGNvbnN0IHByaW1pdGl2ZURlZiBvZiBtZXNoRGVmLnByaW1pdGl2ZXMpIHtcbiAgICAgICAgICAgIC8vIE92ZXJyaWRlIHByaW1pdGl2ZURlZi5tYXRlcmlhbCB3aXRoIG9yaWdpbmFsIG1hdGVyaWFsLlxuICAgICAgICAgICAgaWYgKG9yaWdpbmFsTWF0ZXJpYWxJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlRGVmLm1hdGVyaWFsID0gb3JpZ2luYWxNYXRlcmlhbEluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJpbWl0aXZlRGVmLmV4dGVuc2lvbnMgPSBwcmltaXRpdmVEZWYuZXh0ZW5zaW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHByaW1pdGl2ZURlZi5leHRlbnNpb25zW3RoaXMubmFtZV0gPSB7IG1hcHBpbmdzOiBtYXBwaW5nc0RlZiB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGFmdGVyUGFyc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnZhcmlhbnROYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb290ID0gdGhpcy53cml0ZXIuanNvbjtcbiAgICAgICAgcm9vdC5leHRlbnNpb25zID0gcm9vdC5leHRlbnNpb25zIHx8IHt9O1xuICAgICAgICBjb25zdCB2YXJpYW50c0RlZiA9IHRoaXMudmFyaWFudE5hbWVzLm1hcChuID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IG5hbWU6IG4gfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJvb3QuZXh0ZW5zaW9uc1t0aGlzLm5hbWVdID0geyB2YXJpYW50czogdmFyaWFudHNEZWYgfTtcbiAgICAgICAgdGhpcy53cml0ZXIuZXh0ZW5zaW9uc1VzZWRbdGhpcy5uYW1lXSA9IHRydWU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmFyaWFudE1hdGVyaWFsRXhwb3J0ZXJQbHVnaW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialExporterPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialLoaderPlugin.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialLoaderPlugin.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GLTFMaterialsVariantsExtension)\n/* harmony export */ });\n/* @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * KHR_materials_variants specification allows duplicated variant names\n * but it makes handling the extension complex.\n * We ensure tha names and make it easier.\n * If you want to export the extension with the original names\n * you are recommended to write GLTFExporter plugin to restore the names.\n *\n * @param variantNames {Array<string>}\n * @return {Array<string>}\n */\nconst ensureUniqueNames = (variantNames) => {\n    const uniqueNames = [];\n    const knownNames = new Set();\n    for (const name of variantNames) {\n        let uniqueName = name;\n        let suffix = 0;\n        // @TODO: An easy solution.\n        //        O(N^2) in the worst scenario where N is variantNames.length.\n        //        Fix me if needed.\n        while (knownNames.has(uniqueName)) {\n            uniqueName = name + '.' + (++suffix);\n        }\n        knownNames.add(uniqueName);\n        uniqueNames.push(uniqueName);\n    }\n    return uniqueNames;\n};\n/**\n * Convert mappings array to table object to make handling the extension easier.\n *\n * @param\n *     extensionDef {glTF.meshes[n].primitive.extensions.KHR_materials_variants}\n * @param variantNames {Array<string>} Required to be unique names\n * @return {Map}\n */\nconst mappingsArrayToTable = (extensionDef) => {\n    const table = new Map();\n    for (const mapping of extensionDef.mappings) {\n        for (const variant of mapping.variants) {\n            table.set(variant, { material: null, gltfMaterialIndex: mapping.material });\n        }\n    }\n    return table;\n};\nclass GLTFMaterialsVariantsExtension {\n    constructor(parser) {\n        this.parser = parser;\n        this.name = 'KHR_materials_variants';\n    }\n    // Note that the following properties will be overridden even if they are\n    // pre-defined\n    // - gltf.userData.variants\n    // - mesh.userData.variantMaterials\n    afterRoot(gltf) {\n        const parser = this.parser;\n        const json = parser.json;\n        if (json.extensions === undefined ||\n            json.extensions[this.name] === undefined) {\n            return null;\n        }\n        const extensionDef = json.extensions[this.name];\n        const variantsDef = extensionDef.variants || [];\n        const variants = ensureUniqueNames(variantsDef.map((v) => v.name));\n        for (const scene of gltf.scenes) {\n            // Save the variants data under associated mesh.userData\n            scene.traverse(object => {\n                const mesh = object;\n                if (!mesh.isMesh) {\n                    return;\n                }\n                const association = parser.associations.get(mesh);\n                if (association == null || association.meshes == null ||\n                    association.primitives == null) {\n                    return;\n                }\n                const meshDef = json.meshes[association.meshes];\n                const primitivesDef = meshDef.primitives;\n                const primitiveDef = primitivesDef[association.primitives];\n                const extensionsDef = primitiveDef.extensions;\n                if (!extensionsDef || !extensionsDef[this.name]) {\n                    return;\n                }\n                mesh.userData.variantMaterials =\n                    mappingsArrayToTable(extensionsDef[this.name]);\n            });\n        }\n        gltf.userData.variants = variants;\n        return Promise.resolve();\n    }\n}\n//# sourceMappingURL=VariantMaterialLoaderPlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvZ2x0Zi1pbnN0YW5jZS9WYXJpYW50TWF0ZXJpYWxMb2FkZXJQbHVnaW4uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsd0JBQXdCLGVBQWU7QUFDdkMsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMscURBQXFEO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvZ2x0Zi1pbnN0YW5jZS9WYXJpYW50TWF0ZXJpYWxMb2FkZXJQbHVnaW4uanM/MDBkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEtIUl9tYXRlcmlhbHNfdmFyaWFudHMgc3BlY2lmaWNhdGlvbiBhbGxvd3MgZHVwbGljYXRlZCB2YXJpYW50IG5hbWVzXG4gKiBidXQgaXQgbWFrZXMgaGFuZGxpbmcgdGhlIGV4dGVuc2lvbiBjb21wbGV4LlxuICogV2UgZW5zdXJlIHRoYSBuYW1lcyBhbmQgbWFrZSBpdCBlYXNpZXIuXG4gKiBJZiB5b3Ugd2FudCB0byBleHBvcnQgdGhlIGV4dGVuc2lvbiB3aXRoIHRoZSBvcmlnaW5hbCBuYW1lc1xuICogeW91IGFyZSByZWNvbW1lbmRlZCB0byB3cml0ZSBHTFRGRXhwb3J0ZXIgcGx1Z2luIHRvIHJlc3RvcmUgdGhlIG5hbWVzLlxuICpcbiAqIEBwYXJhbSB2YXJpYW50TmFtZXMge0FycmF5PHN0cmluZz59XG4gKiBAcmV0dXJuIHtBcnJheTxzdHJpbmc+fVxuICovXG5jb25zdCBlbnN1cmVVbmlxdWVOYW1lcyA9ICh2YXJpYW50TmFtZXMpID0+IHtcbiAgICBjb25zdCB1bmlxdWVOYW1lcyA9IFtdO1xuICAgIGNvbnN0IGtub3duTmFtZXMgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIHZhcmlhbnROYW1lcykge1xuICAgICAgICBsZXQgdW5pcXVlTmFtZSA9IG5hbWU7XG4gICAgICAgIGxldCBzdWZmaXggPSAwO1xuICAgICAgICAvLyBAVE9ETzogQW4gZWFzeSBzb2x1dGlvbi5cbiAgICAgICAgLy8gICAgICAgIE8oTl4yKSBpbiB0aGUgd29yc3Qgc2NlbmFyaW8gd2hlcmUgTiBpcyB2YXJpYW50TmFtZXMubGVuZ3RoLlxuICAgICAgICAvLyAgICAgICAgRml4IG1lIGlmIG5lZWRlZC5cbiAgICAgICAgd2hpbGUgKGtub3duTmFtZXMuaGFzKHVuaXF1ZU5hbWUpKSB7XG4gICAgICAgICAgICB1bmlxdWVOYW1lID0gbmFtZSArICcuJyArICgrK3N1ZmZpeCk7XG4gICAgICAgIH1cbiAgICAgICAga25vd25OYW1lcy5hZGQodW5pcXVlTmFtZSk7XG4gICAgICAgIHVuaXF1ZU5hbWVzLnB1c2godW5pcXVlTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiB1bmlxdWVOYW1lcztcbn07XG4vKipcbiAqIENvbnZlcnQgbWFwcGluZ3MgYXJyYXkgdG8gdGFibGUgb2JqZWN0IHRvIG1ha2UgaGFuZGxpbmcgdGhlIGV4dGVuc2lvbiBlYXNpZXIuXG4gKlxuICogQHBhcmFtXG4gKiAgICAgZXh0ZW5zaW9uRGVmIHtnbFRGLm1lc2hlc1tuXS5wcmltaXRpdmUuZXh0ZW5zaW9ucy5LSFJfbWF0ZXJpYWxzX3ZhcmlhbnRzfVxuICogQHBhcmFtIHZhcmlhbnROYW1lcyB7QXJyYXk8c3RyaW5nPn0gUmVxdWlyZWQgdG8gYmUgdW5pcXVlIG5hbWVzXG4gKiBAcmV0dXJuIHtNYXB9XG4gKi9cbmNvbnN0IG1hcHBpbmdzQXJyYXlUb1RhYmxlID0gKGV4dGVuc2lvbkRlZikgPT4ge1xuICAgIGNvbnN0IHRhYmxlID0gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3QgbWFwcGluZyBvZiBleHRlbnNpb25EZWYubWFwcGluZ3MpIHtcbiAgICAgICAgZm9yIChjb25zdCB2YXJpYW50IG9mIG1hcHBpbmcudmFyaWFudHMpIHtcbiAgICAgICAgICAgIHRhYmxlLnNldCh2YXJpYW50LCB7IG1hdGVyaWFsOiBudWxsLCBnbHRmTWF0ZXJpYWxJbmRleDogbWFwcGluZy5tYXRlcmlhbCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFibGU7XG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0xURk1hdGVyaWFsc1ZhcmlhbnRzRXh0ZW5zaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIpIHtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgICAgIHRoaXMubmFtZSA9ICdLSFJfbWF0ZXJpYWxzX3ZhcmlhbnRzJztcbiAgICB9XG4gICAgLy8gTm90ZSB0aGF0IHRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyB3aWxsIGJlIG92ZXJyaWRkZW4gZXZlbiBpZiB0aGV5IGFyZVxuICAgIC8vIHByZS1kZWZpbmVkXG4gICAgLy8gLSBnbHRmLnVzZXJEYXRhLnZhcmlhbnRzXG4gICAgLy8gLSBtZXNoLnVzZXJEYXRhLnZhcmlhbnRNYXRlcmlhbHNcbiAgICBhZnRlclJvb3QoZ2x0Zikge1xuICAgICAgICBjb25zdCBwYXJzZXIgPSB0aGlzLnBhcnNlcjtcbiAgICAgICAgY29uc3QganNvbiA9IHBhcnNlci5qc29uO1xuICAgICAgICBpZiAoanNvbi5leHRlbnNpb25zID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGpzb24uZXh0ZW5zaW9uc1t0aGlzLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbkRlZiA9IGpzb24uZXh0ZW5zaW9uc1t0aGlzLm5hbWVdO1xuICAgICAgICBjb25zdCB2YXJpYW50c0RlZiA9IGV4dGVuc2lvbkRlZi52YXJpYW50cyB8fCBbXTtcbiAgICAgICAgY29uc3QgdmFyaWFudHMgPSBlbnN1cmVVbmlxdWVOYW1lcyh2YXJpYW50c0RlZi5tYXAoKHYpID0+IHYubmFtZSkpO1xuICAgICAgICBmb3IgKGNvbnN0IHNjZW5lIG9mIGdsdGYuc2NlbmVzKSB7XG4gICAgICAgICAgICAvLyBTYXZlIHRoZSB2YXJpYW50cyBkYXRhIHVuZGVyIGFzc29jaWF0ZWQgbWVzaC51c2VyRGF0YVxuICAgICAgICAgICAgc2NlbmUudHJhdmVyc2Uob2JqZWN0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNoID0gb2JqZWN0O1xuICAgICAgICAgICAgICAgIGlmICghbWVzaC5pc01lc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhc3NvY2lhdGlvbiA9IHBhcnNlci5hc3NvY2lhdGlvbnMuZ2V0KG1lc2gpO1xuICAgICAgICAgICAgICAgIGlmIChhc3NvY2lhdGlvbiA9PSBudWxsIHx8IGFzc29jaWF0aW9uLm1lc2hlcyA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIGFzc29jaWF0aW9uLnByaW1pdGl2ZXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc2hEZWYgPSBqc29uLm1lc2hlc1thc3NvY2lhdGlvbi5tZXNoZXNdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaW1pdGl2ZXNEZWYgPSBtZXNoRGVmLnByaW1pdGl2ZXM7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpbWl0aXZlRGVmID0gcHJpbWl0aXZlc0RlZlthc3NvY2lhdGlvbi5wcmltaXRpdmVzXTtcbiAgICAgICAgICAgICAgICBjb25zdCBleHRlbnNpb25zRGVmID0gcHJpbWl0aXZlRGVmLmV4dGVuc2lvbnM7XG4gICAgICAgICAgICAgICAgaWYgKCFleHRlbnNpb25zRGVmIHx8ICFleHRlbnNpb25zRGVmW3RoaXMubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZXNoLnVzZXJEYXRhLnZhcmlhbnRNYXRlcmlhbHMgPVxuICAgICAgICAgICAgICAgICAgICBtYXBwaW5nc0FycmF5VG9UYWJsZShleHRlbnNpb25zRGVmW3RoaXMubmFtZV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2x0Zi51c2VyRGF0YS52YXJpYW50cyA9IHZhcmlhbnRzO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmFyaWFudE1hdGVyaWFsTG9hZGVyUGx1Z2luLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialLoaderPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/correlated-scene-graph.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/correlated-scene-graph.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CorrelatedSceneGraph: () => (/* binding */ CorrelatedSceneGraph)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nconst $threeGLTF = Symbol('threeGLTF');\nconst $gltf = Symbol('gltf');\nconst $gltfElementMap = Symbol('gltfElementMap');\nconst $threeObjectMap = Symbol('threeObjectMap');\nconst $parallelTraverseThreeScene = Symbol('parallelTraverseThreeScene');\nconst $correlateOriginalThreeGLTF = Symbol('correlateOriginalThreeGLTF');\nconst $correlateCloneThreeGLTF = Symbol('correlateCloneThreeGLTF');\n/**\n * The Three.js GLTFLoader provides us with an in-memory representation\n * of a glTF in terms of Three.js constructs. It also provides us with a copy\n * of the deserialized glTF without any Three.js decoration, and a mapping of\n * glTF elements to their corresponding Three.js constructs.\n *\n * A CorrelatedSceneGraph exposes a synchronously available mapping of glTF\n * element references to their corresponding Three.js constructs.\n */\nclass CorrelatedSceneGraph {\n    constructor(threeGLTF, gltf, threeObjectMap, gltfElementMap) {\n        this[$threeGLTF] = threeGLTF;\n        this[$gltf] = gltf;\n        this[$gltfElementMap] = gltfElementMap;\n        this[$threeObjectMap] = threeObjectMap;\n    }\n    /**\n     * Produce a CorrelatedSceneGraph from a naturally generated Three.js GLTF.\n     * Such GLTFs are produced by Three.js' GLTFLoader, and contain cached\n     * details that expedite the correlation step.\n     *\n     * If a CorrelatedSceneGraph is provided as the second argument, re-correlates\n     * a cloned Three.js GLTF with a clone of the glTF hierarchy used to produce\n     * the upstream Three.js GLTF that the clone was created from. The result\n     * CorrelatedSceneGraph is representative of the cloned hierarchy.\n     */\n    static from(threeGLTF, upstreamCorrelatedSceneGraph) {\n        if (upstreamCorrelatedSceneGraph != null) {\n            return this[$correlateCloneThreeGLTF](threeGLTF, upstreamCorrelatedSceneGraph);\n        }\n        else {\n            return this[$correlateOriginalThreeGLTF](threeGLTF);\n        }\n    }\n    static [$correlateOriginalThreeGLTF](threeGLTF) {\n        const gltf = threeGLTF.parser.json;\n        const associations = threeGLTF.parser.associations;\n        const gltfElementMap = new Map();\n        const defaultMaterial = { name: 'Default' };\n        const defaultReference = { type: 'materials', index: -1 };\n        for (const threeMaterial of associations.keys()) {\n            // Note: GLTFLoader creates a \"default\" material that has no\n            // corresponding glTF element in the case that no materials are\n            // specified in the source glTF. In this case we append a default\n            // material to allow this to be operated upon.\n            if (threeMaterial instanceof three__WEBPACK_IMPORTED_MODULE_0__.Material &&\n                associations.get(threeMaterial) == null) {\n                if (defaultReference.index < 0) {\n                    if (gltf.materials == null) {\n                        gltf.materials = [];\n                    }\n                    defaultReference.index = gltf.materials.length;\n                    gltf.materials.push(defaultMaterial);\n                }\n                threeMaterial.name = defaultMaterial.name;\n                associations.set(threeMaterial, { materials: defaultReference.index });\n            }\n        }\n        // Creates a reverse look up map (gltf-object to Three-object)\n        for (const [threeObject, gltfMappings] of associations) {\n            if (gltfMappings) {\n                const objWithUserData = threeObject;\n                objWithUserData.userData = objWithUserData.userData || {};\n                objWithUserData.userData.associations = gltfMappings;\n            }\n            for (const mapping in gltfMappings) {\n                if (mapping != null && mapping !== 'primitives') {\n                    const type = mapping;\n                    const elementArray = gltf[type] || [];\n                    const gltfElement = elementArray[gltfMappings[type]];\n                    if (gltfElement == null) {\n                        // TODO: Maybe throw here...\n                        continue;\n                    }\n                    let threeObjects = gltfElementMap.get(gltfElement);\n                    if (threeObjects == null) {\n                        threeObjects = new Set();\n                        gltfElementMap.set(gltfElement, threeObjects);\n                    }\n                    threeObjects.add(threeObject);\n                }\n            }\n        }\n        return new CorrelatedSceneGraph(threeGLTF, gltf, associations, gltfElementMap);\n    }\n    /**\n     * Transfers the association between a raw glTF and a Three.js scene graph\n     * to a clone of the Three.js scene graph, resolved as a new\n     * CorrelatedSceneGraph instance.\n     */\n    static [$correlateCloneThreeGLTF](cloneThreeGLTF, upstreamCorrelatedSceneGraph) {\n        const originalThreeGLTF = upstreamCorrelatedSceneGraph.threeGLTF;\n        const originalGLTF = upstreamCorrelatedSceneGraph.gltf;\n        const cloneGLTF = JSON.parse(JSON.stringify(originalGLTF));\n        const cloneThreeObjectMap = new Map();\n        const cloneGLTFElementMap = new Map();\n        for (let i = 0; i < originalThreeGLTF.scenes.length; i++) {\n            this[$parallelTraverseThreeScene](originalThreeGLTF.scenes[i], cloneThreeGLTF.scenes[i], (object, cloneObject) => {\n                const elementReference = upstreamCorrelatedSceneGraph.threeObjectMap.get(object);\n                if (elementReference == null) {\n                    return;\n                }\n                for (const mapping in elementReference) {\n                    if (mapping != null && mapping !== 'primitives') {\n                        const type = mapping;\n                        const index = elementReference[type];\n                        const cloneElement = cloneGLTF[type][index];\n                        const mappings = cloneThreeObjectMap.get(cloneObject) || {};\n                        mappings[type] = index;\n                        cloneThreeObjectMap.set(cloneObject, mappings);\n                        const cloneObjects = cloneGLTFElementMap.get(cloneElement) || new Set();\n                        cloneObjects.add(cloneObject);\n                        cloneGLTFElementMap.set(cloneElement, cloneObjects);\n                    }\n                }\n            });\n        }\n        return new CorrelatedSceneGraph(cloneThreeGLTF, cloneGLTF, cloneThreeObjectMap, cloneGLTFElementMap);\n    }\n    /**\n     * Traverses two presumably identical Three.js scenes, and invokes a\n     * callback for each Object3D or Material encountered, including the initial\n     * scene. Adapted from\n     * https://github.com/mrdoob/three.js/blob/7c1424c5819ab622a346dd630ee4e6431388021e/examples/jsm/utils/SkeletonUtils.js#L586-L596\n     */\n    static [$parallelTraverseThreeScene](sceneOne, sceneTwo, callback) {\n        const isMesh = (object) => {\n            return object.isMesh;\n        };\n        const traverse = (a, b) => {\n            callback(a, b);\n            if (a.isObject3D) {\n                if (isMesh(a)) {\n                    if (Array.isArray(a.material)) {\n                        for (let i = 0; i < a.material.length; ++i) {\n                            traverse(a.material[i], b.material[i]);\n                        }\n                    }\n                    else {\n                        traverse(a.material, b.material);\n                    }\n                }\n                for (let i = 0; i < a.children.length; ++i) {\n                    traverse(a.children[i], b.children[i]);\n                }\n            }\n        };\n        traverse(sceneOne, sceneTwo);\n    }\n    /**\n     * The source Three.js GLTF result given to us by a Three.js GLTFLoader.\n     */\n    get threeGLTF() {\n        return this[$threeGLTF];\n    }\n    /**\n     * The in-memory deserialized source glTF.\n     */\n    get gltf() {\n        return this[$gltf];\n    }\n    /**\n     * A Map of glTF element references to arrays of corresponding Three.js\n     * object references. Three.js objects are kept in arrays to account for\n     * cases where more than one Three.js object corresponds to a single glTF\n     * element.\n     */\n    get gltfElementMap() {\n        return this[$gltfElementMap];\n    }\n    /**\n     * A map of individual Three.js objects to corresponding elements in the\n     * source glTF.\n     */\n    get threeObjectMap() {\n        return this[$threeObjectMap];\n    }\n}\n//# sourceMappingURL=correlated-scene-graph.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/correlated-scene-graph.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/gltf-2.0.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/gltf-2.0.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Filter: () => (/* binding */ Filter),\n/* harmony export */   Wrap: () => (/* binding */ Wrap)\n/* harmony export */ });\nvar Filter;\n(function (Filter) {\n    Filter[Filter[\"Nearest\"] = 9728] = \"Nearest\";\n    Filter[Filter[\"Linear\"] = 9729] = \"Linear\";\n    Filter[Filter[\"NearestMipmapNearest\"] = 9984] = \"NearestMipmapNearest\";\n    Filter[Filter[\"LinearMipmapNearest\"] = 9985] = \"LinearMipmapNearest\";\n    Filter[Filter[\"NearestMipmapLinear\"] = 9986] = \"NearestMipmapLinear\";\n    Filter[Filter[\"LinearMipmapLinear\"] = 9987] = \"LinearMipmapLinear\";\n})(Filter || (Filter = {}));\nvar Wrap;\n(function (Wrap) {\n    Wrap[Wrap[\"ClampToEdge\"] = 33071] = \"ClampToEdge\";\n    Wrap[Wrap[\"MirroredRepeat\"] = 33648] = \"MirroredRepeat\";\n    Wrap[Wrap[\"Repeat\"] = 10497] = \"Repeat\";\n})(Wrap || (Wrap = {}));\n//# sourceMappingURL=gltf-2.0.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvZ2x0Zi1pbnN0YW5jZS9nbHRmLTIuMC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3QjtBQUNsQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQkFBb0I7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZnQtbWludGluZy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdGhyZWUtY29tcG9uZW50cy9nbHRmLWluc3RhbmNlL2dsdGYtMi4wLmpzPzRiNWEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBGaWx0ZXI7XG4oZnVuY3Rpb24gKEZpbHRlcikge1xuICAgIEZpbHRlcltGaWx0ZXJbXCJOZWFyZXN0XCJdID0gOTcyOF0gPSBcIk5lYXJlc3RcIjtcbiAgICBGaWx0ZXJbRmlsdGVyW1wiTGluZWFyXCJdID0gOTcyOV0gPSBcIkxpbmVhclwiO1xuICAgIEZpbHRlcltGaWx0ZXJbXCJOZWFyZXN0TWlwbWFwTmVhcmVzdFwiXSA9IDk5ODRdID0gXCJOZWFyZXN0TWlwbWFwTmVhcmVzdFwiO1xuICAgIEZpbHRlcltGaWx0ZXJbXCJMaW5lYXJNaXBtYXBOZWFyZXN0XCJdID0gOTk4NV0gPSBcIkxpbmVhck1pcG1hcE5lYXJlc3RcIjtcbiAgICBGaWx0ZXJbRmlsdGVyW1wiTmVhcmVzdE1pcG1hcExpbmVhclwiXSA9IDk5ODZdID0gXCJOZWFyZXN0TWlwbWFwTGluZWFyXCI7XG4gICAgRmlsdGVyW0ZpbHRlcltcIkxpbmVhck1pcG1hcExpbmVhclwiXSA9IDk5ODddID0gXCJMaW5lYXJNaXBtYXBMaW5lYXJcIjtcbn0pKEZpbHRlciB8fCAoRmlsdGVyID0ge30pKTtcbmV4cG9ydCB2YXIgV3JhcDtcbihmdW5jdGlvbiAoV3JhcCkge1xuICAgIFdyYXBbV3JhcFtcIkNsYW1wVG9FZGdlXCJdID0gMzMwNzFdID0gXCJDbGFtcFRvRWRnZVwiO1xuICAgIFdyYXBbV3JhcFtcIk1pcnJvcmVkUmVwZWF0XCJdID0gMzM2NDhdID0gXCJNaXJyb3JlZFJlcGVhdFwiO1xuICAgIFdyYXBbV3JhcFtcIlJlcGVhdFwiXSA9IDEwNDk3XSA9IFwiUmVwZWF0XCI7XG59KShXcmFwIHx8IChXcmFwID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsdGYtMi4wLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/gltf-2.0.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities.js":
/*!************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CAPPED_DEVICE_PIXEL_RATIO: () => (/* binding */ CAPPED_DEVICE_PIXEL_RATIO),\n/* harmony export */   assertIsArCandidate: () => (/* binding */ assertIsArCandidate),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   deserializeUrl: () => (/* binding */ deserializeUrl),\n/* harmony export */   getFirstMapKey: () => (/* binding */ getFirstMapKey),\n/* harmony export */   isDebugMode: () => (/* binding */ isDebugMode),\n/* harmony export */   resolveDpr: () => (/* binding */ resolveDpr),\n/* harmony export */   step: () => (/* binding */ step),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   timePasses: () => (/* binding */ timePasses),\n/* harmony export */   toFullUrl: () => (/* binding */ toFullUrl),\n/* harmony export */   waitForEvent: () => (/* binding */ waitForEvent)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/constants.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst deserializeUrl = (url) => (!!url && url !== 'null') ? toFullUrl(url) : null;\nconst assertIsArCandidate = () => {\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_0__.IS_WEBXR_AR_CANDIDATE) {\n        return;\n    }\n    const missingApis = [];\n    if (!_constants_js__WEBPACK_IMPORTED_MODULE_0__.HAS_WEBXR_DEVICE_API) {\n        missingApis.push('WebXR Device API');\n    }\n    if (!_constants_js__WEBPACK_IMPORTED_MODULE_0__.HAS_WEBXR_HIT_TEST_API) {\n        missingApis.push('WebXR Hit Test API');\n    }\n    throw new Error(`The following APIs are required for AR, but are missing in this browser: ${missingApis.join(', ')}`);\n};\n/**\n * Converts a partial URL string to a fully qualified URL string.\n *\n * @param {String} url\n * @return {String}\n */\nconst toFullUrl = (partialUrl) => {\n    const url = new URL(partialUrl, window.location.toString());\n    return url.toString();\n};\n/**\n * Returns a throttled version of a given function that is only invoked at most\n * once within a given threshold of time in milliseconds.\n *\n * The throttled version of the function has a \"flush\" property that resets the\n * threshold for cases when immediate invocation is desired.\n */\nconst throttle = (fn, ms) => {\n    let timer = null;\n    const throttled = (...args) => {\n        if (timer != null) {\n            return;\n        }\n        fn(...args);\n        timer = self.setTimeout(() => timer = null, ms);\n    };\n    throttled.flush = () => {\n        if (timer != null) {\n            self.clearTimeout(timer);\n            timer = null;\n        }\n    };\n    return throttled;\n};\nconst debounce = (fn, ms) => {\n    let timer = null;\n    return (...args) => {\n        if (timer != null) {\n            self.clearTimeout(timer);\n        }\n        timer = self.setTimeout(() => {\n            timer = null;\n            fn(...args);\n        }, ms);\n    };\n};\n/**\n * @param {Number} edge\n * @param {Number} value\n * @return {Number} 0 if value is less than edge, otherwise 1\n */\nconst step = (edge, value) => {\n    return value < edge ? 0 : 1;\n};\n/**\n * @param {Number} value\n * @param {Number} lowerLimit\n * @param {Number} upperLimit\n * @return {Number} value clamped within lowerLimit..upperLimit\n */\nconst clamp = (value, lowerLimit, upperLimit) => Math.max(lowerLimit, Math.min(upperLimit, value));\n// The DPR we use for a \"capped\" scenario (see resolveDpr below):\nconst CAPPED_DEVICE_PIXEL_RATIO = 1;\n/**\n * This helper analyzes the layout of the current page to decide if we should\n * use the natural device pixel ratio, or a capped value.\n *\n * We cap DPR if there is no meta viewport (suggesting that user is not\n * consciously specifying how to scale the viewport relative to the device\n * screen size).\n *\n * The rationale is that this condition typically leads to a pathological\n * outcome on mobile devices. When the window dimensions are scaled up on a\n * device with a high DPR, we create a canvas that is much larger than\n * appropriate to accommodate for the pixel density if we naively use the\n * reported DPR.\n *\n * This value needs to be measured in real time, as device pixel ratio can\n * change over time (e.g., when a user zooms the page). Also, in some cases\n * (such as Firefox on Android), the window's innerWidth is initially reported\n * as the same as the screen's availWidth but changes later.\n *\n * A user who specifies a meta viewport, thereby consciously creating scaling\n * conditions where <model-viewer> is slow, will be encouraged to live their\n * best life.\n */\nconst resolveDpr = (() => {\n    // If true, implies that the user is conscious of the viewport scaling\n    // relative to the device screen size.\n    const HAS_META_VIEWPORT_TAG = (() => {\n        var _a;\n        // Search result pages sometimes do not include a meta viewport tag even\n        // though they are certainly modern and work properly with devicePixelRatio.\n        if ((_a = document.documentElement.getAttribute('itemtype')) === null || _a === void 0 ? void 0 : _a.includes('schema.org/SearchResultsPage')) {\n            return true;\n        }\n        const metas = document.head != null ?\n            Array.from(document.head.querySelectorAll('meta')) :\n            [];\n        for (const meta of metas) {\n            if (meta.name === 'viewport') {\n                return true;\n            }\n        }\n        return false;\n    })();\n    if (!HAS_META_VIEWPORT_TAG) {\n        console.warn('No <meta name=\"viewport\"> detected; <model-viewer> will cap pixel density at 1.');\n    }\n    return () => HAS_META_VIEWPORT_TAG ? window.devicePixelRatio :\n        CAPPED_DEVICE_PIXEL_RATIO;\n})();\n/**\n * Debug mode is enabled when one of the two following conditions is true:\n *\n *  1. A 'model-viewer-debug-mode' query parameter is present in the current\n *     search string\n *  2. There is a global object ModelViewerElement with a debugMode property set\n *     to true\n */\nconst isDebugMode = (() => {\n    const debugQueryParameterName = 'model-viewer-debug-mode';\n    const debugQueryParameter = new RegExp(`[?&]${debugQueryParameterName}(&|$)`);\n    return () => (self.ModelViewerElement &&\n        self.ModelViewerElement.debugMode) ||\n        (self.location && self.location.search &&\n            self.location.search.match(debugQueryParameter));\n})();\n/**\n * Returns the first key in a Map in iteration order.\n *\n * NOTE(cdata): This is necessary because IE11 does not implement iterator\n * methods of Map, and polymer-build does not polyfill these methods for\n * compatibility and performance reasons. This helper proposes that it is\n * a reasonable compromise to sacrifice a very small amount of runtime\n * performance in IE11 for the sake of code clarity.\n */\nconst getFirstMapKey = (map) => {\n    if (map.keys != null) {\n        return map.keys().next().value || null;\n    }\n    let firstKey = null;\n    try {\n        map.forEach((_value, key, _map) => {\n            firstKey = key;\n            // Stop iterating the Map with forEach:\n            throw new Error();\n        });\n    }\n    catch (_error) {\n    }\n    return firstKey;\n};\nconst timePasses = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n/**\n * @param {EventTarget|EventDispatcher} target\n * @param {string} eventName\n * @param {?Function} predicate\n */\nconst waitForEvent = (target, eventName, predicate = null) => new Promise(resolve => {\n    function handler(event) {\n        if (!predicate || predicate(event)) {\n            resolve(event);\n            target.removeEventListener(eventName, handler);\n        }\n    }\n    target.addEventListener(eventName, handler);\n});\n//# sourceMappingURL=utilities.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/animation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/animation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   easeInOutQuad: () => (/* binding */ easeInOutQuad),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   sequence: () => (/* binding */ sequence),\n/* harmony export */   timeline: () => (/* binding */ timeline)\n/* harmony export */ });\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Adapted from https://gist.github.com/gre/1650294\nconst easeInOutQuad = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n/**\n * Creates a TimingFunction that uses a given ease to interpolate between\n * two configured number values.\n */\nconst interpolate = (start, end, ease = easeInOutQuad) => (time) => start + (end - start) * ease(time);\n/**\n * Creates a TimingFunction that interpolates through a weighted list\n * of other TimingFunctions (\"tracks\"). Tracks are interpolated in order, and\n * allocated a percentage of the total time based on their relative weight.\n */\nconst sequence = (tracks, weights) => {\n    const cumulativeSum = ((sum) => (value) => sum += value);\n    const times = weights.map(cumulativeSum(0));\n    return (time) => {\n        time = (0,_utilities__WEBPACK_IMPORTED_MODULE_0__.clamp)(time, 0, 1);\n        time *= times[times.length - 1];\n        const i = times.findIndex((val) => val >= time);\n        const start = i < 1 ? 0 : times[i - 1];\n        const end = times[i];\n        return tracks[i]((time - start) / (end - start));\n    };\n};\n/**\n * Creates a \"timeline\" TimingFunction out of an initial value and a series of\n * Keyframes. The timeline function accepts value from 0-1 and returns the\n * current value based on keyframe interpolation across the total number of\n * frames. Frames are only used to indicate the relative length of each keyframe\n * transition, so interpolated values will be computed for fractional frames.\n */\nconst timeline = (path) => {\n    const tracks = [];\n    const weights = [];\n    let lastValue = path.initialValue;\n    for (let i = 0; i < path.keyframes.length; ++i) {\n        const keyframe = path.keyframes[i];\n        const { value, frames } = keyframe;\n        const ease = keyframe.ease || easeInOutQuad;\n        const track = interpolate(lastValue, value, ease);\n        tracks.push(track);\n        weights.push(frames);\n        lastValue = value;\n    }\n    return sequence(tracks, weights);\n};\n//# sourceMappingURL=animation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9hbmltYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ3JDO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpREFBSztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMkJBQTJCO0FBQy9DO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZnQtbWludGluZy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdXRpbGl0aWVzL2FuaW1hdGlvbi5qcz85MGVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vdXRpbGl0aWVzJztcbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9ncmUvMTY1MDI5NFxuZXhwb3J0IGNvbnN0IGVhc2VJbk91dFF1YWQgPSAodCkgPT4gdCA8IC41ID8gMiAqIHQgKiB0IDogLTEgKyAoNCAtIDIgKiB0KSAqIHQ7XG4vKipcbiAqIENyZWF0ZXMgYSBUaW1pbmdGdW5jdGlvbiB0aGF0IHVzZXMgYSBnaXZlbiBlYXNlIHRvIGludGVycG9sYXRlIGJldHdlZW5cbiAqIHR3byBjb25maWd1cmVkIG51bWJlciB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBpbnRlcnBvbGF0ZSA9IChzdGFydCwgZW5kLCBlYXNlID0gZWFzZUluT3V0UXVhZCkgPT4gKHRpbWUpID0+IHN0YXJ0ICsgKGVuZCAtIHN0YXJ0KSAqIGVhc2UodGltZSk7XG4vKipcbiAqIENyZWF0ZXMgYSBUaW1pbmdGdW5jdGlvbiB0aGF0IGludGVycG9sYXRlcyB0aHJvdWdoIGEgd2VpZ2h0ZWQgbGlzdFxuICogb2Ygb3RoZXIgVGltaW5nRnVuY3Rpb25zIChcInRyYWNrc1wiKS4gVHJhY2tzIGFyZSBpbnRlcnBvbGF0ZWQgaW4gb3JkZXIsIGFuZFxuICogYWxsb2NhdGVkIGEgcGVyY2VudGFnZSBvZiB0aGUgdG90YWwgdGltZSBiYXNlZCBvbiB0aGVpciByZWxhdGl2ZSB3ZWlnaHQuXG4gKi9cbmV4cG9ydCBjb25zdCBzZXF1ZW5jZSA9ICh0cmFja3MsIHdlaWdodHMpID0+IHtcbiAgICBjb25zdCBjdW11bGF0aXZlU3VtID0gKChzdW0pID0+ICh2YWx1ZSkgPT4gc3VtICs9IHZhbHVlKTtcbiAgICBjb25zdCB0aW1lcyA9IHdlaWdodHMubWFwKGN1bXVsYXRpdmVTdW0oMCkpO1xuICAgIHJldHVybiAodGltZSkgPT4ge1xuICAgICAgICB0aW1lID0gY2xhbXAodGltZSwgMCwgMSk7XG4gICAgICAgIHRpbWUgKj0gdGltZXNbdGltZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IGkgPSB0aW1lcy5maW5kSW5kZXgoKHZhbCkgPT4gdmFsID49IHRpbWUpO1xuICAgICAgICBjb25zdCBzdGFydCA9IGkgPCAxID8gMCA6IHRpbWVzW2kgLSAxXTtcbiAgICAgICAgY29uc3QgZW5kID0gdGltZXNbaV07XG4gICAgICAgIHJldHVybiB0cmFja3NbaV0oKHRpbWUgLSBzdGFydCkgLyAoZW5kIC0gc3RhcnQpKTtcbiAgICB9O1xufTtcbi8qKlxuICogQ3JlYXRlcyBhIFwidGltZWxpbmVcIiBUaW1pbmdGdW5jdGlvbiBvdXQgb2YgYW4gaW5pdGlhbCB2YWx1ZSBhbmQgYSBzZXJpZXMgb2ZcbiAqIEtleWZyYW1lcy4gVGhlIHRpbWVsaW5lIGZ1bmN0aW9uIGFjY2VwdHMgdmFsdWUgZnJvbSAwLTEgYW5kIHJldHVybnMgdGhlXG4gKiBjdXJyZW50IHZhbHVlIGJhc2VkIG9uIGtleWZyYW1lIGludGVycG9sYXRpb24gYWNyb3NzIHRoZSB0b3RhbCBudW1iZXIgb2ZcbiAqIGZyYW1lcy4gRnJhbWVzIGFyZSBvbmx5IHVzZWQgdG8gaW5kaWNhdGUgdGhlIHJlbGF0aXZlIGxlbmd0aCBvZiBlYWNoIGtleWZyYW1lXG4gKiB0cmFuc2l0aW9uLCBzbyBpbnRlcnBvbGF0ZWQgdmFsdWVzIHdpbGwgYmUgY29tcHV0ZWQgZm9yIGZyYWN0aW9uYWwgZnJhbWVzLlxuICovXG5leHBvcnQgY29uc3QgdGltZWxpbmUgPSAocGF0aCkgPT4ge1xuICAgIGNvbnN0IHRyYWNrcyA9IFtdO1xuICAgIGNvbnN0IHdlaWdodHMgPSBbXTtcbiAgICBsZXQgbGFzdFZhbHVlID0gcGF0aC5pbml0aWFsVmFsdWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmtleWZyYW1lcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBrZXlmcmFtZSA9IHBhdGgua2V5ZnJhbWVzW2ldO1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBmcmFtZXMgfSA9IGtleWZyYW1lO1xuICAgICAgICBjb25zdCBlYXNlID0ga2V5ZnJhbWUuZWFzZSB8fCBlYXNlSW5PdXRRdWFkO1xuICAgICAgICBjb25zdCB0cmFjayA9IGludGVycG9sYXRlKGxhc3RWYWx1ZSwgdmFsdWUsIGVhc2UpO1xuICAgICAgICB0cmFja3MucHVzaCh0cmFjayk7XG4gICAgICAgIHdlaWdodHMucHVzaChmcmFtZXMpO1xuICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcXVlbmNlKHRyYWNrcywgd2VpZ2h0cyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/animation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/cache-eviction-policy.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/cache-eviction-policy.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheEvictionPolicy: () => (/* binding */ CacheEvictionPolicy)\n/* harmony export */ });\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\nconst $retainerCount = Symbol('retainerCount');\nconst $recentlyUsed = Symbol('recentlyUsed');\nconst $evict = Symbol('evict');\nconst $evictionThreshold = Symbol('evictionThreshold');\nconst $cache = Symbol('cache');\n/**\n * The CacheEvictionPolicy manages the lifecycle for items in a cache,\n * evicting any items outside some threshold bounds in \"recently used\" order,\n * if they are evictable.\n *\n * Items are considered cached as they are retained. When all retainers\n * of an item release it, that item is considered evictable.\n */\nclass CacheEvictionPolicy {\n    constructor(cache, evictionThreshold = 5) {\n        this[_a] = new Map();\n        this[_b] = [];\n        this[$cache] = cache;\n        this[$evictionThreshold] = evictionThreshold;\n    }\n    /**\n     * The eviction threshold is the maximum number of items to hold\n     * in cache indefinitely. Items within the threshold (in recently\n     * used order) will continue to be cached even if they have zero\n     * retainers.\n     */\n    set evictionThreshold(value) {\n        this[$evictionThreshold] = value;\n        this[$evict]();\n    }\n    get evictionThreshold() {\n        return this[$evictionThreshold];\n    }\n    /**\n     * A reference to the cache that operates under this policy\n     */\n    get cache() {\n        return this[$cache];\n    }\n    /**\n     * Given an item key, returns the number of retainers of that item\n     */\n    retainerCount(key) {\n        return this[$retainerCount].get(key) || 0;\n    }\n    /**\n     * Resets the internal tracking of cache item retainers. Use only in cases\n     * where it is certain that all retained cache items have been accounted for!\n     */\n    reset() {\n        this[$retainerCount].clear();\n        this[$recentlyUsed] = [];\n    }\n    /**\n     * Mark a given cache item as retained, where the item is represented\n     * by its key. An item can have any number of retainers.\n     */\n    retain(key) {\n        if (!this[$retainerCount].has(key)) {\n            this[$retainerCount].set(key, 0);\n        }\n        this[$retainerCount].set(key, this[$retainerCount].get(key) + 1);\n        const recentlyUsedIndex = this[$recentlyUsed].indexOf(key);\n        if (recentlyUsedIndex !== -1) {\n            this[$recentlyUsed].splice(recentlyUsedIndex, 1);\n        }\n        this[$recentlyUsed].unshift(key);\n        // Evict, in case retaining a new item pushed an evictable item beyond the\n        // eviction threshold\n        this[$evict]();\n    }\n    /**\n     * Mark a given cache item as released by one of its retainers, where the item\n     * is represented by its key. When all retainers of an item have released it,\n     * the item is considered evictable.\n     */\n    release(key) {\n        if (this[$retainerCount].has(key)) {\n            this[$retainerCount].set(key, Math.max(this[$retainerCount].get(key) - 1, 0));\n        }\n        this[$evict]();\n    }\n    [(_a = $retainerCount, _b = $recentlyUsed, $evict)]() {\n        if (this[$recentlyUsed].length < this[$evictionThreshold]) {\n            return;\n        }\n        for (let i = this[$recentlyUsed].length - 1; i >= this[$evictionThreshold]; --i) {\n            const key = this[$recentlyUsed][i];\n            const retainerCount = this[$retainerCount].get(key);\n            if (retainerCount === 0) {\n                this[$cache].delete(key);\n                this[$recentlyUsed].splice(i, 1);\n            }\n        }\n    }\n}\n//# sourceMappingURL=cache-eviction-policy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9jYWNoZS1ldmljdGlvbi1wb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsK0JBQStCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9jYWNoZS1ldmljdGlvbi1wb2xpY3kuanM/OGUyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX2EsIF9iO1xuY29uc3QgJHJldGFpbmVyQ291bnQgPSBTeW1ib2woJ3JldGFpbmVyQ291bnQnKTtcbmNvbnN0ICRyZWNlbnRseVVzZWQgPSBTeW1ib2woJ3JlY2VudGx5VXNlZCcpO1xuY29uc3QgJGV2aWN0ID0gU3ltYm9sKCdldmljdCcpO1xuY29uc3QgJGV2aWN0aW9uVGhyZXNob2xkID0gU3ltYm9sKCdldmljdGlvblRocmVzaG9sZCcpO1xuY29uc3QgJGNhY2hlID0gU3ltYm9sKCdjYWNoZScpO1xuLyoqXG4gKiBUaGUgQ2FjaGVFdmljdGlvblBvbGljeSBtYW5hZ2VzIHRoZSBsaWZlY3ljbGUgZm9yIGl0ZW1zIGluIGEgY2FjaGUsXG4gKiBldmljdGluZyBhbnkgaXRlbXMgb3V0c2lkZSBzb21lIHRocmVzaG9sZCBib3VuZHMgaW4gXCJyZWNlbnRseSB1c2VkXCIgb3JkZXIsXG4gKiBpZiB0aGV5IGFyZSBldmljdGFibGUuXG4gKlxuICogSXRlbXMgYXJlIGNvbnNpZGVyZWQgY2FjaGVkIGFzIHRoZXkgYXJlIHJldGFpbmVkLiBXaGVuIGFsbCByZXRhaW5lcnNcbiAqIG9mIGFuIGl0ZW0gcmVsZWFzZSBpdCwgdGhhdCBpdGVtIGlzIGNvbnNpZGVyZWQgZXZpY3RhYmxlLlxuICovXG5leHBvcnQgY2xhc3MgQ2FjaGVFdmljdGlvblBvbGljeSB7XG4gICAgY29uc3RydWN0b3IoY2FjaGUsIGV2aWN0aW9uVGhyZXNob2xkID0gNSkge1xuICAgICAgICB0aGlzW19hXSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpc1tfYl0gPSBbXTtcbiAgICAgICAgdGhpc1skY2FjaGVdID0gY2FjaGU7XG4gICAgICAgIHRoaXNbJGV2aWN0aW9uVGhyZXNob2xkXSA9IGV2aWN0aW9uVGhyZXNob2xkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZXZpY3Rpb24gdGhyZXNob2xkIGlzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0byBob2xkXG4gICAgICogaW4gY2FjaGUgaW5kZWZpbml0ZWx5LiBJdGVtcyB3aXRoaW4gdGhlIHRocmVzaG9sZCAoaW4gcmVjZW50bHlcbiAgICAgKiB1c2VkIG9yZGVyKSB3aWxsIGNvbnRpbnVlIHRvIGJlIGNhY2hlZCBldmVuIGlmIHRoZXkgaGF2ZSB6ZXJvXG4gICAgICogcmV0YWluZXJzLlxuICAgICAqL1xuICAgIHNldCBldmljdGlvblRocmVzaG9sZCh2YWx1ZSkge1xuICAgICAgICB0aGlzWyRldmljdGlvblRocmVzaG9sZF0gPSB2YWx1ZTtcbiAgICAgICAgdGhpc1skZXZpY3RdKCk7XG4gICAgfVxuICAgIGdldCBldmljdGlvblRocmVzaG9sZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJGV2aWN0aW9uVGhyZXNob2xkXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGNhY2hlIHRoYXQgb3BlcmF0ZXMgdW5kZXIgdGhpcyBwb2xpY3lcbiAgICAgKi9cbiAgICBnZXQgY2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRjYWNoZV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGFuIGl0ZW0ga2V5LCByZXR1cm5zIHRoZSBudW1iZXIgb2YgcmV0YWluZXJzIG9mIHRoYXQgaXRlbVxuICAgICAqL1xuICAgIHJldGFpbmVyQ291bnQoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRyZXRhaW5lckNvdW50XS5nZXQoa2V5KSB8fCAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGludGVybmFsIHRyYWNraW5nIG9mIGNhY2hlIGl0ZW0gcmV0YWluZXJzLiBVc2Ugb25seSBpbiBjYXNlc1xuICAgICAqIHdoZXJlIGl0IGlzIGNlcnRhaW4gdGhhdCBhbGwgcmV0YWluZWQgY2FjaGUgaXRlbXMgaGF2ZSBiZWVuIGFjY291bnRlZCBmb3IhXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXNbJHJldGFpbmVyQ291bnRdLmNsZWFyKCk7XG4gICAgICAgIHRoaXNbJHJlY2VudGx5VXNlZF0gPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFyayBhIGdpdmVuIGNhY2hlIGl0ZW0gYXMgcmV0YWluZWQsIHdoZXJlIHRoZSBpdGVtIGlzIHJlcHJlc2VudGVkXG4gICAgICogYnkgaXRzIGtleS4gQW4gaXRlbSBjYW4gaGF2ZSBhbnkgbnVtYmVyIG9mIHJldGFpbmVycy5cbiAgICAgKi9cbiAgICByZXRhaW4oa2V5KSB7XG4gICAgICAgIGlmICghdGhpc1skcmV0YWluZXJDb3VudF0uaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXNbJHJldGFpbmVyQ291bnRdLnNldChrZXksIDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbJHJldGFpbmVyQ291bnRdLnNldChrZXksIHRoaXNbJHJldGFpbmVyQ291bnRdLmdldChrZXkpICsgMSk7XG4gICAgICAgIGNvbnN0IHJlY2VudGx5VXNlZEluZGV4ID0gdGhpc1skcmVjZW50bHlVc2VkXS5pbmRleE9mKGtleSk7XG4gICAgICAgIGlmIChyZWNlbnRseVVzZWRJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXNbJHJlY2VudGx5VXNlZF0uc3BsaWNlKHJlY2VudGx5VXNlZEluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzWyRyZWNlbnRseVVzZWRdLnVuc2hpZnQoa2V5KTtcbiAgICAgICAgLy8gRXZpY3QsIGluIGNhc2UgcmV0YWluaW5nIGEgbmV3IGl0ZW0gcHVzaGVkIGFuIGV2aWN0YWJsZSBpdGVtIGJleW9uZCB0aGVcbiAgICAgICAgLy8gZXZpY3Rpb24gdGhyZXNob2xkXG4gICAgICAgIHRoaXNbJGV2aWN0XSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJrIGEgZ2l2ZW4gY2FjaGUgaXRlbSBhcyByZWxlYXNlZCBieSBvbmUgb2YgaXRzIHJldGFpbmVycywgd2hlcmUgdGhlIGl0ZW1cbiAgICAgKiBpcyByZXByZXNlbnRlZCBieSBpdHMga2V5LiBXaGVuIGFsbCByZXRhaW5lcnMgb2YgYW4gaXRlbSBoYXZlIHJlbGVhc2VkIGl0LFxuICAgICAqIHRoZSBpdGVtIGlzIGNvbnNpZGVyZWQgZXZpY3RhYmxlLlxuICAgICAqL1xuICAgIHJlbGVhc2Uoa2V5KSB7XG4gICAgICAgIGlmICh0aGlzWyRyZXRhaW5lckNvdW50XS5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpc1skcmV0YWluZXJDb3VudF0uc2V0KGtleSwgTWF0aC5tYXgodGhpc1skcmV0YWluZXJDb3VudF0uZ2V0KGtleSkgLSAxLCAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1skZXZpY3RdKCk7XG4gICAgfVxuICAgIFsoX2EgPSAkcmV0YWluZXJDb3VudCwgX2IgPSAkcmVjZW50bHlVc2VkLCAkZXZpY3QpXSgpIHtcbiAgICAgICAgaWYgKHRoaXNbJHJlY2VudGx5VXNlZF0ubGVuZ3RoIDwgdGhpc1skZXZpY3Rpb25UaHJlc2hvbGRdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXNbJHJlY2VudGx5VXNlZF0ubGVuZ3RoIC0gMTsgaSA+PSB0aGlzWyRldmljdGlvblRocmVzaG9sZF07IC0taSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpc1skcmVjZW50bHlVc2VkXVtpXTtcbiAgICAgICAgICAgIGNvbnN0IHJldGFpbmVyQ291bnQgPSB0aGlzWyRyZXRhaW5lckNvdW50XS5nZXQoa2V5KTtcbiAgICAgICAgICAgIGlmIChyZXRhaW5lckNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpc1skY2FjaGVdLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIHRoaXNbJHJlY2VudGx5VXNlZF0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUtZXZpY3Rpb24tcG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/cache-eviction-policy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/data-conversion.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/data-conversion.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dataUrlToBlob: () => (/* binding */ dataUrlToBlob)\n/* harmony export */ });\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts a base64 string which represents a data url\n * into a Blob of the same contents.\n */\nconst dataUrlToBlob = async (base64DataUrl) => {\n    return new Promise((resolve, reject) => {\n        const sliceSize = 512;\n        const typeMatch = base64DataUrl.match(/data:(.*);/);\n        if (!typeMatch) {\n            return reject(new Error(`${base64DataUrl} is not a valid data Url`));\n        }\n        const type = typeMatch[1];\n        const base64 = base64DataUrl.replace(/data:image\\/\\w+;base64,/, '');\n        const byteCharacters = atob(base64);\n        const byteArrays = [];\n        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            const slice = byteCharacters.slice(offset, offset + sliceSize);\n            const byteNumbers = new Array(slice.length);\n            for (let i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n            const byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        resolve(new Blob(byteArrays, { type }));\n    });\n};\n//# sourceMappingURL=data-conversion.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9kYXRhLWNvbnZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBLHVDQUF1QyxlQUFlO0FBQ3REO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBLDZCQUE2QixnQ0FBZ0M7QUFDN0Q7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxNQUFNO0FBQzdDLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9kYXRhLWNvbnZlcnNpb24uanM/YWE1YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIENvbnZlcnRzIGEgYmFzZTY0IHN0cmluZyB3aGljaCByZXByZXNlbnRzIGEgZGF0YSB1cmxcbiAqIGludG8gYSBCbG9iIG9mIHRoZSBzYW1lIGNvbnRlbnRzLlxuICovXG5leHBvcnQgY29uc3QgZGF0YVVybFRvQmxvYiA9IGFzeW5jIChiYXNlNjREYXRhVXJsKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3Qgc2xpY2VTaXplID0gNTEyO1xuICAgICAgICBjb25zdCB0eXBlTWF0Y2ggPSBiYXNlNjREYXRhVXJsLm1hdGNoKC9kYXRhOiguKik7Lyk7XG4gICAgICAgIGlmICghdHlwZU1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgJHtiYXNlNjREYXRhVXJsfSBpcyBub3QgYSB2YWxpZCBkYXRhIFVybGApKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlID0gdHlwZU1hdGNoWzFdO1xuICAgICAgICBjb25zdCBiYXNlNjQgPSBiYXNlNjREYXRhVXJsLnJlcGxhY2UoL2RhdGE6aW1hZ2VcXC9cXHcrO2Jhc2U2NCwvLCAnJyk7XG4gICAgICAgIGNvbnN0IGJ5dGVDaGFyYWN0ZXJzID0gYXRvYihiYXNlNjQpO1xuICAgICAgICBjb25zdCBieXRlQXJyYXlzID0gW107XG4gICAgICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IGJ5dGVDaGFyYWN0ZXJzLmxlbmd0aDsgb2Zmc2V0ICs9IHNsaWNlU2l6ZSkge1xuICAgICAgICAgICAgY29uc3Qgc2xpY2UgPSBieXRlQ2hhcmFjdGVycy5zbGljZShvZmZzZXQsIG9mZnNldCArIHNsaWNlU2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBieXRlTnVtYmVycyA9IG5ldyBBcnJheShzbGljZS5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGljZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGJ5dGVOdW1iZXJzW2ldID0gc2xpY2UuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ5dGVOdW1iZXJzKTtcbiAgICAgICAgICAgIGJ5dGVBcnJheXMucHVzaChieXRlQXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUobmV3IEJsb2IoYnl0ZUFycmF5cywgeyB0eXBlIH0pKTtcbiAgICB9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhLWNvbnZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/data-conversion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/focus-visible.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/focus-visible.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FocusVisiblePolyfillMixin: () => (/* binding */ FocusVisiblePolyfillMixin)\n/* harmony export */ });\n/**\n * This mixin function is designed to be applied to a class that inherits\n * from HTMLElement. It makes it easy for a custom element to coordinate with\n * the :focus-visible polyfill.\n *\n * NOTE(cdata): The code here was adapted from an example proposed with the\n * introduction of ShadowDOM support in the :focus-visible polyfill.\n *\n * @see https://github.com/WICG/focus-visible/pull/196\n * @param {Function} SuperClass The base class implementation to decorate with\n * implementation that coordinates with the :focus-visible polyfill\n */\nconst FocusVisiblePolyfillMixin = (SuperClass) => {\n    var _a;\n    const coordinateWithPolyfill = (instance) => {\n        // If there is no shadow root, there is no need to coordinate with\n        // the polyfill. If we already coordinated with the polyfill, we can\n        // skip subsequent invocations:\n        if (instance.shadowRoot == null ||\n            instance.hasAttribute('data-js-focus-visible')) {\n            return () => { };\n        }\n        // The polyfill might already be loaded. If so, we can apply it to\n        // the shadow root immediately:\n        if (self.applyFocusVisiblePolyfill) {\n            self.applyFocusVisiblePolyfill(instance.shadowRoot);\n        }\n        else {\n            const coordinationHandler = () => {\n                self.applyFocusVisiblePolyfill(instance.shadowRoot);\n            };\n            // Otherwise, wait for the polyfill to be loaded lazily. It might\n            // never be loaded, but if it is then we can apply it to the\n            // shadow root at the appropriate time by waiting for the ready\n            // event:\n            self.addEventListener('focus-visible-polyfill-ready', coordinationHandler, { once: true });\n            return () => {\n                self.removeEventListener('focus-visible-polyfill-ready', coordinationHandler);\n            };\n        }\n        return () => { };\n    };\n    const $endPolyfillCoordination = Symbol('endPolyfillCoordination');\n    // IE11 doesn't natively support custom elements or JavaScript class\n    // syntax The mixin implementation assumes that the user will take the\n    // appropriate steps to support both:\n    class FocusVisibleCoordinator extends SuperClass {\n        constructor() {\n            super(...arguments);\n            this[_a] = null;\n        }\n        // Attempt to coordinate with the polyfill when connected to the\n        // document:\n        connectedCallback() {\n            super.connectedCallback && super.connectedCallback();\n            if (this[$endPolyfillCoordination] == null) {\n                this[$endPolyfillCoordination] = coordinateWithPolyfill(this);\n            }\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback && super.disconnectedCallback();\n            // It's important to remove the polyfill event listener when we\n            // disconnect, otherwise we will leak the whole element via window:\n            if (this[$endPolyfillCoordination] != null) {\n                this[$endPolyfillCoordination]();\n                this[$endPolyfillCoordination] = null;\n            }\n        }\n    }\n    _a = $endPolyfillCoordination;\n    ;\n    return FocusVisibleCoordinator;\n};\n//# sourceMappingURL=focus-visible.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9mb2N1cy12aXNpYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUYsWUFBWTtBQUNyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9mb2N1cy12aXNpYmxlLmpzP2NhNzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIG1peGluIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGFwcGxpZWQgdG8gYSBjbGFzcyB0aGF0IGluaGVyaXRzXG4gKiBmcm9tIEhUTUxFbGVtZW50LiBJdCBtYWtlcyBpdCBlYXN5IGZvciBhIGN1c3RvbSBlbGVtZW50IHRvIGNvb3JkaW5hdGUgd2l0aFxuICogdGhlIDpmb2N1cy12aXNpYmxlIHBvbHlmaWxsLlxuICpcbiAqIE5PVEUoY2RhdGEpOiBUaGUgY29kZSBoZXJlIHdhcyBhZGFwdGVkIGZyb20gYW4gZXhhbXBsZSBwcm9wb3NlZCB3aXRoIHRoZVxuICogaW50cm9kdWN0aW9uIG9mIFNoYWRvd0RPTSBzdXBwb3J0IGluIHRoZSA6Zm9jdXMtdmlzaWJsZSBwb2x5ZmlsbC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvcHVsbC8xOTZcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFN1cGVyQ2xhc3MgVGhlIGJhc2UgY2xhc3MgaW1wbGVtZW50YXRpb24gdG8gZGVjb3JhdGUgd2l0aFxuICogaW1wbGVtZW50YXRpb24gdGhhdCBjb29yZGluYXRlcyB3aXRoIHRoZSA6Zm9jdXMtdmlzaWJsZSBwb2x5ZmlsbFxuICovXG5leHBvcnQgY29uc3QgRm9jdXNWaXNpYmxlUG9seWZpbGxNaXhpbiA9IChTdXBlckNsYXNzKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGNvb3JkaW5hdGVXaXRoUG9seWZpbGwgPSAoaW5zdGFuY2UpID0+IHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gc2hhZG93IHJvb3QsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY29vcmRpbmF0ZSB3aXRoXG4gICAgICAgIC8vIHRoZSBwb2x5ZmlsbC4gSWYgd2UgYWxyZWFkeSBjb29yZGluYXRlZCB3aXRoIHRoZSBwb2x5ZmlsbCwgd2UgY2FuXG4gICAgICAgIC8vIHNraXAgc3Vic2VxdWVudCBpbnZvY2F0aW9uczpcbiAgICAgICAgaWYgKGluc3RhbmNlLnNoYWRvd1Jvb3QgPT0gbnVsbCB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuaGFzQXR0cmlidXRlKCdkYXRhLWpzLWZvY3VzLXZpc2libGUnKSkge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHsgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgcG9seWZpbGwgbWlnaHQgYWxyZWFkeSBiZSBsb2FkZWQuIElmIHNvLCB3ZSBjYW4gYXBwbHkgaXQgdG9cbiAgICAgICAgLy8gdGhlIHNoYWRvdyByb290IGltbWVkaWF0ZWx5OlxuICAgICAgICBpZiAoc2VsZi5hcHBseUZvY3VzVmlzaWJsZVBvbHlmaWxsKSB7XG4gICAgICAgICAgICBzZWxmLmFwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGwoaW5zdGFuY2Uuc2hhZG93Um9vdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb29yZGluYXRpb25IYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbChpbnN0YW5jZS5zaGFkb3dSb290KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdhaXQgZm9yIHRoZSBwb2x5ZmlsbCB0byBiZSBsb2FkZWQgbGF6aWx5LiBJdCBtaWdodFxuICAgICAgICAgICAgLy8gbmV2ZXIgYmUgbG9hZGVkLCBidXQgaWYgaXQgaXMgdGhlbiB3ZSBjYW4gYXBwbHkgaXQgdG8gdGhlXG4gICAgICAgICAgICAvLyBzaGFkb3cgcm9vdCBhdCB0aGUgYXBwcm9wcmlhdGUgdGltZSBieSB3YWl0aW5nIGZvciB0aGUgcmVhZHlcbiAgICAgICAgICAgIC8vIGV2ZW50OlxuICAgICAgICAgICAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmb2N1cy12aXNpYmxlLXBvbHlmaWxsLXJlYWR5JywgY29vcmRpbmF0aW9uSGFuZGxlciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzLXZpc2libGUtcG9seWZpbGwtcmVhZHknLCBjb29yZGluYXRpb25IYW5kbGVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHsgfTtcbiAgICB9O1xuICAgIGNvbnN0ICRlbmRQb2x5ZmlsbENvb3JkaW5hdGlvbiA9IFN5bWJvbCgnZW5kUG9seWZpbGxDb29yZGluYXRpb24nKTtcbiAgICAvLyBJRTExIGRvZXNuJ3QgbmF0aXZlbHkgc3VwcG9ydCBjdXN0b20gZWxlbWVudHMgb3IgSmF2YVNjcmlwdCBjbGFzc1xuICAgIC8vIHN5bnRheCBUaGUgbWl4aW4gaW1wbGVtZW50YXRpb24gYXNzdW1lcyB0aGF0IHRoZSB1c2VyIHdpbGwgdGFrZSB0aGVcbiAgICAvLyBhcHByb3ByaWF0ZSBzdGVwcyB0byBzdXBwb3J0IGJvdGg6XG4gICAgY2xhc3MgRm9jdXNWaXNpYmxlQ29vcmRpbmF0b3IgZXh0ZW5kcyBTdXBlckNsYXNzIHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICAgICAgdGhpc1tfYV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEF0dGVtcHQgdG8gY29vcmRpbmF0ZSB3aXRoIHRoZSBwb2x5ZmlsbCB3aGVuIGNvbm5lY3RlZCB0byB0aGVcbiAgICAgICAgLy8gZG9jdW1lbnQ6XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2sgJiYgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIGlmICh0aGlzWyRlbmRQb2x5ZmlsbENvb3JkaW5hdGlvbl0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXNbJGVuZFBvbHlmaWxsQ29vcmRpbmF0aW9uXSA9IGNvb3JkaW5hdGVXaXRoUG9seWZpbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjayAmJiBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICAgICAgLy8gSXQncyBpbXBvcnRhbnQgdG8gcmVtb3ZlIHRoZSBwb2x5ZmlsbCBldmVudCBsaXN0ZW5lciB3aGVuIHdlXG4gICAgICAgICAgICAvLyBkaXNjb25uZWN0LCBvdGhlcndpc2Ugd2Ugd2lsbCBsZWFrIHRoZSB3aG9sZSBlbGVtZW50IHZpYSB3aW5kb3c6XG4gICAgICAgICAgICBpZiAodGhpc1skZW5kUG9seWZpbGxDb29yZGluYXRpb25dICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzWyRlbmRQb2x5ZmlsbENvb3JkaW5hdGlvbl0oKTtcbiAgICAgICAgICAgICAgICB0aGlzWyRlbmRQb2x5ZmlsbENvb3JkaW5hdGlvbl0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9hID0gJGVuZFBvbHlmaWxsQ29vcmRpbmF0aW9uO1xuICAgIDtcbiAgICByZXR1cm4gRm9jdXNWaXNpYmxlQ29vcmRpbmF0b3I7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9jdXMtdmlzaWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/focus-visible.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/progress-tracker.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/progress-tracker.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProgressTracker: () => (/* binding */ ProgressTracker)\n/* harmony export */ });\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * ProgressTracker is an event emitter that helps to track the ongoing progress\n * of many simultaneous actions.\n *\n * ProgressTracker reports progress activity in the form of a progress event.\n * The event.detail.totalProgress value indicates the elapsed progress of all\n * activities being tracked by the ProgressTracker.\n *\n * The value of totalProgress is a number that progresses from 0 to 1. The\n * ProgressTracker allows for the lazy accumulation of tracked actions, so the\n * total progress represents a abstract, non-absolute progress towards the\n * completion of all currently tracked events.\n *\n * When all currently tracked activities are finished, the ProgressTracker\n * emits one final progress event and then resets the list of its currently\n * tracked activities. This means that from an observer's perspective,\n * ongoing activities will accumulate and collectively contribute to the notion\n * of total progress until all currently tracked ongoing activities have\n * completed.\n */\nclass ProgressTracker extends EventTarget {\n    constructor() {\n        super(...arguments);\n        this.ongoingActivities = new Set();\n        this.totalProgress = 0;\n    }\n    /**\n     * The total number of activities currently being tracked.\n     */\n    get ongoingActivityCount() {\n        return this.ongoingActivities.size;\n    }\n    /**\n     * Registers a new activity to be tracked by the progress tracker. The method\n     * returns a special callback that should be invoked whenever new progress is\n     * ready to be reported. The progress should be reported as a value between 0\n     * and 1, where 0 would represent the beginning of the action and 1 would\n     * represent its completion.\n     *\n     * There is no built-in notion of a time-out for ongoing activities, so once\n     * an ongoing activity is begun, it is up to the consumer of this API to\n     * update the progress until that activity is no longer ongoing.\n     *\n     * Progress is only allowed to move forward for any given activity. If a lower\n     * progress is reported than the previously reported progress, it will be\n     * ignored.\n     */\n    beginActivity() {\n        const activity = { progress: 0, completed: false };\n        this.ongoingActivities.add(activity);\n        if (this.ongoingActivityCount === 1) {\n            // Announce the first progress event (which should always be 0 / 1\n            // total progress):\n            this.announceTotalProgress(activity, 0);\n        }\n        return (progress) => {\n            let nextProgress;\n            nextProgress = Math.max((0,_utilities_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(progress, 0, 1), activity.progress);\n            if (nextProgress !== activity.progress) {\n                this.announceTotalProgress(activity, nextProgress);\n            }\n            return activity.progress;\n        };\n    }\n    announceTotalProgress(updatedActivity, nextProgress) {\n        let progressLeft = 0;\n        let completedActivities = 0;\n        if (nextProgress == 1.0)\n            updatedActivity.completed = true;\n        for (const activity of this.ongoingActivities) {\n            const { progress } = activity;\n            progressLeft += 1.0 - progress;\n            if (activity.completed === true) {\n                completedActivities++;\n            }\n        }\n        const lastProgress = updatedActivity.progress;\n        updatedActivity.progress = nextProgress;\n        // Advance the total progress by the fraction of total remaining progress\n        // due to this activity.\n        this.totalProgress += (nextProgress - lastProgress) *\n            (1.0 - this.totalProgress) / progressLeft;\n        const totalProgress = completedActivities === this.ongoingActivityCount ?\n            1.0 :\n            this.totalProgress;\n        this.dispatchEvent(new CustomEvent('progress', { detail: { totalProgress } }));\n        if (completedActivities === this.ongoingActivityCount) {\n            this.totalProgress = 0.0;\n            this.ongoingActivities.clear();\n        }\n    }\n}\n//# sourceMappingURL=progress-tracker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9wcm9ncmVzcy10cmFja2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxvREFBSztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFVBQVUsaUJBQWlCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZ0LW1pbnRpbmctdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9wcm9ncmVzcy10cmFja2VyLmpzPzZiZGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnO1xuLyoqXG4gKiBQcm9ncmVzc1RyYWNrZXIgaXMgYW4gZXZlbnQgZW1pdHRlciB0aGF0IGhlbHBzIHRvIHRyYWNrIHRoZSBvbmdvaW5nIHByb2dyZXNzXG4gKiBvZiBtYW55IHNpbXVsdGFuZW91cyBhY3Rpb25zLlxuICpcbiAqIFByb2dyZXNzVHJhY2tlciByZXBvcnRzIHByb2dyZXNzIGFjdGl2aXR5IGluIHRoZSBmb3JtIG9mIGEgcHJvZ3Jlc3MgZXZlbnQuXG4gKiBUaGUgZXZlbnQuZGV0YWlsLnRvdGFsUHJvZ3Jlc3MgdmFsdWUgaW5kaWNhdGVzIHRoZSBlbGFwc2VkIHByb2dyZXNzIG9mIGFsbFxuICogYWN0aXZpdGllcyBiZWluZyB0cmFja2VkIGJ5IHRoZSBQcm9ncmVzc1RyYWNrZXIuXG4gKlxuICogVGhlIHZhbHVlIG9mIHRvdGFsUHJvZ3Jlc3MgaXMgYSBudW1iZXIgdGhhdCBwcm9ncmVzc2VzIGZyb20gMCB0byAxLiBUaGVcbiAqIFByb2dyZXNzVHJhY2tlciBhbGxvd3MgZm9yIHRoZSBsYXp5IGFjY3VtdWxhdGlvbiBvZiB0cmFja2VkIGFjdGlvbnMsIHNvIHRoZVxuICogdG90YWwgcHJvZ3Jlc3MgcmVwcmVzZW50cyBhIGFic3RyYWN0LCBub24tYWJzb2x1dGUgcHJvZ3Jlc3MgdG93YXJkcyB0aGVcbiAqIGNvbXBsZXRpb24gb2YgYWxsIGN1cnJlbnRseSB0cmFja2VkIGV2ZW50cy5cbiAqXG4gKiBXaGVuIGFsbCBjdXJyZW50bHkgdHJhY2tlZCBhY3Rpdml0aWVzIGFyZSBmaW5pc2hlZCwgdGhlIFByb2dyZXNzVHJhY2tlclxuICogZW1pdHMgb25lIGZpbmFsIHByb2dyZXNzIGV2ZW50IGFuZCB0aGVuIHJlc2V0cyB0aGUgbGlzdCBvZiBpdHMgY3VycmVudGx5XG4gKiB0cmFja2VkIGFjdGl2aXRpZXMuIFRoaXMgbWVhbnMgdGhhdCBmcm9tIGFuIG9ic2VydmVyJ3MgcGVyc3BlY3RpdmUsXG4gKiBvbmdvaW5nIGFjdGl2aXRpZXMgd2lsbCBhY2N1bXVsYXRlIGFuZCBjb2xsZWN0aXZlbHkgY29udHJpYnV0ZSB0byB0aGUgbm90aW9uXG4gKiBvZiB0b3RhbCBwcm9ncmVzcyB1bnRpbCBhbGwgY3VycmVudGx5IHRyYWNrZWQgb25nb2luZyBhY3Rpdml0aWVzIGhhdmVcbiAqIGNvbXBsZXRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFByb2dyZXNzVHJhY2tlciBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5vbmdvaW5nQWN0aXZpdGllcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy50b3RhbFByb2dyZXNzID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiBhY3Rpdml0aWVzIGN1cnJlbnRseSBiZWluZyB0cmFja2VkLlxuICAgICAqL1xuICAgIGdldCBvbmdvaW5nQWN0aXZpdHlDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub25nb2luZ0FjdGl2aXRpZXMuc2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgbmV3IGFjdGl2aXR5IHRvIGJlIHRyYWNrZWQgYnkgdGhlIHByb2dyZXNzIHRyYWNrZXIuIFRoZSBtZXRob2RcbiAgICAgKiByZXR1cm5zIGEgc3BlY2lhbCBjYWxsYmFjayB0aGF0IHNob3VsZCBiZSBpbnZva2VkIHdoZW5ldmVyIG5ldyBwcm9ncmVzcyBpc1xuICAgICAqIHJlYWR5IHRvIGJlIHJlcG9ydGVkLiBUaGUgcHJvZ3Jlc3Mgc2hvdWxkIGJlIHJlcG9ydGVkIGFzIGEgdmFsdWUgYmV0d2VlbiAwXG4gICAgICogYW5kIDEsIHdoZXJlIDAgd291bGQgcmVwcmVzZW50IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFjdGlvbiBhbmQgMSB3b3VsZFxuICAgICAqIHJlcHJlc2VudCBpdHMgY29tcGxldGlvbi5cbiAgICAgKlxuICAgICAqIFRoZXJlIGlzIG5vIGJ1aWx0LWluIG5vdGlvbiBvZiBhIHRpbWUtb3V0IGZvciBvbmdvaW5nIGFjdGl2aXRpZXMsIHNvIG9uY2VcbiAgICAgKiBhbiBvbmdvaW5nIGFjdGl2aXR5IGlzIGJlZ3VuLCBpdCBpcyB1cCB0byB0aGUgY29uc3VtZXIgb2YgdGhpcyBBUEkgdG9cbiAgICAgKiB1cGRhdGUgdGhlIHByb2dyZXNzIHVudGlsIHRoYXQgYWN0aXZpdHkgaXMgbm8gbG9uZ2VyIG9uZ29pbmcuXG4gICAgICpcbiAgICAgKiBQcm9ncmVzcyBpcyBvbmx5IGFsbG93ZWQgdG8gbW92ZSBmb3J3YXJkIGZvciBhbnkgZ2l2ZW4gYWN0aXZpdHkuIElmIGEgbG93ZXJcbiAgICAgKiBwcm9ncmVzcyBpcyByZXBvcnRlZCB0aGFuIHRoZSBwcmV2aW91c2x5IHJlcG9ydGVkIHByb2dyZXNzLCBpdCB3aWxsIGJlXG4gICAgICogaWdub3JlZC5cbiAgICAgKi9cbiAgICBiZWdpbkFjdGl2aXR5KCkge1xuICAgICAgICBjb25zdCBhY3Rpdml0eSA9IHsgcHJvZ3Jlc3M6IDAsIGNvbXBsZXRlZDogZmFsc2UgfTtcbiAgICAgICAgdGhpcy5vbmdvaW5nQWN0aXZpdGllcy5hZGQoYWN0aXZpdHkpO1xuICAgICAgICBpZiAodGhpcy5vbmdvaW5nQWN0aXZpdHlDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgLy8gQW5ub3VuY2UgdGhlIGZpcnN0IHByb2dyZXNzIGV2ZW50ICh3aGljaCBzaG91bGQgYWx3YXlzIGJlIDAgLyAxXG4gICAgICAgICAgICAvLyB0b3RhbCBwcm9ncmVzcyk6XG4gICAgICAgICAgICB0aGlzLmFubm91bmNlVG90YWxQcm9ncmVzcyhhY3Rpdml0eSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChwcm9ncmVzcykgPT4ge1xuICAgICAgICAgICAgbGV0IG5leHRQcm9ncmVzcztcbiAgICAgICAgICAgIG5leHRQcm9ncmVzcyA9IE1hdGgubWF4KGNsYW1wKHByb2dyZXNzLCAwLCAxKSwgYWN0aXZpdHkucHJvZ3Jlc3MpO1xuICAgICAgICAgICAgaWYgKG5leHRQcm9ncmVzcyAhPT0gYWN0aXZpdHkucHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFubm91bmNlVG90YWxQcm9ncmVzcyhhY3Rpdml0eSwgbmV4dFByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY3Rpdml0eS5wcm9ncmVzcztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYW5ub3VuY2VUb3RhbFByb2dyZXNzKHVwZGF0ZWRBY3Rpdml0eSwgbmV4dFByb2dyZXNzKSB7XG4gICAgICAgIGxldCBwcm9ncmVzc0xlZnQgPSAwO1xuICAgICAgICBsZXQgY29tcGxldGVkQWN0aXZpdGllcyA9IDA7XG4gICAgICAgIGlmIChuZXh0UHJvZ3Jlc3MgPT0gMS4wKVxuICAgICAgICAgICAgdXBkYXRlZEFjdGl2aXR5LmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGZvciAoY29uc3QgYWN0aXZpdHkgb2YgdGhpcy5vbmdvaW5nQWN0aXZpdGllcykge1xuICAgICAgICAgICAgY29uc3QgeyBwcm9ncmVzcyB9ID0gYWN0aXZpdHk7XG4gICAgICAgICAgICBwcm9ncmVzc0xlZnQgKz0gMS4wIC0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICBpZiAoYWN0aXZpdHkuY29tcGxldGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkQWN0aXZpdGllcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhc3RQcm9ncmVzcyA9IHVwZGF0ZWRBY3Rpdml0eS5wcm9ncmVzcztcbiAgICAgICAgdXBkYXRlZEFjdGl2aXR5LnByb2dyZXNzID0gbmV4dFByb2dyZXNzO1xuICAgICAgICAvLyBBZHZhbmNlIHRoZSB0b3RhbCBwcm9ncmVzcyBieSB0aGUgZnJhY3Rpb24gb2YgdG90YWwgcmVtYWluaW5nIHByb2dyZXNzXG4gICAgICAgIC8vIGR1ZSB0byB0aGlzIGFjdGl2aXR5LlxuICAgICAgICB0aGlzLnRvdGFsUHJvZ3Jlc3MgKz0gKG5leHRQcm9ncmVzcyAtIGxhc3RQcm9ncmVzcykgKlxuICAgICAgICAgICAgKDEuMCAtIHRoaXMudG90YWxQcm9ncmVzcykgLyBwcm9ncmVzc0xlZnQ7XG4gICAgICAgIGNvbnN0IHRvdGFsUHJvZ3Jlc3MgPSBjb21wbGV0ZWRBY3Rpdml0aWVzID09PSB0aGlzLm9uZ29pbmdBY3Rpdml0eUNvdW50ID9cbiAgICAgICAgICAgIDEuMCA6XG4gICAgICAgICAgICB0aGlzLnRvdGFsUHJvZ3Jlc3M7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3Byb2dyZXNzJywgeyBkZXRhaWw6IHsgdG90YWxQcm9ncmVzcyB9IH0pKTtcbiAgICAgICAgaWYgKGNvbXBsZXRlZEFjdGl2aXRpZXMgPT09IHRoaXMub25nb2luZ0FjdGl2aXR5Q291bnQpIHtcbiAgICAgICAgICAgIHRoaXMudG90YWxQcm9ncmVzcyA9IDAuMDtcbiAgICAgICAgICAgIHRoaXMub25nb2luZ0FjdGl2aXRpZXMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2dyZXNzLXRyYWNrZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/progress-tracker.js\n");

/***/ })

};
;