"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_storage_download_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/download.js":
/*!************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/storage/download.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   download: function() { return /* binding */ download; }\n/* harmony export */ });\n/* harmony import */ var _utils_fetch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/fetch.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/fetch.js\");\n/* harmony import */ var _utils_ipfs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ipfs.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/ipfs.js\");\n\n\n/**\n * @description Downloads a file from the specified IPFS, Arweave, or HTTP URI.\n *\n * `download` will parse the provided URI based on its scheme (ipfs://, ar://, https://) and convert it to a URL to fetch the file from thirdweb's storage service.\n *\n * @param options - The download options.\n * @param options.client - The Thirdweb client. See [createThirdwebClient](https://portal.thirdweb.com/references/typescript/v5/createThirdwebClient).\n * @param options.uri - The URI of the file to download. Can be IPFS, Arweave, or HTTP.\n * @param [options.requestTimeoutMs] - The maximum time in milliseconds to wait for the request to complete. Defaults to 60 seconds (60,000 milliseconds).\n *\n * @returns Asynchronously returns the network response from fetching the file.\n * @throws An error if the URI scheme is invalid or if the request fails.\n *\n * @example\n * Download a file from IPFS:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"@thirdweb-dev/sdk\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"ipfs://Qm...\",\n * });\n * ```\n *\n * Download a file from Arweave:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"@thirdweb-dev/sdk\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"ar://{arweave-transaction-id}\",\n * });\n * ```\n *\n * Download a file from HTTP:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"@thirdweb-dev/sdk\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"https://example.com/file.txt\",\n * });\n * ```\n *\n * @storage\n */\nasync function download(options) {\n    let url;\n    if (options.uri.startsWith(\"ar://\")) {\n        const { resolveArweaveScheme } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_utils_arweave_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../utils/arweave.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/arweave.js\"));\n        url = resolveArweaveScheme(options);\n    }\n    else {\n        url = (0,_utils_ipfs_js__WEBPACK_IMPORTED_MODULE_0__.resolveScheme)(options);\n    }\n    const res = await (0,_utils_fetch_js__WEBPACK_IMPORTED_MODULE_1__.getClientFetch)(options.client)(url, {\n        keepalive: options.client.config?.storage?.fetch?.keepalive,\n        headers: options.client.config?.storage?.fetch?.headers,\n        requestTimeoutMs: options.requestTimeoutMs ??\n            options.client.config?.storage?.fetch?.requestTimeoutMs ??\n            60000,\n    });\n    if (!res.ok) {\n        res.body?.cancel();\n        throw new Error(`Failed to download file: ${res.statusText}`);\n    }\n    return res;\n}\n//# sourceMappingURL=download.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9zdG9yYWdlL2Rvd25sb2FkLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtRDtBQUNGO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0EseUNBQXlDLDRCQUE0QjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVztBQUN2QixZQUFZLHVCQUF1QjtBQUNuQztBQUNBLHlDQUF5Qyw0QkFBNEI7QUFDckU7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHVCQUF1QjtBQUN2QyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkIsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQSx5Q0FBeUMsNEJBQTRCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsZ0JBQWdCLHVCQUF1QixRQUFRLG1RQUE2QjtBQUM1RTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDZEQUFhO0FBQzNCO0FBQ0Esc0JBQXNCLCtEQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG9EQUFvRCxlQUFlO0FBQ25FO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9zdG9yYWdlL2Rvd25sb2FkLmpzP2I0MmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q2xpZW50RmV0Y2ggfSBmcm9tIFwiLi4vdXRpbHMvZmV0Y2guanNcIjtcbmltcG9ydCB7IHJlc29sdmVTY2hlbWUgfSBmcm9tIFwiLi4vdXRpbHMvaXBmcy5qc1wiO1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gRG93bmxvYWRzIGEgZmlsZSBmcm9tIHRoZSBzcGVjaWZpZWQgSVBGUywgQXJ3ZWF2ZSwgb3IgSFRUUCBVUkkuXG4gKlxuICogYGRvd25sb2FkYCB3aWxsIHBhcnNlIHRoZSBwcm92aWRlZCBVUkkgYmFzZWQgb24gaXRzIHNjaGVtZSAoaXBmczovLywgYXI6Ly8sIGh0dHBzOi8vKSBhbmQgY29udmVydCBpdCB0byBhIFVSTCB0byBmZXRjaCB0aGUgZmlsZSBmcm9tIHRoaXJkd2ViJ3Mgc3RvcmFnZSBzZXJ2aWNlLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIGRvd25sb2FkIG9wdGlvbnMuXG4gKiBAcGFyYW0gb3B0aW9ucy5jbGllbnQgLSBUaGUgVGhpcmR3ZWIgY2xpZW50LiBTZWUgW2NyZWF0ZVRoaXJkd2ViQ2xpZW50XShodHRwczovL3BvcnRhbC50aGlyZHdlYi5jb20vcmVmZXJlbmNlcy90eXBlc2NyaXB0L3Y1L2NyZWF0ZVRoaXJkd2ViQ2xpZW50KS5cbiAqIEBwYXJhbSBvcHRpb25zLnVyaSAtIFRoZSBVUkkgb2YgdGhlIGZpbGUgdG8gZG93bmxvYWQuIENhbiBiZSBJUEZTLCBBcndlYXZlLCBvciBIVFRQLlxuICogQHBhcmFtIFtvcHRpb25zLnJlcXVlc3RUaW1lb3V0TXNdIC0gVGhlIG1heGltdW0gdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgdGhlIHJlcXVlc3QgdG8gY29tcGxldGUuIERlZmF1bHRzIHRvIDYwIHNlY29uZHMgKDYwLDAwMCBtaWxsaXNlY29uZHMpLlxuICpcbiAqIEByZXR1cm5zIEFzeW5jaHJvbm91c2x5IHJldHVybnMgdGhlIG5ldHdvcmsgcmVzcG9uc2UgZnJvbSBmZXRjaGluZyB0aGUgZmlsZS5cbiAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlIFVSSSBzY2hlbWUgaXMgaW52YWxpZCBvciBpZiB0aGUgcmVxdWVzdCBmYWlscy5cbiAqXG4gKiBAZXhhbXBsZVxuICogRG93bmxvYWQgYSBmaWxlIGZyb20gSVBGUzpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBkb3dubG9hZCB9IGZyb20gXCJ0aGlyZHdlYi9zdG9yYWdlXCI7XG4gKiBpbXBvcnQgeyBjcmVhdGVUaGlyZHdlYkNsaWVudCB9IGZyb20gXCJAdGhpcmR3ZWItZGV2L3Nka1wiO1xuICpcbiAqIGNvbnN0IGNsaWVudCA9IGNyZWF0ZVRoaXJkd2ViQ2xpZW50KHsgY2xpZW50SWQ6IFwiWU9VUl9DTElFTlRfSURcIiB9KTtcbiAqXG4gKiBjb25zdCBmaWxlID0gYXdhaXQgZG93bmxvYWQoe1xuICogIGNsaWVudCxcbiAqICB1cmk6IFwiaXBmczovL1FtLi4uXCIsXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIERvd25sb2FkIGEgZmlsZSBmcm9tIEFyd2VhdmU6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZG93bmxvYWQgfSBmcm9tIFwidGhpcmR3ZWIvc3RvcmFnZVwiO1xuICogaW1wb3J0IHsgY3JlYXRlVGhpcmR3ZWJDbGllbnQgfSBmcm9tIFwiQHRoaXJkd2ViLWRldi9zZGtcIjtcbiAqXG4gKiBjb25zdCBjbGllbnQgPSBjcmVhdGVUaGlyZHdlYkNsaWVudCh7IGNsaWVudElkOiBcIllPVVJfQ0xJRU5UX0lEXCIgfSk7XG4gKlxuICogY29uc3QgZmlsZSA9IGF3YWl0IGRvd25sb2FkKHtcbiAqICBjbGllbnQsXG4gKiAgdXJpOiBcImFyOi8ve2Fyd2VhdmUtdHJhbnNhY3Rpb24taWR9XCIsXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIERvd25sb2FkIGEgZmlsZSBmcm9tIEhUVFA6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZG93bmxvYWQgfSBmcm9tIFwidGhpcmR3ZWIvc3RvcmFnZVwiO1xuICogaW1wb3J0IHsgY3JlYXRlVGhpcmR3ZWJDbGllbnQgfSBmcm9tIFwiQHRoaXJkd2ViLWRldi9zZGtcIjtcbiAqXG4gKiBjb25zdCBjbGllbnQgPSBjcmVhdGVUaGlyZHdlYkNsaWVudCh7IGNsaWVudElkOiBcIllPVVJfQ0xJRU5UX0lEXCIgfSk7XG4gKlxuICogY29uc3QgZmlsZSA9IGF3YWl0IGRvd25sb2FkKHtcbiAqICBjbGllbnQsXG4gKiAgdXJpOiBcImh0dHBzOi8vZXhhbXBsZS5jb20vZmlsZS50eHRcIixcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHN0b3JhZ2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkKG9wdGlvbnMpIHtcbiAgICBsZXQgdXJsO1xuICAgIGlmIChvcHRpb25zLnVyaS5zdGFydHNXaXRoKFwiYXI6Ly9cIikpIHtcbiAgICAgICAgY29uc3QgeyByZXNvbHZlQXJ3ZWF2ZVNjaGVtZSB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vdXRpbHMvYXJ3ZWF2ZS5qc1wiKTtcbiAgICAgICAgdXJsID0gcmVzb2x2ZUFyd2VhdmVTY2hlbWUob3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB1cmwgPSByZXNvbHZlU2NoZW1lKG9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRDbGllbnRGZXRjaChvcHRpb25zLmNsaWVudCkodXJsLCB7XG4gICAgICAgIGtlZXBhbGl2ZTogb3B0aW9ucy5jbGllbnQuY29uZmlnPy5zdG9yYWdlPy5mZXRjaD8ua2VlcGFsaXZlLFxuICAgICAgICBoZWFkZXJzOiBvcHRpb25zLmNsaWVudC5jb25maWc/LnN0b3JhZ2U/LmZldGNoPy5oZWFkZXJzLFxuICAgICAgICByZXF1ZXN0VGltZW91dE1zOiBvcHRpb25zLnJlcXVlc3RUaW1lb3V0TXMgPz9cbiAgICAgICAgICAgIG9wdGlvbnMuY2xpZW50LmNvbmZpZz8uc3RvcmFnZT8uZmV0Y2g/LnJlcXVlc3RUaW1lb3V0TXMgPz9cbiAgICAgICAgICAgIDYwMDAwLFxuICAgIH0pO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgIHJlcy5ib2R5Py5jYW5jZWwoKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZG93bmxvYWQgZmlsZTogJHtyZXMuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvd25sb2FkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/download.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/ipfs.js":
/*!******************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/ipfs.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findIPFSCidFromUri: function() { return /* binding */ findIPFSCidFromUri; },\n/* harmony export */   getBaseUriFromBatch: function() { return /* binding */ getBaseUriFromBatch; },\n/* harmony export */   resolveScheme: function() { return /* binding */ resolveScheme; },\n/* harmony export */   uploadOrExtractURIs: function() { return /* binding */ uploadOrExtractURIs; }\n/* harmony export */ });\nconst DEFAULT_GATEWAY = \"https://{clientId}.ipfscdn.io/ipfs/{cid}\";\n/**\n * Resolves the scheme of a given URI and returns the corresponding URL.\n * If the URI starts with \"ipfs://\", it constructs a URL using the IPFS client ID and the IPFS gateway.\n * If the URI starts with \"http\", it returns the URI as is.\n * Otherwise, it throws an error indicating an invalid URI scheme.\n * @param options - The options object containing the URI and the IPFS client.\n * @returns The resolved URL.\n * @throws Error if the URI scheme is invalid.\n * @example\n * ```ts\n * import { resolveScheme } from \"thirdweb/storage\";\n * const url = resolveScheme({\n *  client,\n *  uri: \"ipfs://Qm...\",\n * });\n * ```\n * @storage\n */\nfunction resolveScheme(options) {\n    if (options.uri.startsWith(\"ipfs://\")) {\n        const gateway = options.client.config?.storage?.gatewayUrl ?? DEFAULT_GATEWAY;\n        const clientId = options.client.clientId;\n        const cid = findIPFSCidFromUri(options.uri);\n        let bundleId = undefined;\n        if (typeof globalThis !== \"undefined\" && \"Application\" in globalThis) {\n            // shims use wallet connect RN module which injects Application info in globalThis\n            // biome-ignore lint/suspicious/noExplicitAny: get around globalThis typing\n            bundleId = globalThis.Application.applicationId;\n        }\n        // purposefully using SPLIT here and not replace for CID to avoid cases where users don't know the schema\n        // also only splitting on `/ipfs` to avoid cases where people pass non `/` terminated gateway urls\n        return `${gateway.replace(\"{clientId}\", clientId).split(\"/ipfs\")[0]}/ipfs/${cid}${bundleId ? `?bundleId=${bundleId}` : \"\"}`;\n    }\n    if (options.uri.startsWith(\"http\")) {\n        return options.uri;\n    }\n    throw new Error(`Invalid URI scheme, expected \"ipfs://\" or \"http(s)://\"`);\n}\n/**\n * @internal\n */\nfunction findIPFSCidFromUri(uri) {\n    if (!uri.startsWith(\"ipfs://\")) {\n        // do not touch URIs that are not ipfs URIs\n        return uri;\n    }\n    // first index of `/Qm` or `/bafy` in the uri (case insensitive)\n    const firstIndex = uri.search(/\\/(Qm|baf)/i);\n    // we start one character after the first `/` to avoid including it in the CID\n    return uri.slice(firstIndex + 1);\n}\n/**\n * Uploads or extracts URIs from the given files.\n * @template T - The type of the files (File, Buffer, String).\n * @param files - The files to upload or extract URIs from.\n * @param client - The Thirdweb client.\n * @param [startNumber] - The starting number for rewriting file names.\n * @returns - A promise that resolves to an array of URIs.\n * @throws {Error} - If the files are not all of the same type (all URI or all FileOrBufferOrString).\n * @internal\n *\n */\nasync function uploadOrExtractURIs(files, client, startNumber) {\n    if (isUriList(files)) {\n        return files;\n    }\n    if (isMetadataList(files)) {\n        const { upload } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_storage_upload_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../storage/upload.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/upload.js\"));\n        const uris = await upload({\n            client,\n            files,\n            rewriteFileNames: {\n                fileStartNumber: startNumber || 0,\n            },\n        });\n        return Array.isArray(uris) ? uris : [uris];\n    }\n    throw new Error(\"Files must all be of the same type (all URI or all FileOrBufferOrString)\");\n}\n/**\n * Retrieves the base URI from a batch of URIs.\n *\n * @param uris - An array of URIs.\n * @returns The base URI shared by all URIs in the batch.\n * @throws If the batch contains URIs with different base URIs or if no base URI is found.\n * @internal\n */\nfunction getBaseUriFromBatch(uris) {\n    // biome-ignore lint/style/noParameterAssign: lemme do my stuff\n    uris = Array.isArray(uris) ? uris : [uris];\n    const [base, ...rest] = uris.map((uri) => {\n        // remove query parameters\n        // biome-ignore lint/style/noParameterAssign: lemme do my stuff\n        [uri] = uri.split(\"?\");\n        // remove fragments\n        // biome-ignore lint/style/noParameterAssign: lemme do my stuff\n        [uri] = uri.split(\"#\");\n        // if the URI ends with a `/`, remove it\n        if (uri.endsWith(\"/\")) {\n            // biome-ignore lint/style/noParameterAssign: lemme do my stuff\n            uri = uri.slice(0, -1);\n        }\n        // remove the last part of the URI & add the trailing `/`\n        return `${uri.split(\"/\").slice(0, -1).join(\"/\")}/`;\n    });\n    if (!base) {\n        throw new Error(\"Batch of URIs is empty\");\n    }\n    if (rest.some((uri) => uri !== base)) {\n        throw new Error(\"All URIs in the batch must have the same base URI\");\n    }\n    return base;\n}\nfunction isUriList(metadatas) {\n    return metadatas.every((m) => typeof m === \"string\");\n}\nfunction isMetadataList(metadatas) {\n    return metadatas.every((m) => typeof m !== \"string\");\n}\n//# sourceMappingURL=ipfs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/ipfs.js\n"));

/***/ })

}]);